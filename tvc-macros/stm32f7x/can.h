/////////////////////////////////////////////////////////////////////////
// File : d:/Lisp/Production/stm32-svd/macro-c/can.h
// 
//
// Generated on the 29/06/2015 19:00 by the 'super-cool' code generator 
//
// Generator written in Common Lisp, by rémi prud'homme
// with the help of : 
//
/////////////////////////////////////////////////////////////////////////
//  Copyrigtht remi prudhomme, tvc stm32 2015  2015
/////////////////////////////////////////////////////////////////////////


// This file is generated on.
// Don't modify it 
#pragma once 
 
#define NB_DEVICE_CAN 2
#define CAN1 0x40006400
#define CAN2 0x40006800
/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register Mcr at offset 0x0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_MCR( base,  val) \
     WRITE_REGISTER_ULONG( base , val)

#define SET_BITS_MCR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  mask ); \
   } 

#define CLEAR_BITS_MCR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base ,  val & ~mask ); \
   } 

#define READ_REGISTER_MCR( base ) \
     READ_REGISTER_ULONG( base ) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // INRQ 
    // 
#define INRQ_MASK 0x1U
#define INRQ_OFFSET 0
#define INRQ_START_BIT 0
#define INRQ_WIDTH 1


#define MCR_REG 0x0

typedef enum inrq {
    INRQ_0,
    INRQ_1
} INRQ_T ;
#define WRITE_INRQ(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~INRQ_MASK) | ((val << INRQ_START_BIT) & INRQ_MASK )); \
   } 

#define ENABLE_INRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  INRQ_MASK ); \
   } 

#define DISABLE_INRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~INRQ_MASK ); \
   } 

#define READ_INRQ(base) \
    ((READ_REGISTER_ULONG(base ) & INRQ_MASK) >> INRQ_START_BIT )

#define WHEN_INRQ_HIGH(base) \
     if ( READ_INRQ(base) )


#define UNLESS_INRQ_HIGH(base) \
     if (! READ_INRQ(base) )


#define WAIT_INRQ_LOW(base) \
    while ( READ_INRQ(base) );


#define WAIT_INRQ_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_INRQ(base) && (--timeout > 0) );


#define WAIT_INRQ_HIGH(base) \
    while (! READ_INRQ(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SLEEP 
    // 
#define SLEEP_MASK 0x2U
#define SLEEP_OFFSET 1
#define SLEEP_START_BIT 1
#define SLEEP_WIDTH 1



typedef enum sleep {
    SLEEP_0,
    SLEEP_1
} SLEEP_T ;
#define WRITE_SLEEP(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~SLEEP_MASK) | ((val << SLEEP_START_BIT) & SLEEP_MASK )); \
   } 

#define ENABLE_SLEEP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  SLEEP_MASK ); \
   } 

#define DISABLE_SLEEP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~SLEEP_MASK ); \
   } 

#define READ_SLEEP(base) \
    ((READ_REGISTER_ULONG(base ) & SLEEP_MASK) >> SLEEP_START_BIT )

#define WHEN_SLEEP_HIGH(base) \
     if ( READ_SLEEP(base) )


#define UNLESS_SLEEP_HIGH(base) \
     if (! READ_SLEEP(base) )


#define WAIT_SLEEP_LOW(base) \
    while ( READ_SLEEP(base) );


#define WAIT_SLEEP_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SLEEP(base) && (--timeout > 0) );


#define WAIT_SLEEP_HIGH(base) \
    while (! READ_SLEEP(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXFP 
    // 
#define TXFP_MASK 0x4U
#define TXFP_OFFSET 2
#define TXFP_START_BIT 2
#define TXFP_WIDTH 1



typedef enum txfp {
    TXFP_0,
    TXFP_1
} TXFP_T ;
#define WRITE_TXFP(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~TXFP_MASK) | ((val << TXFP_START_BIT) & TXFP_MASK )); \
   } 

#define ENABLE_TXFP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  TXFP_MASK ); \
   } 

#define DISABLE_TXFP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~TXFP_MASK ); \
   } 

#define READ_TXFP(base) \
    ((READ_REGISTER_ULONG(base ) & TXFP_MASK) >> TXFP_START_BIT )

#define WHEN_TXFP_HIGH(base) \
     if ( READ_TXFP(base) )


#define UNLESS_TXFP_HIGH(base) \
     if (! READ_TXFP(base) )


#define WAIT_TXFP_LOW(base) \
    while ( READ_TXFP(base) );


#define WAIT_TXFP_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXFP(base) && (--timeout > 0) );


#define WAIT_TXFP_HIGH(base) \
    while (! READ_TXFP(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RFLM 
    // 
#define RFLM_MASK 0x8U
#define RFLM_OFFSET 3
#define RFLM_START_BIT 3
#define RFLM_WIDTH 1



typedef enum rflm {
    RFLM_0,
    RFLM_1
} RFLM_T ;
#define WRITE_RFLM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~RFLM_MASK) | ((val << RFLM_START_BIT) & RFLM_MASK )); \
   } 

#define ENABLE_RFLM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  RFLM_MASK ); \
   } 

#define DISABLE_RFLM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~RFLM_MASK ); \
   } 

#define READ_RFLM(base) \
    ((READ_REGISTER_ULONG(base ) & RFLM_MASK) >> RFLM_START_BIT )

#define WHEN_RFLM_HIGH(base) \
     if ( READ_RFLM(base) )


#define UNLESS_RFLM_HIGH(base) \
     if (! READ_RFLM(base) )


#define WAIT_RFLM_LOW(base) \
    while ( READ_RFLM(base) );


#define WAIT_RFLM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RFLM(base) && (--timeout > 0) );


#define WAIT_RFLM_HIGH(base) \
    while (! READ_RFLM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // NART 
    // 
#define NART_MASK 0x10U
#define NART_OFFSET 4
#define NART_START_BIT 4
#define NART_WIDTH 1



typedef enum nart {
    NART_0,
    NART_1
} NART_T ;
#define WRITE_NART(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~NART_MASK) | ((val << NART_START_BIT) & NART_MASK )); \
   } 

#define ENABLE_NART(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  NART_MASK ); \
   } 

#define DISABLE_NART(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~NART_MASK ); \
   } 

#define READ_NART(base) \
    ((READ_REGISTER_ULONG(base ) & NART_MASK) >> NART_START_BIT )

#define WHEN_NART_HIGH(base) \
     if ( READ_NART(base) )


#define UNLESS_NART_HIGH(base) \
     if (! READ_NART(base) )


#define WAIT_NART_LOW(base) \
    while ( READ_NART(base) );


#define WAIT_NART_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_NART(base) && (--timeout > 0) );


#define WAIT_NART_HIGH(base) \
    while (! READ_NART(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // AWUM 
    // 
#define AWUM_MASK 0x20U
#define AWUM_OFFSET 5
#define AWUM_START_BIT 5
#define AWUM_WIDTH 1



typedef enum awum {
    AWUM_0,
    AWUM_1
} AWUM_T ;
#define WRITE_AWUM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~AWUM_MASK) | ((val << AWUM_START_BIT) & AWUM_MASK )); \
   } 

#define ENABLE_AWUM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  AWUM_MASK ); \
   } 

#define DISABLE_AWUM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~AWUM_MASK ); \
   } 

#define READ_AWUM(base) \
    ((READ_REGISTER_ULONG(base ) & AWUM_MASK) >> AWUM_START_BIT )

#define WHEN_AWUM_HIGH(base) \
     if ( READ_AWUM(base) )


#define UNLESS_AWUM_HIGH(base) \
     if (! READ_AWUM(base) )


#define WAIT_AWUM_LOW(base) \
    while ( READ_AWUM(base) );


#define WAIT_AWUM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_AWUM(base) && (--timeout > 0) );


#define WAIT_AWUM_HIGH(base) \
    while (! READ_AWUM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ABOM 
    // 
#define ABOM_MASK 0x40U
#define ABOM_OFFSET 6
#define ABOM_START_BIT 6
#define ABOM_WIDTH 1



typedef enum abom {
    ABOM_0,
    ABOM_1
} ABOM_T ;
#define WRITE_ABOM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~ABOM_MASK) | ((val << ABOM_START_BIT) & ABOM_MASK )); \
   } 

#define ENABLE_ABOM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  ABOM_MASK ); \
   } 

#define DISABLE_ABOM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~ABOM_MASK ); \
   } 

#define READ_ABOM(base) \
    ((READ_REGISTER_ULONG(base ) & ABOM_MASK) >> ABOM_START_BIT )

#define WHEN_ABOM_HIGH(base) \
     if ( READ_ABOM(base) )


#define UNLESS_ABOM_HIGH(base) \
     if (! READ_ABOM(base) )


#define WAIT_ABOM_LOW(base) \
    while ( READ_ABOM(base) );


#define WAIT_ABOM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ABOM(base) && (--timeout > 0) );


#define WAIT_ABOM_HIGH(base) \
    while (! READ_ABOM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TTCM 
    // 
#define TTCM_MASK 0x80U
#define TTCM_OFFSET 7
#define TTCM_START_BIT 7
#define TTCM_WIDTH 1



typedef enum ttcm {
    TTCM_0,
    TTCM_1
} TTCM_T ;
#define WRITE_TTCM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~TTCM_MASK) | ((val << TTCM_START_BIT) & TTCM_MASK )); \
   } 

#define ENABLE_TTCM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  TTCM_MASK ); \
   } 

#define DISABLE_TTCM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~TTCM_MASK ); \
   } 

#define READ_TTCM(base) \
    ((READ_REGISTER_ULONG(base ) & TTCM_MASK) >> TTCM_START_BIT )

#define WHEN_TTCM_HIGH(base) \
     if ( READ_TTCM(base) )


#define UNLESS_TTCM_HIGH(base) \
     if (! READ_TTCM(base) )


#define WAIT_TTCM_LOW(base) \
    while ( READ_TTCM(base) );


#define WAIT_TTCM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TTCM(base) && (--timeout > 0) );


#define WAIT_TTCM_HIGH(base) \
    while (! READ_TTCM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RESET 
    // 
#define RESET_MASK 0x8000U
#define RESET_OFFSET 15
#define RESET_START_BIT 15
#define RESET_WIDTH 1



typedef enum reset {
    RESET_0,
    RESET_1
} RESET_T ;
#define WRITE_RESET(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~RESET_MASK) | ((val << RESET_START_BIT) & RESET_MASK )); \
   } 

#define ENABLE_RESET(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  RESET_MASK ); \
   } 

#define DISABLE_RESET(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~RESET_MASK ); \
   } 

#define READ_RESET(base) \
    ((READ_REGISTER_ULONG(base ) & RESET_MASK) >> RESET_START_BIT )

#define WHEN_RESET_HIGH(base) \
     if ( READ_RESET(base) )


#define UNLESS_RESET_HIGH(base) \
     if (! READ_RESET(base) )


#define WAIT_RESET_LOW(base) \
    while ( READ_RESET(base) );


#define WAIT_RESET_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RESET(base) && (--timeout > 0) );


#define WAIT_RESET_HIGH(base) \
    while (! READ_RESET(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Mcr
//
// Return the value of register MCR
//
// Notes : Register master control register (MCR) at the offset 0x0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DBF 
    // 
#define DBF_MASK 0x10000U
#define DBF_OFFSET 16
#define DBF_START_BIT 16
#define DBF_WIDTH 1



typedef enum dbf {
    DBF_0,
    DBF_1
} DBF_T ;
#define WRITE_DBF(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  ); \
     WRITE_REGISTER_ULONG( base , (OldValue & ~DBF_MASK) | ((val << DBF_START_BIT) & DBF_MASK )); \
   } 

#define ENABLE_DBF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base ); \
     WRITE_REGISTER_ULONG( base , val |  DBF_MASK ); \
   } 

#define DISABLE_DBF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base  ); \
     WRITE_REGISTER_ULONG( base , val & ~DBF_MASK ); \
   } 

#define READ_DBF(base) \
    ((READ_REGISTER_ULONG(base ) & DBF_MASK) >> DBF_START_BIT )

#define WHEN_DBF_HIGH(base) \
     if ( READ_DBF(base) )


#define UNLESS_DBF_HIGH(base) \
     if (! READ_DBF(base) )


#define WAIT_DBF_LOW(base) \
    while ( READ_DBF(base) );


#define WAIT_DBF_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_DBF(base) && (--timeout > 0) );


#define WAIT_DBF_HIGH(base) \
    while (! READ_DBF(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register Msr at offset 0x4
//
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // INAK 
    // 
#define INAK_MASK 0x1U
#define INAK_OFFSET 0
#define INAK_START_BIT 0
#define INAK_WIDTH 1


#define MSR_REG 0x4

typedef enum inak {
    INAK_0,
    INAK_1
} INAK_T ;
#define WRITE_INAK(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~INAK_MASK) | ((val << INAK_START_BIT) & INAK_MASK )); \
   } 

#define ENABLE_INAK(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  INAK_MASK ); \
   } 

#define DISABLE_INAK(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~INAK_MASK ); \
   } 

#define READ_INAK(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & INAK_MASK) >> INAK_START_BIT )

#define WHEN_INAK_HIGH(base) \
     if ( READ_INAK(base) )


#define UNLESS_INAK_HIGH(base) \
     if (! READ_INAK(base) )


#define WAIT_INAK_LOW(base) \
    while ( READ_INAK(base) );


#define WAIT_INAK_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_INAK(base) && (--timeout > 0) );


#define WAIT_INAK_HIGH(base) \
    while (! READ_INAK(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SLAK 
    // 
#define SLAK_MASK 0x2U
#define SLAK_OFFSET 1
#define SLAK_START_BIT 1
#define SLAK_WIDTH 1



typedef enum slak {
    SLAK_0,
    SLAK_1
} SLAK_T ;
#define WRITE_SLAK(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~SLAK_MASK) | ((val << SLAK_START_BIT) & SLAK_MASK )); \
   } 

#define ENABLE_SLAK(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  SLAK_MASK ); \
   } 

#define DISABLE_SLAK(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~SLAK_MASK ); \
   } 

#define READ_SLAK(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & SLAK_MASK) >> SLAK_START_BIT )

#define WHEN_SLAK_HIGH(base) \
     if ( READ_SLAK(base) )


#define UNLESS_SLAK_HIGH(base) \
     if (! READ_SLAK(base) )


#define WAIT_SLAK_LOW(base) \
    while ( READ_SLAK(base) );


#define WAIT_SLAK_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SLAK(base) && (--timeout > 0) );


#define WAIT_SLAK_HIGH(base) \
    while (! READ_SLAK(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ERRI 
    // 
#define ERRI_MASK 0x4U
#define ERRI_OFFSET 2
#define ERRI_START_BIT 2
#define ERRI_WIDTH 1



typedef enum erri {
    ERRI_0,
    ERRI_1
} ERRI_T ;
#define WRITE_ERRI(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~ERRI_MASK) | ((val << ERRI_START_BIT) & ERRI_MASK )); \
   } 

#define ENABLE_ERRI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  ERRI_MASK ); \
   } 

#define DISABLE_ERRI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~ERRI_MASK ); \
   } 

#define READ_ERRI(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & ERRI_MASK) >> ERRI_START_BIT )

#define WHEN_ERRI_HIGH(base) \
     if ( READ_ERRI(base) )


#define UNLESS_ERRI_HIGH(base) \
     if (! READ_ERRI(base) )


#define WAIT_ERRI_LOW(base) \
    while ( READ_ERRI(base) );


#define WAIT_ERRI_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ERRI(base) && (--timeout > 0) );


#define WAIT_ERRI_HIGH(base) \
    while (! READ_ERRI(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // WKUI 
    // 
#define WKUI_MASK 0x8U
#define WKUI_OFFSET 3
#define WKUI_START_BIT 3
#define WKUI_WIDTH 1



typedef enum wkui {
    WKUI_0,
    WKUI_1
} WKUI_T ;
#define WRITE_WKUI(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~WKUI_MASK) | ((val << WKUI_START_BIT) & WKUI_MASK )); \
   } 

#define ENABLE_WKUI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  WKUI_MASK ); \
   } 

#define DISABLE_WKUI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~WKUI_MASK ); \
   } 

#define READ_WKUI(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & WKUI_MASK) >> WKUI_START_BIT )

#define WHEN_WKUI_HIGH(base) \
     if ( READ_WKUI(base) )


#define UNLESS_WKUI_HIGH(base) \
     if (! READ_WKUI(base) )


#define WAIT_WKUI_LOW(base) \
    while ( READ_WKUI(base) );


#define WAIT_WKUI_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_WKUI(base) && (--timeout > 0) );


#define WAIT_WKUI_HIGH(base) \
    while (! READ_WKUI(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SLAKI 
    // 
#define SLAKI_MASK 0x10U
#define SLAKI_OFFSET 4
#define SLAKI_START_BIT 4
#define SLAKI_WIDTH 1



typedef enum slaki {
    SLAKI_0,
    SLAKI_1
} SLAKI_T ;
#define WRITE_SLAKI(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~SLAKI_MASK) | ((val << SLAKI_START_BIT) & SLAKI_MASK )); \
   } 

#define ENABLE_SLAKI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  SLAKI_MASK ); \
   } 

#define DISABLE_SLAKI(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~SLAKI_MASK ); \
   } 

#define READ_SLAKI(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & SLAKI_MASK) >> SLAKI_START_BIT )

#define WHEN_SLAKI_HIGH(base) \
     if ( READ_SLAKI(base) )


#define UNLESS_SLAKI_HIGH(base) \
     if (! READ_SLAKI(base) )


#define WAIT_SLAKI_LOW(base) \
    while ( READ_SLAKI(base) );


#define WAIT_SLAKI_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SLAKI(base) && (--timeout > 0) );


#define WAIT_SLAKI_HIGH(base) \
    while (! READ_SLAKI(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXM 
    // 
#define TXM_MASK 0x100U
#define TXM_OFFSET 8
#define TXM_START_BIT 8
#define TXM_WIDTH 1



typedef enum txm {
    TXM_0,
    TXM_1
} TXM_T ;
#define WRITE_TXM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~TXM_MASK) | ((val << TXM_START_BIT) & TXM_MASK )); \
   } 

#define ENABLE_TXM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  TXM_MASK ); \
   } 

#define DISABLE_TXM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~TXM_MASK ); \
   } 

#define READ_TXM(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & TXM_MASK) >> TXM_START_BIT )

#define WHEN_TXM_HIGH(base) \
     if ( READ_TXM(base) )


#define UNLESS_TXM_HIGH(base) \
     if (! READ_TXM(base) )


#define WAIT_TXM_LOW(base) \
    while ( READ_TXM(base) );


#define WAIT_TXM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXM(base) && (--timeout > 0) );


#define WAIT_TXM_HIGH(base) \
    while (! READ_TXM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RXM 
    // 
#define RXM_MASK 0x200U
#define RXM_OFFSET 9
#define RXM_START_BIT 9
#define RXM_WIDTH 1



typedef enum rxm {
    RXM_0,
    RXM_1
} RXM_T ;
#define WRITE_RXM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~RXM_MASK) | ((val << RXM_START_BIT) & RXM_MASK )); \
   } 

#define ENABLE_RXM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  RXM_MASK ); \
   } 

#define DISABLE_RXM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~RXM_MASK ); \
   } 

#define READ_RXM(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & RXM_MASK) >> RXM_START_BIT )

#define WHEN_RXM_HIGH(base) \
     if ( READ_RXM(base) )


#define UNLESS_RXM_HIGH(base) \
     if (! READ_RXM(base) )


#define WAIT_RXM_LOW(base) \
    while ( READ_RXM(base) );


#define WAIT_RXM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RXM(base) && (--timeout > 0) );


#define WAIT_RXM_HIGH(base) \
    while (! READ_RXM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SAMP 
    // 
#define SAMP_MASK 0x400U
#define SAMP_OFFSET 10
#define SAMP_START_BIT 10
#define SAMP_WIDTH 1



typedef enum samp {
    SAMP_0,
    SAMP_1
} SAMP_T ;
#define WRITE_SAMP(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~SAMP_MASK) | ((val << SAMP_START_BIT) & SAMP_MASK )); \
   } 

#define ENABLE_SAMP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  SAMP_MASK ); \
   } 

#define DISABLE_SAMP(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~SAMP_MASK ); \
   } 

#define READ_SAMP(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & SAMP_MASK) >> SAMP_START_BIT )

#define WHEN_SAMP_HIGH(base) \
     if ( READ_SAMP(base) )


#define UNLESS_SAMP_HIGH(base) \
     if (! READ_SAMP(base) )


#define WAIT_SAMP_LOW(base) \
    while ( READ_SAMP(base) );


#define WAIT_SAMP_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SAMP(base) && (--timeout > 0) );


#define WAIT_SAMP_HIGH(base) \
    while (! READ_SAMP(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Msr
//
// Return the value of register MSR
//
// Notes : Register master status register (MSR) at the offset 0x4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RX 
    // 
#define RX_MASK 0x800U
#define RX_OFFSET 11
#define RX_START_BIT 11
#define RX_WIDTH 1



typedef enum rx {
    RX_0,
    RX_1
} RX_T ;
#define WRITE_RX(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, (OldValue & ~RX_MASK) | ((val << RX_START_BIT) & RX_MASK )); \
   } 

#define ENABLE_RX(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x4); \
     WRITE_REGISTER_ULONG( base + 0x4, val |  RX_MASK ); \
   } 

#define DISABLE_RX(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x4 ); \
     WRITE_REGISTER_ULONG( base + 0x4, val & ~RX_MASK ); \
   } 

#define READ_RX(base) \
    ((READ_REGISTER_ULONG(base + 0x4) & RX_MASK) >> RX_START_BIT )

#define WHEN_RX_HIGH(base) \
     if ( READ_RX(base) )


#define UNLESS_RX_HIGH(base) \
     if (! READ_RX(base) )


#define WAIT_RX_LOW(base) \
    while ( READ_RX(base) );


#define WAIT_RX_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RX(base) && (--timeout > 0) );


#define WAIT_RX_HIGH(base) \
    while (! READ_RX(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register Tsr at offset 0x8
//
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RQCP0 
    // 
#define RQCP0_MASK 0x1U
#define RQCP0_OFFSET 0
#define RQCP0_START_BIT 0
#define RQCP0_WIDTH 1


#define TSR_REG 0x8

typedef enum rqcp0 {
    RQCP_0_0,
    RQCP_0_1
} RQCP_0_T ;
#define WRITE_RQCP0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~RQCP0_MASK) | ((val << RQCP0_START_BIT) & RQCP0_MASK )); \
   } 

#define ENABLE_RQCP0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  RQCP0_MASK ); \
   } 

#define DISABLE_RQCP0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~RQCP0_MASK ); \
   } 

#define READ_RQCP0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & RQCP0_MASK) >> RQCP0_START_BIT )

#define WHEN_RQCP0_HIGH(base) \
     if ( READ_RQCP0(base) )


#define UNLESS_RQCP0_HIGH(base) \
     if (! READ_RQCP0(base) )


#define WAIT_RQCP0_LOW(base) \
    while ( READ_RQCP0(base) );


#define WAIT_RQCP0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RQCP0(base) && (--timeout > 0) );


#define WAIT_RQCP0_HIGH(base) \
    while (! READ_RQCP0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXOK0 
    // 
#define TXOK0_MASK 0x2U
#define TXOK0_OFFSET 1
#define TXOK0_START_BIT 1
#define TXOK0_WIDTH 1



typedef enum txok0 {
    TXOK_0_0,
    TXOK_0_1
} TXOK_0_T ;
#define WRITE_TXOK0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TXOK0_MASK) | ((val << TXOK0_START_BIT) & TXOK0_MASK )); \
   } 

#define ENABLE_TXOK0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TXOK0_MASK ); \
   } 

#define DISABLE_TXOK0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TXOK0_MASK ); \
   } 

#define READ_TXOK0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TXOK0_MASK) >> TXOK0_START_BIT )

#define WHEN_TXOK0_HIGH(base) \
     if ( READ_TXOK0(base) )


#define UNLESS_TXOK0_HIGH(base) \
     if (! READ_TXOK0(base) )


#define WAIT_TXOK0_LOW(base) \
    while ( READ_TXOK0(base) );


#define WAIT_TXOK0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXOK0(base) && (--timeout > 0) );


#define WAIT_TXOK0_HIGH(base) \
    while (! READ_TXOK0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ALST0 
    // 
#define ALST0_MASK 0x4U
#define ALST0_OFFSET 2
#define ALST0_START_BIT 2
#define ALST0_WIDTH 1



typedef enum alst0 {
    ALST_0_0,
    ALST_0_1
} ALST_0_T ;
#define WRITE_ALST0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ALST0_MASK) | ((val << ALST0_START_BIT) & ALST0_MASK )); \
   } 

#define ENABLE_ALST0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ALST0_MASK ); \
   } 

#define DISABLE_ALST0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ALST0_MASK ); \
   } 

#define READ_ALST0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ALST0_MASK) >> ALST0_START_BIT )

#define WHEN_ALST0_HIGH(base) \
     if ( READ_ALST0(base) )


#define UNLESS_ALST0_HIGH(base) \
     if (! READ_ALST0(base) )


#define WAIT_ALST0_LOW(base) \
    while ( READ_ALST0(base) );


#define WAIT_ALST0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ALST0(base) && (--timeout > 0) );


#define WAIT_ALST0_HIGH(base) \
    while (! READ_ALST0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TERR0 
    // 
#define TERR0_MASK 0x8U
#define TERR0_OFFSET 3
#define TERR0_START_BIT 3
#define TERR0_WIDTH 1



typedef enum terr0 {
    TERR_0_0,
    TERR_0_1
} TERR_0_T ;
#define WRITE_TERR0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TERR0_MASK) | ((val << TERR0_START_BIT) & TERR0_MASK )); \
   } 

#define ENABLE_TERR0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TERR0_MASK ); \
   } 

#define DISABLE_TERR0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TERR0_MASK ); \
   } 

#define READ_TERR0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TERR0_MASK) >> TERR0_START_BIT )

#define WHEN_TERR0_HIGH(base) \
     if ( READ_TERR0(base) )


#define UNLESS_TERR0_HIGH(base) \
     if (! READ_TERR0(base) )


#define WAIT_TERR0_LOW(base) \
    while ( READ_TERR0(base) );


#define WAIT_TERR0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TERR0(base) && (--timeout > 0) );


#define WAIT_TERR0_HIGH(base) \
    while (! READ_TERR0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ABRQ0 
    // 
#define ABRQ0_MASK 0x80U
#define ABRQ0_OFFSET 7
#define ABRQ0_START_BIT 7
#define ABRQ0_WIDTH 1



typedef enum abrq0 {
    ABRQ_0_0,
    ABRQ_0_1
} ABRQ_0_T ;
#define WRITE_ABRQ0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ABRQ0_MASK) | ((val << ABRQ0_START_BIT) & ABRQ0_MASK )); \
   } 

#define ENABLE_ABRQ0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ABRQ0_MASK ); \
   } 

#define DISABLE_ABRQ0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ABRQ0_MASK ); \
   } 

#define READ_ABRQ0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ABRQ0_MASK) >> ABRQ0_START_BIT )

#define WHEN_ABRQ0_HIGH(base) \
     if ( READ_ABRQ0(base) )


#define UNLESS_ABRQ0_HIGH(base) \
     if (! READ_ABRQ0(base) )


#define WAIT_ABRQ0_LOW(base) \
    while ( READ_ABRQ0(base) );


#define WAIT_ABRQ0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ABRQ0(base) && (--timeout > 0) );


#define WAIT_ABRQ0_HIGH(base) \
    while (! READ_ABRQ0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RQCP1 
    // 
#define RQCP1_MASK 0x100U
#define RQCP1_OFFSET 8
#define RQCP1_START_BIT 8
#define RQCP1_WIDTH 1



typedef enum rqcp1 {
    RQCP_1_0,
    RQCP_1_1
} RQCP_1_T ;
#define WRITE_RQCP1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~RQCP1_MASK) | ((val << RQCP1_START_BIT) & RQCP1_MASK )); \
   } 

#define ENABLE_RQCP1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  RQCP1_MASK ); \
   } 

#define DISABLE_RQCP1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~RQCP1_MASK ); \
   } 

#define READ_RQCP1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & RQCP1_MASK) >> RQCP1_START_BIT )

#define WHEN_RQCP1_HIGH(base) \
     if ( READ_RQCP1(base) )


#define UNLESS_RQCP1_HIGH(base) \
     if (! READ_RQCP1(base) )


#define WAIT_RQCP1_LOW(base) \
    while ( READ_RQCP1(base) );


#define WAIT_RQCP1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RQCP1(base) && (--timeout > 0) );


#define WAIT_RQCP1_HIGH(base) \
    while (! READ_RQCP1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXOK1 
    // 
#define TXOK1_MASK 0x200U
#define TXOK1_OFFSET 9
#define TXOK1_START_BIT 9
#define TXOK1_WIDTH 1



typedef enum txok1 {
    TXOK_1_0,
    TXOK_1_1
} TXOK_1_T ;
#define WRITE_TXOK1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TXOK1_MASK) | ((val << TXOK1_START_BIT) & TXOK1_MASK )); \
   } 

#define ENABLE_TXOK1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TXOK1_MASK ); \
   } 

#define DISABLE_TXOK1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TXOK1_MASK ); \
   } 

#define READ_TXOK1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TXOK1_MASK) >> TXOK1_START_BIT )

#define WHEN_TXOK1_HIGH(base) \
     if ( READ_TXOK1(base) )


#define UNLESS_TXOK1_HIGH(base) \
     if (! READ_TXOK1(base) )


#define WAIT_TXOK1_LOW(base) \
    while ( READ_TXOK1(base) );


#define WAIT_TXOK1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXOK1(base) && (--timeout > 0) );


#define WAIT_TXOK1_HIGH(base) \
    while (! READ_TXOK1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ALST1 
    // 
#define ALST1_MASK 0x400U
#define ALST1_OFFSET 10
#define ALST1_START_BIT 10
#define ALST1_WIDTH 1



typedef enum alst1 {
    ALST_1_0,
    ALST_1_1
} ALST_1_T ;
#define WRITE_ALST1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ALST1_MASK) | ((val << ALST1_START_BIT) & ALST1_MASK )); \
   } 

#define ENABLE_ALST1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ALST1_MASK ); \
   } 

#define DISABLE_ALST1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ALST1_MASK ); \
   } 

#define READ_ALST1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ALST1_MASK) >> ALST1_START_BIT )

#define WHEN_ALST1_HIGH(base) \
     if ( READ_ALST1(base) )


#define UNLESS_ALST1_HIGH(base) \
     if (! READ_ALST1(base) )


#define WAIT_ALST1_LOW(base) \
    while ( READ_ALST1(base) );


#define WAIT_ALST1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ALST1(base) && (--timeout > 0) );


#define WAIT_ALST1_HIGH(base) \
    while (! READ_ALST1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TERR1 
    // 
#define TERR1_MASK 0x800U
#define TERR1_OFFSET 11
#define TERR1_START_BIT 11
#define TERR1_WIDTH 1



typedef enum terr1 {
    TERR_1_0,
    TERR_1_1
} TERR_1_T ;
#define WRITE_TERR1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TERR1_MASK) | ((val << TERR1_START_BIT) & TERR1_MASK )); \
   } 

#define ENABLE_TERR1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TERR1_MASK ); \
   } 

#define DISABLE_TERR1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TERR1_MASK ); \
   } 

#define READ_TERR1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TERR1_MASK) >> TERR1_START_BIT )

#define WHEN_TERR1_HIGH(base) \
     if ( READ_TERR1(base) )


#define UNLESS_TERR1_HIGH(base) \
     if (! READ_TERR1(base) )


#define WAIT_TERR1_LOW(base) \
    while ( READ_TERR1(base) );


#define WAIT_TERR1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TERR1(base) && (--timeout > 0) );


#define WAIT_TERR1_HIGH(base) \
    while (! READ_TERR1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ABRQ1 
    // 
#define ABRQ1_MASK 0x8000U
#define ABRQ1_OFFSET 15
#define ABRQ1_START_BIT 15
#define ABRQ1_WIDTH 1



typedef enum abrq1 {
    ABRQ_1_0,
    ABRQ_1_1
} ABRQ_1_T ;
#define WRITE_ABRQ1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ABRQ1_MASK) | ((val << ABRQ1_START_BIT) & ABRQ1_MASK )); \
   } 

#define ENABLE_ABRQ1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ABRQ1_MASK ); \
   } 

#define DISABLE_ABRQ1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ABRQ1_MASK ); \
   } 

#define READ_ABRQ1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ABRQ1_MASK) >> ABRQ1_START_BIT )

#define WHEN_ABRQ1_HIGH(base) \
     if ( READ_ABRQ1(base) )


#define UNLESS_ABRQ1_HIGH(base) \
     if (! READ_ABRQ1(base) )


#define WAIT_ABRQ1_LOW(base) \
    while ( READ_ABRQ1(base) );


#define WAIT_ABRQ1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ABRQ1(base) && (--timeout > 0) );


#define WAIT_ABRQ1_HIGH(base) \
    while (! READ_ABRQ1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RQCP2 
    // 
#define RQCP2_MASK 0x10000U
#define RQCP2_OFFSET 16
#define RQCP2_START_BIT 16
#define RQCP2_WIDTH 1



typedef enum rqcp2 {
    RQCP_2_0,
    RQCP_2_1
} RQCP_2_T ;
#define WRITE_RQCP2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~RQCP2_MASK) | ((val << RQCP2_START_BIT) & RQCP2_MASK )); \
   } 

#define ENABLE_RQCP2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  RQCP2_MASK ); \
   } 

#define DISABLE_RQCP2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~RQCP2_MASK ); \
   } 

#define READ_RQCP2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & RQCP2_MASK) >> RQCP2_START_BIT )

#define WHEN_RQCP2_HIGH(base) \
     if ( READ_RQCP2(base) )


#define UNLESS_RQCP2_HIGH(base) \
     if (! READ_RQCP2(base) )


#define WAIT_RQCP2_LOW(base) \
    while ( READ_RQCP2(base) );


#define WAIT_RQCP2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RQCP2(base) && (--timeout > 0) );


#define WAIT_RQCP2_HIGH(base) \
    while (! READ_RQCP2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXOK2 
    // 
#define TXOK2_MASK 0x20000U
#define TXOK2_OFFSET 17
#define TXOK2_START_BIT 17
#define TXOK2_WIDTH 1



typedef enum txok2 {
    TXOK_2_0,
    TXOK_2_1
} TXOK_2_T ;
#define WRITE_TXOK2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TXOK2_MASK) | ((val << TXOK2_START_BIT) & TXOK2_MASK )); \
   } 

#define ENABLE_TXOK2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TXOK2_MASK ); \
   } 

#define DISABLE_TXOK2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TXOK2_MASK ); \
   } 

#define READ_TXOK2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TXOK2_MASK) >> TXOK2_START_BIT )

#define WHEN_TXOK2_HIGH(base) \
     if ( READ_TXOK2(base) )


#define UNLESS_TXOK2_HIGH(base) \
     if (! READ_TXOK2(base) )


#define WAIT_TXOK2_LOW(base) \
    while ( READ_TXOK2(base) );


#define WAIT_TXOK2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXOK2(base) && (--timeout > 0) );


#define WAIT_TXOK2_HIGH(base) \
    while (! READ_TXOK2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ALST2 
    // 
#define ALST2_MASK 0x40000U
#define ALST2_OFFSET 18
#define ALST2_START_BIT 18
#define ALST2_WIDTH 1



typedef enum alst2 {
    ALST_2_0,
    ALST_2_1
} ALST_2_T ;
#define WRITE_ALST2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ALST2_MASK) | ((val << ALST2_START_BIT) & ALST2_MASK )); \
   } 

#define ENABLE_ALST2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ALST2_MASK ); \
   } 

#define DISABLE_ALST2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ALST2_MASK ); \
   } 

#define READ_ALST2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ALST2_MASK) >> ALST2_START_BIT )

#define WHEN_ALST2_HIGH(base) \
     if ( READ_ALST2(base) )


#define UNLESS_ALST2_HIGH(base) \
     if (! READ_ALST2(base) )


#define WAIT_ALST2_LOW(base) \
    while ( READ_ALST2(base) );


#define WAIT_ALST2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ALST2(base) && (--timeout > 0) );


#define WAIT_ALST2_HIGH(base) \
    while (! READ_ALST2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TERR2 
    // 
#define TERR2_MASK 0x80000U
#define TERR2_OFFSET 19
#define TERR2_START_BIT 19
#define TERR2_WIDTH 1



typedef enum terr2 {
    TERR_2_0,
    TERR_2_1
} TERR_2_T ;
#define WRITE_TERR2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TERR2_MASK) | ((val << TERR2_START_BIT) & TERR2_MASK )); \
   } 

#define ENABLE_TERR2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TERR2_MASK ); \
   } 

#define DISABLE_TERR2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TERR2_MASK ); \
   } 

#define READ_TERR2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TERR2_MASK) >> TERR2_START_BIT )

#define WHEN_TERR2_HIGH(base) \
     if ( READ_TERR2(base) )


#define UNLESS_TERR2_HIGH(base) \
     if (! READ_TERR2(base) )


#define WAIT_TERR2_LOW(base) \
    while ( READ_TERR2(base) );


#define WAIT_TERR2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TERR2(base) && (--timeout > 0) );


#define WAIT_TERR2_HIGH(base) \
    while (! READ_TERR2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // ABRQ2 
    // 
#define ABRQ2_MASK 0x800000U
#define ABRQ2_OFFSET 23
#define ABRQ2_START_BIT 23
#define ABRQ2_WIDTH 1



typedef enum abrq2 {
    ABRQ_2_0,
    ABRQ_2_1
} ABRQ_2_T ;
#define WRITE_ABRQ2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~ABRQ2_MASK) | ((val << ABRQ2_START_BIT) & ABRQ2_MASK )); \
   } 

#define ENABLE_ABRQ2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  ABRQ2_MASK ); \
   } 

#define DISABLE_ABRQ2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~ABRQ2_MASK ); \
   } 

#define READ_ABRQ2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & ABRQ2_MASK) >> ABRQ2_START_BIT )

#define WHEN_ABRQ2_HIGH(base) \
     if ( READ_ABRQ2(base) )


#define UNLESS_ABRQ2_HIGH(base) \
     if (! READ_ABRQ2(base) )


#define WAIT_ABRQ2_LOW(base) \
    while ( READ_ABRQ2(base) );


#define WAIT_ABRQ2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ABRQ2(base) && (--timeout > 0) );


#define WAIT_ABRQ2_HIGH(base) \
    while (! READ_ABRQ2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 24:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // CODE 
    // 
#define CODE_MASK 0x3000000U
#define CODE_OFFSET 25
#define CODE_START_BIT 24
#define CODE_WIDTH 2



typedef enum code {
    CODE_0,
    CODE_1
} CODE_T ;
#define READ_CODE(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & CODE_MASK) >> CODE_START_BIT )

#define WRITE_CODE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~CODE_MASK) | ((val << CODE_START_BIT) & CODE_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 0 
    // 
#define TME0_MASK 0x4000000U
#define TME0_OFFSET 26
#define TME0_START_BIT 26
#define TME0_WIDTH 1



typedef enum tme0 {
    TME_0_0,
    TME_0_1
} TME_0_T ;
#define WRITE_TME0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TME0_MASK) | ((val << TME0_START_BIT) & TME0_MASK )); \
   } 

#define ENABLE_TME0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TME0_MASK ); \
   } 

#define DISABLE_TME0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TME0_MASK ); \
   } 

#define READ_TME0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TME0_MASK) >> TME0_START_BIT )

#define WHEN_TME0_HIGH(base) \
     if ( READ_TME0(base) )


#define UNLESS_TME0_HIGH(base) \
     if (! READ_TME0(base) )


#define WAIT_TME0_LOW(base) \
    while ( READ_TME0(base) );


#define WAIT_TME0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TME0(base) && (--timeout > 0) );


#define WAIT_TME0_HIGH(base) \
    while (! READ_TME0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 1 
    // 
#define TME1_MASK 0x8000000U
#define TME1_OFFSET 27
#define TME1_START_BIT 27
#define TME1_WIDTH 1



typedef enum tme1 {
    TME_1_0,
    TME_1_1
} TME_1_T ;
#define WRITE_TME1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TME1_MASK) | ((val << TME1_START_BIT) & TME1_MASK )); \
   } 

#define ENABLE_TME1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TME1_MASK ); \
   } 

#define DISABLE_TME1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TME1_MASK ); \
   } 

#define READ_TME1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TME1_MASK) >> TME1_START_BIT )

#define WHEN_TME1_HIGH(base) \
     if ( READ_TME1(base) )


#define UNLESS_TME1_HIGH(base) \
     if (! READ_TME1(base) )


#define WAIT_TME1_LOW(base) \
    while ( READ_TME1(base) );


#define WAIT_TME1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TME1(base) && (--timeout > 0) );


#define WAIT_TME1_HIGH(base) \
    while (! READ_TME1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 2 
    // 
#define TME2_MASK 0x10000000U
#define TME2_OFFSET 28
#define TME2_START_BIT 28
#define TME2_WIDTH 1



typedef enum tme2 {
    TME_2_0,
    TME_2_1
} TME_2_T ;
#define WRITE_TME2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~TME2_MASK) | ((val << TME2_START_BIT) & TME2_MASK )); \
   } 

#define ENABLE_TME2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  TME2_MASK ); \
   } 

#define DISABLE_TME2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~TME2_MASK ); \
   } 

#define READ_TME2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & TME2_MASK) >> TME2_START_BIT )

#define WHEN_TME2_HIGH(base) \
     if ( READ_TME2(base) )


#define UNLESS_TME2_HIGH(base) \
     if (! READ_TME2(base) )


#define WAIT_TME2_LOW(base) \
    while ( READ_TME2(base) );


#define WAIT_TME2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TME2(base) && (--timeout > 0) );


#define WAIT_TME2_HIGH(base) \
    while (! READ_TME2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 0 
    // 
#define LOW0_MASK 0x20000000U
#define LOW0_OFFSET 29
#define LOW0_START_BIT 29
#define LOW0_WIDTH 1



typedef enum low0 {
    LOW_0_0,
    LOW_0_1
} LOW_0_T ;
#define WRITE_LOW0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~LOW0_MASK) | ((val << LOW0_START_BIT) & LOW0_MASK )); \
   } 

#define ENABLE_LOW0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  LOW0_MASK ); \
   } 

#define DISABLE_LOW0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~LOW0_MASK ); \
   } 

#define READ_LOW0(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & LOW0_MASK) >> LOW0_START_BIT )

#define WHEN_LOW0_HIGH(base) \
     if ( READ_LOW0(base) )


#define UNLESS_LOW0_HIGH(base) \
     if (! READ_LOW0(base) )


#define WAIT_LOW0_LOW(base) \
    while ( READ_LOW0(base) );


#define WAIT_LOW0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_LOW0(base) && (--timeout > 0) );


#define WAIT_LOW0_HIGH(base) \
    while (! READ_LOW0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 1 
    // 
#define LOW1_MASK 0x40000000U
#define LOW1_OFFSET 30
#define LOW1_START_BIT 30
#define LOW1_WIDTH 1



typedef enum low1 {
    LOW_1_0,
    LOW_1_1
} LOW_1_T ;
#define WRITE_LOW1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~LOW1_MASK) | ((val << LOW1_START_BIT) & LOW1_MASK )); \
   } 

#define ENABLE_LOW1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  LOW1_MASK ); \
   } 

#define DISABLE_LOW1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~LOW1_MASK ); \
   } 

#define READ_LOW1(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & LOW1_MASK) >> LOW1_START_BIT )

#define WHEN_LOW1_HIGH(base) \
     if ( READ_LOW1(base) )


#define UNLESS_LOW1_HIGH(base) \
     if (! READ_LOW1(base) )


#define WAIT_LOW1_LOW(base) \
    while ( READ_LOW1(base) );


#define WAIT_LOW1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_LOW1(base) && (--timeout > 0) );


#define WAIT_LOW1_HIGH(base) \
    while (! READ_LOW1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tsr
//
// Return the value of register TSR
//
// Notes : Register transmit status register (TSR) at the offset 0x8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Lowest priority flag for mailbox 2 
    // 
#define LOW2_MASK 0x80000000U
#define LOW2_OFFSET 31
#define LOW2_START_BIT 31
#define LOW2_WIDTH 1



typedef enum low2 {
    LOW_2_0,
    LOW_2_1
} LOW_2_T ;
#define WRITE_LOW2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, (OldValue & ~LOW2_MASK) | ((val << LOW2_START_BIT) & LOW2_MASK )); \
   } 

#define ENABLE_LOW2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x8); \
     WRITE_REGISTER_ULONG( base + 0x8, val |  LOW2_MASK ); \
   } 

#define DISABLE_LOW2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x8 ); \
     WRITE_REGISTER_ULONG( base + 0x8, val & ~LOW2_MASK ); \
   } 

#define READ_LOW2(base) \
    ((READ_REGISTER_ULONG(base + 0x8) & LOW2_MASK) >> LOW2_START_BIT )

#define WHEN_LOW2_HIGH(base) \
     if ( READ_LOW2(base) )


#define UNLESS_LOW2_HIGH(base) \
     if (! READ_LOW2(base) )


#define WAIT_LOW2_LOW(base) \
    while ( READ_LOW2(base) );


#define WAIT_LOW2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_LOW2(base) && (--timeout > 0) );


#define WAIT_LOW2_HIGH(base) \
    while (! READ_LOW2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf0r
//
// Return the value of register RF0R
//
// Notes : Register Rf0r at offset 0xC
//
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//
// Function : Rf0r
//
// Return the value of register RF_0R
//
// Notes : Register receive FIFO 0 register (RF0R) at the offset 0xC, Bits 0:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FMP0 
    // 
#define FMP0_MASK 0x3U
#define FMP0_OFFSET 1
#define FMP0_START_BIT 0
#define FMP0_WIDTH 2


#define RF_0R_REG 0xC

typedef enum fmp0 {
    FMP_0_0,
    FMP_0_1
} FMP_0_T ;
#define READ_FMP0(base) \
    ((READ_REGISTER_ULONG(base + 0xC) & FMP0_MASK) >> FMP0_START_BIT )

#define WRITE_FMP0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, (OldValue & ~FMP0_MASK) | ((val << FMP0_START_BIT) & FMP0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rf0r
//
// Return the value of register RF_0R
//
// Notes : Register receive FIFO 0 register (RF0R) at the offset 0xC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FULL0 
    // 
#define FULL0_MASK 0x8U
#define FULL0_OFFSET 3
#define FULL0_START_BIT 3
#define FULL0_WIDTH 1



typedef enum full0 {
    FULL_0_0,
    FULL_0_1
} FULL_0_T ;
#define WRITE_FULL0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, (OldValue & ~FULL0_MASK) | ((val << FULL0_START_BIT) & FULL0_MASK )); \
   } 

#define ENABLE_FULL0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, val |  FULL0_MASK ); \
   } 

#define DISABLE_FULL0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0xC ); \
     WRITE_REGISTER_ULONG( base + 0xC, val & ~FULL0_MASK ); \
   } 

#define READ_FULL0(base) \
    ((READ_REGISTER_ULONG(base + 0xC) & FULL0_MASK) >> FULL0_START_BIT )

#define WHEN_FULL0_HIGH(base) \
     if ( READ_FULL0(base) )


#define UNLESS_FULL0_HIGH(base) \
     if (! READ_FULL0(base) )


#define WAIT_FULL0_LOW(base) \
    while ( READ_FULL0(base) );


#define WAIT_FULL0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FULL0(base) && (--timeout > 0) );


#define WAIT_FULL0_HIGH(base) \
    while (! READ_FULL0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf0r
//
// Return the value of register RF_0R
//
// Notes : Register receive FIFO 0 register (RF0R) at the offset 0xC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FOVR0 
    // 
#define FOVR0_MASK 0x10U
#define FOVR0_OFFSET 4
#define FOVR0_START_BIT 4
#define FOVR0_WIDTH 1



typedef enum fovr0 {
    FOVR_0_0,
    FOVR_0_1
} FOVR_0_T ;
#define WRITE_FOVR0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, (OldValue & ~FOVR0_MASK) | ((val << FOVR0_START_BIT) & FOVR0_MASK )); \
   } 

#define ENABLE_FOVR0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, val |  FOVR0_MASK ); \
   } 

#define DISABLE_FOVR0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0xC ); \
     WRITE_REGISTER_ULONG( base + 0xC, val & ~FOVR0_MASK ); \
   } 

#define READ_FOVR0(base) \
    ((READ_REGISTER_ULONG(base + 0xC) & FOVR0_MASK) >> FOVR0_START_BIT )

#define WHEN_FOVR0_HIGH(base) \
     if ( READ_FOVR0(base) )


#define UNLESS_FOVR0_HIGH(base) \
     if (! READ_FOVR0(base) )


#define WAIT_FOVR0_LOW(base) \
    while ( READ_FOVR0(base) );


#define WAIT_FOVR0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FOVR0(base) && (--timeout > 0) );


#define WAIT_FOVR0_HIGH(base) \
    while (! READ_FOVR0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf0r
//
// Return the value of register RF_0R
//
// Notes : Register receive FIFO 0 register (RF0R) at the offset 0xC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RFOM0 
    // 
#define RFOM0_MASK 0x20U
#define RFOM0_OFFSET 5
#define RFOM0_START_BIT 5
#define RFOM0_WIDTH 1



typedef enum rfom0 {
    RFOM_0_0,
    RFOM_0_1
} RFOM_0_T ;
#define WRITE_RFOM0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, (OldValue & ~RFOM0_MASK) | ((val << RFOM0_START_BIT) & RFOM0_MASK )); \
   } 

#define ENABLE_RFOM0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0xC); \
     WRITE_REGISTER_ULONG( base + 0xC, val |  RFOM0_MASK ); \
   } 

#define DISABLE_RFOM0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0xC ); \
     WRITE_REGISTER_ULONG( base + 0xC, val & ~RFOM0_MASK ); \
   } 

#define READ_RFOM0(base) \
    ((READ_REGISTER_ULONG(base + 0xC) & RFOM0_MASK) >> RFOM0_START_BIT )

#define WHEN_RFOM0_HIGH(base) \
     if ( READ_RFOM0(base) )


#define UNLESS_RFOM0_HIGH(base) \
     if (! READ_RFOM0(base) )


#define WAIT_RFOM0_LOW(base) \
    while ( READ_RFOM0(base) );


#define WAIT_RFOM0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RFOM0(base) && (--timeout > 0) );


#define WAIT_RFOM0_HIGH(base) \
    while (! READ_RFOM0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf1r
//
// Return the value of register RF1R
//
// Notes : Register Rf1r at offset 0x10
//
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//
// Function : Rf1r
//
// Return the value of register RF_1R
//
// Notes : Register receive FIFO 1 register (RF1R) at the offset 0x10, Bits 0:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FMP1 
    // 
#define FMP1_MASK 0x3U
#define FMP1_OFFSET 1
#define FMP1_START_BIT 0
#define FMP1_WIDTH 2


#define RF_1R_REG 0x10

typedef enum fmp1 {
    FMP_1_0,
    FMP_1_1
} FMP_1_T ;
#define READ_FMP1(base) \
    ((READ_REGISTER_ULONG(base + 0x10) & FMP1_MASK) >> FMP1_START_BIT )

#define WRITE_FMP1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, (OldValue & ~FMP1_MASK) | ((val << FMP1_START_BIT) & FMP1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rf1r
//
// Return the value of register RF_1R
//
// Notes : Register receive FIFO 1 register (RF1R) at the offset 0x10, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FULL1 
    // 
#define FULL1_MASK 0x8U
#define FULL1_OFFSET 3
#define FULL1_START_BIT 3
#define FULL1_WIDTH 1



typedef enum full1 {
    FULL_1_0,
    FULL_1_1
} FULL_1_T ;
#define WRITE_FULL1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, (OldValue & ~FULL1_MASK) | ((val << FULL1_START_BIT) & FULL1_MASK )); \
   } 

#define ENABLE_FULL1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, val |  FULL1_MASK ); \
   } 

#define DISABLE_FULL1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x10 ); \
     WRITE_REGISTER_ULONG( base + 0x10, val & ~FULL1_MASK ); \
   } 

#define READ_FULL1(base) \
    ((READ_REGISTER_ULONG(base + 0x10) & FULL1_MASK) >> FULL1_START_BIT )

#define WHEN_FULL1_HIGH(base) \
     if ( READ_FULL1(base) )


#define UNLESS_FULL1_HIGH(base) \
     if (! READ_FULL1(base) )


#define WAIT_FULL1_LOW(base) \
    while ( READ_FULL1(base) );


#define WAIT_FULL1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FULL1(base) && (--timeout > 0) );


#define WAIT_FULL1_HIGH(base) \
    while (! READ_FULL1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf1r
//
// Return the value of register RF_1R
//
// Notes : Register receive FIFO 1 register (RF1R) at the offset 0x10, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FOVR1 
    // 
#define FOVR1_MASK 0x10U
#define FOVR1_OFFSET 4
#define FOVR1_START_BIT 4
#define FOVR1_WIDTH 1



typedef enum fovr1 {
    FOVR_1_0,
    FOVR_1_1
} FOVR_1_T ;
#define WRITE_FOVR1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, (OldValue & ~FOVR1_MASK) | ((val << FOVR1_START_BIT) & FOVR1_MASK )); \
   } 

#define ENABLE_FOVR1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, val |  FOVR1_MASK ); \
   } 

#define DISABLE_FOVR1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x10 ); \
     WRITE_REGISTER_ULONG( base + 0x10, val & ~FOVR1_MASK ); \
   } 

#define READ_FOVR1(base) \
    ((READ_REGISTER_ULONG(base + 0x10) & FOVR1_MASK) >> FOVR1_START_BIT )

#define WHEN_FOVR1_HIGH(base) \
     if ( READ_FOVR1(base) )


#define UNLESS_FOVR1_HIGH(base) \
     if (! READ_FOVR1(base) )


#define WAIT_FOVR1_LOW(base) \
    while ( READ_FOVR1(base) );


#define WAIT_FOVR1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FOVR1(base) && (--timeout > 0) );


#define WAIT_FOVR1_HIGH(base) \
    while (! READ_FOVR1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Rf1r
//
// Return the value of register RF_1R
//
// Notes : Register receive FIFO 1 register (RF1R) at the offset 0x10, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RFOM1 
    // 
#define RFOM1_MASK 0x20U
#define RFOM1_OFFSET 5
#define RFOM1_START_BIT 5
#define RFOM1_WIDTH 1



typedef enum rfom1 {
    RFOM_1_0,
    RFOM_1_1
} RFOM_1_T ;
#define WRITE_RFOM1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, (OldValue & ~RFOM1_MASK) | ((val << RFOM1_START_BIT) & RFOM1_MASK )); \
   } 

#define ENABLE_RFOM1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x10); \
     WRITE_REGISTER_ULONG( base + 0x10, val |  RFOM1_MASK ); \
   } 

#define DISABLE_RFOM1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x10 ); \
     WRITE_REGISTER_ULONG( base + 0x10, val & ~RFOM1_MASK ); \
   } 

#define READ_RFOM1(base) \
    ((READ_REGISTER_ULONG(base + 0x10) & RFOM1_MASK) >> RFOM1_START_BIT )

#define WHEN_RFOM1_HIGH(base) \
     if ( READ_RFOM1(base) )


#define UNLESS_RFOM1_HIGH(base) \
     if (! READ_RFOM1(base) )


#define WAIT_RFOM1_LOW(base) \
    while ( READ_RFOM1(base) );


#define WAIT_RFOM1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RFOM1(base) && (--timeout > 0) );


#define WAIT_RFOM1_HIGH(base) \
    while (! READ_RFOM1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ier
//
// Return the value of register IER
//
// Notes : Register Ier at offset 0x14
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_IER( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x14, val)

#define SET_BITS_IER(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  mask ); \
   } 

#define CLEAR_BITS_IER(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14,  val & ~mask ); \
   } 

#define READ_REGISTER_IER( base ) \
     READ_REGISTER_ULONG( base + 0x14) 

/////////////////////////////////////////////////////////////////////////
//
// Function : TMEIE
//
// Return the value of register Ier
//
// Notes : TMEIE 
//        (IER) at the offset 0x14, Bits 0:0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_TMEIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~TMEIE_MASK) | ((val << TMEIE_START_BIT) & TMEIE_MASK )); \
   } 

#define ENABLE_TMEIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  TMEIE_MASK ); \
   } 

#define DISABLE_TMEIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~TMEIE_MASK ); \
   } 

#define READ_TMEIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & TMEIE_MASK) >> TMEIE_START_BIT )

#define WHEN_TMEIE_HIGH(base) \
     if ( READ_TMEIE(base) )


#define UNLESS_TMEIE_HIGH(base) \
     if (! READ_TMEIE(base) )


#define WAIT_TMEIE_LOW(base) \
    while ( READ_TMEIE(base) );


#define WAIT_TMEIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TMEIE(base) && (--timeout > 0) );


#define WAIT_TMEIE_HIGH(base) \
    while (! READ_TMEIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FMPIE0
//
// Return the value of register Ier
//
// Notes : FMPIE0 
//        (IER) at the offset 0x14, Bits 1:1
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FMPIE0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FMPIE0_MASK) | ((val << FMPIE0_START_BIT) & FMPIE0_MASK )); \
   } 

#define ENABLE_FMPIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FMPIE0_MASK ); \
   } 

#define DISABLE_FMPIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FMPIE0_MASK ); \
   } 

#define READ_FMPIE0(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FMPIE0_MASK) >> FMPIE0_START_BIT )

#define WHEN_FMPIE0_HIGH(base) \
     if ( READ_FMPIE0(base) )


#define UNLESS_FMPIE0_HIGH(base) \
     if (! READ_FMPIE0(base) )


#define WAIT_FMPIE0_LOW(base) \
    while ( READ_FMPIE0(base) );


#define WAIT_FMPIE0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FMPIE0(base) && (--timeout > 0) );


#define WAIT_FMPIE0_HIGH(base) \
    while (! READ_FMPIE0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FFIE0
//
// Return the value of register Ier
//
// Notes : FFIE0 
//        (IER) at the offset 0x14, Bits 2:2
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FFIE0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FFIE0_MASK) | ((val << FFIE0_START_BIT) & FFIE0_MASK )); \
   } 

#define ENABLE_FFIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FFIE0_MASK ); \
   } 

#define DISABLE_FFIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FFIE0_MASK ); \
   } 

#define READ_FFIE0(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FFIE0_MASK) >> FFIE0_START_BIT )

#define WHEN_FFIE0_HIGH(base) \
     if ( READ_FFIE0(base) )


#define UNLESS_FFIE0_HIGH(base) \
     if (! READ_FFIE0(base) )


#define WAIT_FFIE0_LOW(base) \
    while ( READ_FFIE0(base) );


#define WAIT_FFIE0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFIE0(base) && (--timeout > 0) );


#define WAIT_FFIE0_HIGH(base) \
    while (! READ_FFIE0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FOVIE0
//
// Return the value of register Ier
//
// Notes : FOVIE0 
//        (IER) at the offset 0x14, Bits 3:3
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FOVIE0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FOVIE0_MASK) | ((val << FOVIE0_START_BIT) & FOVIE0_MASK )); \
   } 

#define ENABLE_FOVIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FOVIE0_MASK ); \
   } 

#define DISABLE_FOVIE0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FOVIE0_MASK ); \
   } 

#define READ_FOVIE0(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FOVIE0_MASK) >> FOVIE0_START_BIT )

#define WHEN_FOVIE0_HIGH(base) \
     if ( READ_FOVIE0(base) )


#define UNLESS_FOVIE0_HIGH(base) \
     if (! READ_FOVIE0(base) )


#define WAIT_FOVIE0_LOW(base) \
    while ( READ_FOVIE0(base) );


#define WAIT_FOVIE0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FOVIE0(base) && (--timeout > 0) );


#define WAIT_FOVIE0_HIGH(base) \
    while (! READ_FOVIE0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FMPIE1
//
// Return the value of register Ier
//
// Notes : FMPIE1 
//        (IER) at the offset 0x14, Bits 4:4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FMPIE1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FMPIE1_MASK) | ((val << FMPIE1_START_BIT) & FMPIE1_MASK )); \
   } 

#define ENABLE_FMPIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FMPIE1_MASK ); \
   } 

#define DISABLE_FMPIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FMPIE1_MASK ); \
   } 

#define READ_FMPIE1(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FMPIE1_MASK) >> FMPIE1_START_BIT )

#define WHEN_FMPIE1_HIGH(base) \
     if ( READ_FMPIE1(base) )


#define UNLESS_FMPIE1_HIGH(base) \
     if (! READ_FMPIE1(base) )


#define WAIT_FMPIE1_LOW(base) \
    while ( READ_FMPIE1(base) );


#define WAIT_FMPIE1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FMPIE1(base) && (--timeout > 0) );


#define WAIT_FMPIE1_HIGH(base) \
    while (! READ_FMPIE1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FFIE1
//
// Return the value of register Ier
//
// Notes : FFIE1 
//        (IER) at the offset 0x14, Bits 5:5
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FFIE1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FFIE1_MASK) | ((val << FFIE1_START_BIT) & FFIE1_MASK )); \
   } 

#define ENABLE_FFIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FFIE1_MASK ); \
   } 

#define DISABLE_FFIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FFIE1_MASK ); \
   } 

#define READ_FFIE1(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FFIE1_MASK) >> FFIE1_START_BIT )

#define WHEN_FFIE1_HIGH(base) \
     if ( READ_FFIE1(base) )


#define UNLESS_FFIE1_HIGH(base) \
     if (! READ_FFIE1(base) )


#define WAIT_FFIE1_LOW(base) \
    while ( READ_FFIE1(base) );


#define WAIT_FFIE1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFIE1(base) && (--timeout > 0) );


#define WAIT_FFIE1_HIGH(base) \
    while (! READ_FFIE1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : FOVIE1
//
// Return the value of register Ier
//
// Notes : FOVIE1 
//        (IER) at the offset 0x14, Bits 6:6
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_FOVIE1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~FOVIE1_MASK) | ((val << FOVIE1_START_BIT) & FOVIE1_MASK )); \
   } 

#define ENABLE_FOVIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  FOVIE1_MASK ); \
   } 

#define DISABLE_FOVIE1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~FOVIE1_MASK ); \
   } 

#define READ_FOVIE1(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & FOVIE1_MASK) >> FOVIE1_START_BIT )

#define WHEN_FOVIE1_HIGH(base) \
     if ( READ_FOVIE1(base) )


#define UNLESS_FOVIE1_HIGH(base) \
     if (! READ_FOVIE1(base) )


#define WAIT_FOVIE1_LOW(base) \
    while ( READ_FOVIE1(base) );


#define WAIT_FOVIE1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FOVIE1(base) && (--timeout > 0) );


#define WAIT_FOVIE1_HIGH(base) \
    while (! READ_FOVIE1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : EWGIE
//
// Return the value of register Ier
//
// Notes : EWGIE 
//        (IER) at the offset 0x14, Bits 8:8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_EWGIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~EWGIE_MASK) | ((val << EWGIE_START_BIT) & EWGIE_MASK )); \
   } 

#define ENABLE_EWGIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  EWGIE_MASK ); \
   } 

#define DISABLE_EWGIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~EWGIE_MASK ); \
   } 

#define READ_EWGIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & EWGIE_MASK) >> EWGIE_START_BIT )

#define WHEN_EWGIE_HIGH(base) \
     if ( READ_EWGIE(base) )


#define UNLESS_EWGIE_HIGH(base) \
     if (! READ_EWGIE(base) )


#define WAIT_EWGIE_LOW(base) \
    while ( READ_EWGIE(base) );


#define WAIT_EWGIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_EWGIE(base) && (--timeout > 0) );


#define WAIT_EWGIE_HIGH(base) \
    while (! READ_EWGIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : EPVIE
//
// Return the value of register Ier
//
// Notes : EPVIE 
//        (IER) at the offset 0x14, Bits 9:9
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_EPVIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~EPVIE_MASK) | ((val << EPVIE_START_BIT) & EPVIE_MASK )); \
   } 

#define ENABLE_EPVIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  EPVIE_MASK ); \
   } 

#define DISABLE_EPVIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~EPVIE_MASK ); \
   } 

#define READ_EPVIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & EPVIE_MASK) >> EPVIE_START_BIT )

#define WHEN_EPVIE_HIGH(base) \
     if ( READ_EPVIE(base) )


#define UNLESS_EPVIE_HIGH(base) \
     if (! READ_EPVIE(base) )


#define WAIT_EPVIE_LOW(base) \
    while ( READ_EPVIE(base) );


#define WAIT_EPVIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_EPVIE(base) && (--timeout > 0) );


#define WAIT_EPVIE_HIGH(base) \
    while (! READ_EPVIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : BOFIE
//
// Return the value of register Ier
//
// Notes : BOFIE 
//        (IER) at the offset 0x14, Bits 10:10
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_BOFIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~BOFIE_MASK) | ((val << BOFIE_START_BIT) & BOFIE_MASK )); \
   } 

#define ENABLE_BOFIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  BOFIE_MASK ); \
   } 

#define DISABLE_BOFIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~BOFIE_MASK ); \
   } 

#define READ_BOFIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & BOFIE_MASK) >> BOFIE_START_BIT )

#define WHEN_BOFIE_HIGH(base) \
     if ( READ_BOFIE(base) )


#define UNLESS_BOFIE_HIGH(base) \
     if (! READ_BOFIE(base) )


#define WAIT_BOFIE_LOW(base) \
    while ( READ_BOFIE(base) );


#define WAIT_BOFIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_BOFIE(base) && (--timeout > 0) );


#define WAIT_BOFIE_HIGH(base) \
    while (! READ_BOFIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : LECIE
//
// Return the value of register Ier
//
// Notes : LECIE 
//        (IER) at the offset 0x14, Bits 11:11
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_LECIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~LECIE_MASK) | ((val << LECIE_START_BIT) & LECIE_MASK )); \
   } 

#define ENABLE_LECIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  LECIE_MASK ); \
   } 

#define DISABLE_LECIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~LECIE_MASK ); \
   } 

#define READ_LECIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & LECIE_MASK) >> LECIE_START_BIT )

#define WHEN_LECIE_HIGH(base) \
     if ( READ_LECIE(base) )


#define UNLESS_LECIE_HIGH(base) \
     if (! READ_LECIE(base) )


#define WAIT_LECIE_LOW(base) \
    while ( READ_LECIE(base) );


#define WAIT_LECIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_LECIE(base) && (--timeout > 0) );


#define WAIT_LECIE_HIGH(base) \
    while (! READ_LECIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : ERRIE
//
// Return the value of register Ier
//
// Notes : ERRIE 
//        (IER) at the offset 0x14, Bits 15:15
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_ERRIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~ERRIE_MASK) | ((val << ERRIE_START_BIT) & ERRIE_MASK )); \
   } 

#define ENABLE_ERRIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  ERRIE_MASK ); \
   } 

#define DISABLE_ERRIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~ERRIE_MASK ); \
   } 

#define READ_ERRIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & ERRIE_MASK) >> ERRIE_START_BIT )

#define WHEN_ERRIE_HIGH(base) \
     if ( READ_ERRIE(base) )


#define UNLESS_ERRIE_HIGH(base) \
     if (! READ_ERRIE(base) )


#define WAIT_ERRIE_LOW(base) \
    while ( READ_ERRIE(base) );


#define WAIT_ERRIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_ERRIE(base) && (--timeout > 0) );


#define WAIT_ERRIE_HIGH(base) \
    while (! READ_ERRIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : WKUIE
//
// Return the value of register Ier
//
// Notes : WKUIE 
//        (IER) at the offset 0x14, Bits 16:16
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_WKUIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~WKUIE_MASK) | ((val << WKUIE_START_BIT) & WKUIE_MASK )); \
   } 

#define ENABLE_WKUIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  WKUIE_MASK ); \
   } 

#define DISABLE_WKUIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~WKUIE_MASK ); \
   } 

#define READ_WKUIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & WKUIE_MASK) >> WKUIE_START_BIT )

#define WHEN_WKUIE_HIGH(base) \
     if ( READ_WKUIE(base) )


#define UNLESS_WKUIE_HIGH(base) \
     if (! READ_WKUIE(base) )


#define WAIT_WKUIE_LOW(base) \
    while ( READ_WKUIE(base) );


#define WAIT_WKUIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_WKUIE(base) && (--timeout > 0) );


#define WAIT_WKUIE_HIGH(base) \
    while (! READ_WKUIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : SLKIE
//
// Return the value of register Ier
//
// Notes : SLKIE 
//        (IER) at the offset 0x14, Bits 17:17
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_SLKIE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, (OldValue & ~SLKIE_MASK) | ((val << SLKIE_START_BIT) & SLKIE_MASK )); \
   } 

#define ENABLE_SLKIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x14); \
     WRITE_REGISTER_ULONG( base + 0x14, val |  SLKIE_MASK ); \
   } 

#define DISABLE_SLKIE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x14 ); \
     WRITE_REGISTER_ULONG( base + 0x14, val & ~SLKIE_MASK ); \
   } 

#define READ_SLKIE(base) \
    ((READ_REGISTER_ULONG(base + 0x14) & SLKIE_MASK) >> SLKIE_START_BIT )

#define WHEN_SLKIE_HIGH(base) \
     if ( READ_SLKIE(base) )


#define UNLESS_SLKIE_HIGH(base) \
     if (! READ_SLKIE(base) )


#define WAIT_SLKIE_LOW(base) \
    while ( READ_SLKIE(base) );


#define WAIT_SLKIE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SLKIE(base) && (--timeout > 0) );


#define WAIT_SLKIE_HIGH(base) \
    while (! READ_SLKIE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register Esr at offset 0x18
//
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EWGF 
    // 
#define EWGF_MASK 0x1U
#define EWGF_OFFSET 0
#define EWGF_START_BIT 0
#define EWGF_WIDTH 1


#define ESR_REG 0x18

typedef enum ewgf {
    EWGF_0,
    EWGF_1
} EWGF_T ;
#define WRITE_EWGF(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~EWGF_MASK) | ((val << EWGF_START_BIT) & EWGF_MASK )); \
   } 

#define ENABLE_EWGF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, val |  EWGF_MASK ); \
   } 

#define DISABLE_EWGF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x18 ); \
     WRITE_REGISTER_ULONG( base + 0x18, val & ~EWGF_MASK ); \
   } 

#define READ_EWGF(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & EWGF_MASK) >> EWGF_START_BIT )

#define WHEN_EWGF_HIGH(base) \
     if ( READ_EWGF(base) )


#define UNLESS_EWGF_HIGH(base) \
     if (! READ_EWGF(base) )


#define WAIT_EWGF_LOW(base) \
    while ( READ_EWGF(base) );


#define WAIT_EWGF_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_EWGF(base) && (--timeout > 0) );


#define WAIT_EWGF_HIGH(base) \
    while (! READ_EWGF(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EPVF 
    // 
#define EPVF_MASK 0x2U
#define EPVF_OFFSET 1
#define EPVF_START_BIT 1
#define EPVF_WIDTH 1



typedef enum epvf {
    EPVF_0,
    EPVF_1
} EPVF_T ;
#define WRITE_EPVF(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~EPVF_MASK) | ((val << EPVF_START_BIT) & EPVF_MASK )); \
   } 

#define ENABLE_EPVF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, val |  EPVF_MASK ); \
   } 

#define DISABLE_EPVF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x18 ); \
     WRITE_REGISTER_ULONG( base + 0x18, val & ~EPVF_MASK ); \
   } 

#define READ_EPVF(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & EPVF_MASK) >> EPVF_START_BIT )

#define WHEN_EPVF_HIGH(base) \
     if ( READ_EPVF(base) )


#define UNLESS_EPVF_HIGH(base) \
     if (! READ_EPVF(base) )


#define WAIT_EPVF_LOW(base) \
    while ( READ_EPVF(base) );


#define WAIT_EPVF_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_EPVF(base) && (--timeout > 0) );


#define WAIT_EPVF_HIGH(base) \
    while (! READ_EPVF(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // BOFF 
    // 
#define BOFF_MASK 0x4U
#define BOFF_OFFSET 2
#define BOFF_START_BIT 2
#define BOFF_WIDTH 1



typedef enum boff {
    BOFF_0,
    BOFF_1
} BOFF_T ;
#define WRITE_BOFF(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~BOFF_MASK) | ((val << BOFF_START_BIT) & BOFF_MASK )); \
   } 

#define ENABLE_BOFF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, val |  BOFF_MASK ); \
   } 

#define DISABLE_BOFF(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x18 ); \
     WRITE_REGISTER_ULONG( base + 0x18, val & ~BOFF_MASK ); \
   } 

#define READ_BOFF(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & BOFF_MASK) >> BOFF_START_BIT )

#define WHEN_BOFF_HIGH(base) \
     if ( READ_BOFF(base) )


#define UNLESS_BOFF_HIGH(base) \
     if (! READ_BOFF(base) )


#define WAIT_BOFF_LOW(base) \
    while ( READ_BOFF(base) );


#define WAIT_BOFF_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_BOFF(base) && (--timeout > 0) );


#define WAIT_BOFF_HIGH(base) \
    while (! READ_BOFF(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 4:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // LEC 
    // 
#define LEC_MASK 0x70U
#define LEC_OFFSET 6
#define LEC_START_BIT 4
#define LEC_WIDTH 3



#define READ_LEC(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & LEC_MASK) >> LEC_START_BIT )

#define WRITE_LEC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~LEC_MASK) | ((val << LEC_START_BIT) & LEC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TEC 
    // 
#define TEC_MASK 0xFF0000U
#define TEC_OFFSET 23
#define TEC_START_BIT 16
#define TEC_WIDTH 8



typedef enum tec {
    TEC_0,
    TEC_1
} TEC_T ;
#define READ_TEC(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & TEC_MASK) >> TEC_START_BIT )

#define WRITE_TEC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~TEC_MASK) | ((val << TEC_START_BIT) & TEC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Esr
//
// Return the value of register ESR
//
// Notes : Register interrupt enable register (ESR) at the offset 0x18, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // REC 
    // 
#define REC_MASK 0xFF000000U
#define REC_OFFSET 31
#define REC_START_BIT 24
#define REC_WIDTH 8



typedef enum rec {
    REC_0,
    REC_1
} REC_T ;
#define READ_REC(base) \
    ((READ_REGISTER_ULONG(base + 0x18) & REC_MASK) >> REC_START_BIT )

#define WRITE_REC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18); \
     WRITE_REGISTER_ULONG( base + 0x18, (OldValue & ~REC_MASK) | ((val << REC_START_BIT) & REC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register Btr at offset 0x1C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_BTR( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x1C, val)

#define SET_BITS_BTR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, val |  mask ); \
   } 

#define CLEAR_BITS_BTR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C,  val & ~mask ); \
   } 

#define READ_REGISTER_BTR( base ) \
     READ_REGISTER_ULONG( base + 0x1C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 0:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // BRP 
    // 
#define BRP_MASK 0x3FFU
#define BRP_OFFSET 9
#define BRP_START_BIT 0
#define BRP_WIDTH 10


#define BTR_REG 0x1C

typedef enum brp {
    BRP_0,
    BRP_1
} BRP_T ;
#define READ_BRP(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & BRP_MASK) >> BRP_START_BIT )

#define WRITE_BRP(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~BRP_MASK) | ((val << BRP_START_BIT) & BRP_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 16:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TS1 
    // 
#define TS1_MASK 0xF0000U
#define TS1_OFFSET 19
#define TS1_START_BIT 16
#define TS1_WIDTH 4



typedef enum ts1 {
    TS_1_0,
    TS_1_1
} TS_1_T ;
#define READ_TS1(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & TS1_MASK) >> TS1_START_BIT )

#define WRITE_TS1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~TS1_MASK) | ((val << TS1_START_BIT) & TS1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 20:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TS2 
    // 
#define TS2_MASK 0x700000U
#define TS2_OFFSET 22
#define TS2_START_BIT 20
#define TS2_WIDTH 3



typedef enum ts2 {
    TS_2_0,
    TS_2_1
} TS_2_T ;
#define READ_TS2(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & TS2_MASK) >> TS2_START_BIT )

#define WRITE_TS2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~TS2_MASK) | ((val << TS2_START_BIT) & TS2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 24:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SJW 
    // 
#define SJW_MASK 0x3000000U
#define SJW_OFFSET 25
#define SJW_START_BIT 24
#define SJW_WIDTH 2



typedef enum sjw {
    SJW_0,
    SJW_1
} SJW_T ;
#define READ_SJW(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & SJW_MASK) >> SJW_START_BIT )

#define WRITE_SJW(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~SJW_MASK) | ((val << SJW_START_BIT) & SJW_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // LBKM 
    // 
#define LBKM_MASK 0x40000000U
#define LBKM_OFFSET 30
#define LBKM_START_BIT 30
#define LBKM_WIDTH 1



typedef enum lbkm {
    LBKM_0,
    LBKM_1
} LBKM_T ;
#define WRITE_LBKM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~LBKM_MASK) | ((val << LBKM_START_BIT) & LBKM_MASK )); \
   } 

#define ENABLE_LBKM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, val |  LBKM_MASK ); \
   } 

#define DISABLE_LBKM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1C ); \
     WRITE_REGISTER_ULONG( base + 0x1C, val & ~LBKM_MASK ); \
   } 

#define READ_LBKM(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & LBKM_MASK) >> LBKM_START_BIT )

#define WHEN_LBKM_HIGH(base) \
     if ( READ_LBKM(base) )


#define UNLESS_LBKM_HIGH(base) \
     if (! READ_LBKM(base) )


#define WAIT_LBKM_LOW(base) \
    while ( READ_LBKM(base) );


#define WAIT_LBKM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_LBKM(base) && (--timeout > 0) );


#define WAIT_LBKM_HIGH(base) \
    while (! READ_LBKM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Btr
//
// Return the value of register BTR
//
// Notes : Register bit timing register (BTR) at the offset 0x1C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // SILM 
    // 
#define SILM_MASK 0x80000000U
#define SILM_OFFSET 31
#define SILM_START_BIT 31
#define SILM_WIDTH 1



typedef enum silm {
    SILM_0,
    SILM_1
} SILM_T ;
#define WRITE_SILM(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, (OldValue & ~SILM_MASK) | ((val << SILM_START_BIT) & SILM_MASK )); \
   } 

#define ENABLE_SILM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C); \
     WRITE_REGISTER_ULONG( base + 0x1C, val |  SILM_MASK ); \
   } 

#define DISABLE_SILM(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1C ); \
     WRITE_REGISTER_ULONG( base + 0x1C, val & ~SILM_MASK ); \
   } 

#define READ_SILM(base) \
    ((READ_REGISTER_ULONG(base + 0x1C) & SILM_MASK) >> SILM_START_BIT )

#define WHEN_SILM_HIGH(base) \
     if ( READ_SILM(base) )


#define UNLESS_SILM_HIGH(base) \
     if (! READ_SILM(base) )


#define WAIT_SILM_LOW(base) \
    while ( READ_SILM(base) );


#define WAIT_SILM_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_SILM(base) && (--timeout > 0) );


#define WAIT_SILM_HIGH(base) \
    while (! READ_SILM(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI0R
//
// Notes : Register Ti0r at offset 0x180
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TI_0R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x180, val)

#define SET_BITS_TI_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, val |  mask ); \
   } 

#define CLEAR_BITS_TI_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180,  val & ~mask ); \
   } 

#define READ_REGISTER_TI_0R( base ) \
     READ_REGISTER_ULONG( base + 0x180) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI_0R
//
// Notes : Register TX mailbox identifier register (TI0R) at the offset 0x180, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXRQ 
    // 
#define TXRQ_MASK 0x1U
#define TXRQ_OFFSET 0
#define TXRQ_START_BIT 0
#define TXRQ_WIDTH 1


#define TI_0R_REG 0x180

typedef enum txrq {
    TXRQ_0,
    TXRQ_1
} TXRQ_T ;
#define WRITE_TXRQ(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, (OldValue & ~TXRQ_MASK) | ((val << TXRQ_START_BIT) & TXRQ_MASK )); \
   } 

#define ENABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, val |  TXRQ_MASK ); \
   } 

#define DISABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x180 ); \
     WRITE_REGISTER_ULONG( base + 0x180, val & ~TXRQ_MASK ); \
   } 

#define READ_TXRQ(base) \
    ((READ_REGISTER_ULONG(base + 0x180) & TXRQ_MASK) >> TXRQ_START_BIT )

#define WHEN_TXRQ_HIGH(base) \
     if ( READ_TXRQ(base) )


#define UNLESS_TXRQ_HIGH(base) \
     if (! READ_TXRQ(base) )


#define WAIT_TXRQ_LOW(base) \
    while ( READ_TXRQ(base) );


#define WAIT_TXRQ_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXRQ(base) && (--timeout > 0) );


#define WAIT_TXRQ_HIGH(base) \
    while (! READ_TXRQ(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI_0R
//
// Notes : Register TX mailbox identifier register (TI0R) at the offset 0x180, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RTR 
    // 
#define RTR_MASK 0x2U
#define RTR_OFFSET 1
#define RTR_START_BIT 1
#define RTR_WIDTH 1



typedef enum rtr {
    RTR_0,
    RTR_1
} RTR_T ;
#define WRITE_RTR(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, (OldValue & ~RTR_MASK) | ((val << RTR_START_BIT) & RTR_MASK )); \
   } 

#define ENABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, val |  RTR_MASK ); \
   } 

#define DISABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x180 ); \
     WRITE_REGISTER_ULONG( base + 0x180, val & ~RTR_MASK ); \
   } 

#define READ_RTR(base) \
    ((READ_REGISTER_ULONG(base + 0x180) & RTR_MASK) >> RTR_START_BIT )

#define WHEN_RTR_HIGH(base) \
     if ( READ_RTR(base) )


#define UNLESS_RTR_HIGH(base) \
     if (! READ_RTR(base) )


#define WAIT_RTR_LOW(base) \
    while ( READ_RTR(base) );


#define WAIT_RTR_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RTR(base) && (--timeout > 0) );


#define WAIT_RTR_HIGH(base) \
    while (! READ_RTR(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI_0R
//
// Notes : Register TX mailbox identifier register (TI0R) at the offset 0x180, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // IDE 
    // 
#define IDE_MASK 0x4U
#define IDE_OFFSET 2
#define IDE_START_BIT 2
#define IDE_WIDTH 1



typedef enum ide {
    IDE_0,
    IDE_1
} IDE_T ;
#define WRITE_IDE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, (OldValue & ~IDE_MASK) | ((val << IDE_START_BIT) & IDE_MASK )); \
   } 

#define ENABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, val |  IDE_MASK ); \
   } 

#define DISABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x180 ); \
     WRITE_REGISTER_ULONG( base + 0x180, val & ~IDE_MASK ); \
   } 

#define READ_IDE(base) \
    ((READ_REGISTER_ULONG(base + 0x180) & IDE_MASK) >> IDE_START_BIT )

#define WHEN_IDE_HIGH(base) \
     if ( READ_IDE(base) )


#define UNLESS_IDE_HIGH(base) \
     if (! READ_IDE(base) )


#define WAIT_IDE_LOW(base) \
    while ( READ_IDE(base) );


#define WAIT_IDE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_IDE(base) && (--timeout > 0) );


#define WAIT_IDE_HIGH(base) \
    while (! READ_IDE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI_0R
//
// Notes : Register TX mailbox identifier register (TI0R) at the offset 0x180, Bits 3:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EXID 
    // 
#define EXID_MASK 0x1FFFF8U
#define EXID_OFFSET 20
#define EXID_START_BIT 3
#define EXID_WIDTH 18



typedef enum exid {
    EXID_0,
    EXID_1
} EXID_T ;
#define READ_EXID(base) \
    ((READ_REGISTER_ULONG(base + 0x180) & EXID_MASK) >> EXID_START_BIT )

#define WRITE_EXID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, (OldValue & ~EXID_MASK) | ((val << EXID_START_BIT) & EXID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti0r
//
// Return the value of register TI_0R
//
// Notes : Register TX mailbox identifier register (TI0R) at the offset 0x180, Bits 21:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // STID 
    // 
#define STID_MASK 0xFFE00000U
#define STID_OFFSET 31
#define STID_START_BIT 21
#define STID_WIDTH 11



typedef enum stid {
    STID_0,
    STID_1
} STID_T ;
#define READ_STID(base) \
    ((READ_REGISTER_ULONG(base + 0x180) & STID_MASK) >> STID_START_BIT )

#define WRITE_STID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x180); \
     WRITE_REGISTER_ULONG( base + 0x180, (OldValue & ~STID_MASK) | ((val << STID_START_BIT) & STID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt0r
//
// Return the value of register TDT0R
//
// Notes : Register Tdt0r at offset 0x184
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDT_0R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x184, val)

#define SET_BITS_TDT_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184, val |  mask ); \
   } 

#define CLEAR_BITS_TDT_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184,  val & ~mask ); \
   } 

#define READ_REGISTER_TDT_0R( base ) \
     READ_REGISTER_ULONG( base + 0x184) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt0r
//
// Return the value of register TDT_0R
//
// Notes : Register mailbox data length control and time stamp register (TDT0R) at the offset 0x184, Bits 0:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DLC 
    // 
#define DLC_MASK 0xFU
#define DLC_OFFSET 3
#define DLC_START_BIT 0
#define DLC_WIDTH 4


#define TDT_0R_REG 0x184

typedef enum dlc {
    DLC_0,
    DLC_1
} DLC_T ;
#define READ_DLC(base) \
    ((READ_REGISTER_ULONG(base + 0x184) & DLC_MASK) >> DLC_START_BIT )

#define WRITE_DLC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184, (OldValue & ~DLC_MASK) | ((val << DLC_START_BIT) & DLC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt0r
//
// Return the value of register TDT_0R
//
// Notes : Register mailbox data length control and time stamp register (TDT0R) at the offset 0x184, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TGT 
    // 
#define TGT_MASK 0x100U
#define TGT_OFFSET 8
#define TGT_START_BIT 8
#define TGT_WIDTH 1



typedef enum tgt {
    TGT_0,
    TGT_1
} TGT_T ;
#define WRITE_TGT(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184, (OldValue & ~TGT_MASK) | ((val << TGT_START_BIT) & TGT_MASK )); \
   } 

#define ENABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184, val |  TGT_MASK ); \
   } 

#define DISABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x184 ); \
     WRITE_REGISTER_ULONG( base + 0x184, val & ~TGT_MASK ); \
   } 

#define READ_TGT(base) \
    ((READ_REGISTER_ULONG(base + 0x184) & TGT_MASK) >> TGT_START_BIT )

#define WHEN_TGT_HIGH(base) \
     if ( READ_TGT(base) )


#define UNLESS_TGT_HIGH(base) \
     if (! READ_TGT(base) )


#define WAIT_TGT_LOW(base) \
    while ( READ_TGT(base) );


#define WAIT_TGT_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TGT(base) && (--timeout > 0) );


#define WAIT_TGT_HIGH(base) \
    while (! READ_TGT(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt0r
//
// Return the value of register TDT_0R
//
// Notes : Register mailbox data length control and time stamp register (TDT0R) at the offset 0x184, Bits 16:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TIME 
    // 
#define TIME_MASK 0xFFFF0000U
#define TIME_OFFSET 31
#define TIME_START_BIT 16
#define TIME_WIDTH 16



typedef enum time {
    TIME_0,
    TIME_1
} TIME_T ;
#define READ_TIME(base) \
    ((READ_REGISTER_ULONG(base + 0x184) & TIME_MASK) >> TIME_START_BIT )

#define WRITE_TIME(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x184); \
     WRITE_REGISTER_ULONG( base + 0x184, (OldValue & ~TIME_MASK) | ((val << TIME_START_BIT) & TIME_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl0r
//
// Return the value of register TDL0R
//
// Notes : Register Tdl0r at offset 0x188
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDL_0R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x188, val)

#define SET_BITS_TDL_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188, val |  mask ); \
   } 

#define CLEAR_BITS_TDL_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188,  val & ~mask ); \
   } 

#define READ_REGISTER_TDL_0R( base ) \
     READ_REGISTER_ULONG( base + 0x188) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl0r
//
// Return the value of register TDL_0R
//
// Notes : Register mailbox data low register (TDL0R) at the offset 0x188, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA0 
    // 
#define DATA0_MASK 0xFFU
#define DATA0_OFFSET 7
#define DATA0_START_BIT 0
#define DATA0_WIDTH 8


#define TDL_0R_REG 0x188

typedef enum data0 {
    DATA_0_0,
    DATA_0_1
} DATA_0_T ;
#define READ_DATA0(base) \
    ((READ_REGISTER_ULONG(base + 0x188) & DATA0_MASK) >> DATA0_START_BIT )

#define WRITE_DATA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188, (OldValue & ~DATA0_MASK) | ((val << DATA0_START_BIT) & DATA0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl0r
//
// Return the value of register TDL_0R
//
// Notes : Register mailbox data low register (TDL0R) at the offset 0x188, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA1 
    // 
#define DATA1_MASK 0xFF00U
#define DATA1_OFFSET 15
#define DATA1_START_BIT 8
#define DATA1_WIDTH 8



#define READ_DATA1(base) \
    ((READ_REGISTER_ULONG(base + 0x188) & DATA1_MASK) >> DATA1_START_BIT )

#define WRITE_DATA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188, (OldValue & ~DATA1_MASK) | ((val << DATA1_START_BIT) & DATA1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl0r
//
// Return the value of register TDL_0R
//
// Notes : Register mailbox data low register (TDL0R) at the offset 0x188, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA2 
    // 
#define DATA2_MASK 0xFF0000U
#define DATA2_OFFSET 23
#define DATA2_START_BIT 16
#define DATA2_WIDTH 8



#define READ_DATA2(base) \
    ((READ_REGISTER_ULONG(base + 0x188) & DATA2_MASK) >> DATA2_START_BIT )

#define WRITE_DATA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188, (OldValue & ~DATA2_MASK) | ((val << DATA2_START_BIT) & DATA2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl0r
//
// Return the value of register TDL_0R
//
// Notes : Register mailbox data low register (TDL0R) at the offset 0x188, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA3 
    // 
#define DATA3_MASK 0xFF000000U
#define DATA3_OFFSET 31
#define DATA3_START_BIT 24
#define DATA3_WIDTH 8



typedef enum data3 {
    DATA_3_0,
    DATA_3_1
} DATA_3_T ;
#define READ_DATA3(base) \
    ((READ_REGISTER_ULONG(base + 0x188) & DATA3_MASK) >> DATA3_START_BIT )

#define WRITE_DATA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x188); \
     WRITE_REGISTER_ULONG( base + 0x188, (OldValue & ~DATA3_MASK) | ((val << DATA3_START_BIT) & DATA3_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh0r
//
// Return the value of register TDH0R
//
// Notes : Register Tdh0r at offset 0x18C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDH_0R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x18C, val)

#define SET_BITS_TDH_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C, val |  mask ); \
   } 

#define CLEAR_BITS_TDH_0R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C,  val & ~mask ); \
   } 

#define READ_REGISTER_TDH_0R( base ) \
     READ_REGISTER_ULONG( base + 0x18C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh0r
//
// Return the value of register TDH_0R
//
// Notes : Register mailbox data high register (TDH0R) at the offset 0x18C, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA4 
    // 
#define DATA4_MASK 0xFFU
#define DATA4_OFFSET 7
#define DATA4_START_BIT 0
#define DATA4_WIDTH 8


#define TDH_0R_REG 0x18C

typedef enum data4 {
    DATA_4_0,
    DATA_4_1
} DATA_4_T ;
#define READ_DATA4(base) \
    ((READ_REGISTER_ULONG(base + 0x18C) & DATA4_MASK) >> DATA4_START_BIT )

#define WRITE_DATA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C, (OldValue & ~DATA4_MASK) | ((val << DATA4_START_BIT) & DATA4_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh0r
//
// Return the value of register TDH_0R
//
// Notes : Register mailbox data high register (TDH0R) at the offset 0x18C, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA5 
    // 
#define DATA5_MASK 0xFF00U
#define DATA5_OFFSET 15
#define DATA5_START_BIT 8
#define DATA5_WIDTH 8



typedef enum data5 {
    DATA_5_0,
    DATA_5_1
} DATA_5_T ;
#define READ_DATA5(base) \
    ((READ_REGISTER_ULONG(base + 0x18C) & DATA5_MASK) >> DATA5_START_BIT )

#define WRITE_DATA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C, (OldValue & ~DATA5_MASK) | ((val << DATA5_START_BIT) & DATA5_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh0r
//
// Return the value of register TDH_0R
//
// Notes : Register mailbox data high register (TDH0R) at the offset 0x18C, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA6 
    // 
#define DATA6_MASK 0xFF0000U
#define DATA6_OFFSET 23
#define DATA6_START_BIT 16
#define DATA6_WIDTH 8



typedef enum data6 {
    DATA_6_0,
    DATA_6_1
} DATA_6_T ;
#define READ_DATA6(base) \
    ((READ_REGISTER_ULONG(base + 0x18C) & DATA6_MASK) >> DATA6_START_BIT )

#define WRITE_DATA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C, (OldValue & ~DATA6_MASK) | ((val << DATA6_START_BIT) & DATA6_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh0r
//
// Return the value of register TDH_0R
//
// Notes : Register mailbox data high register (TDH0R) at the offset 0x18C, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA7 
    // 
#define DATA7_MASK 0xFF000000U
#define DATA7_OFFSET 31
#define DATA7_START_BIT 24
#define DATA7_WIDTH 8



typedef enum data7 {
    DATA_7_0,
    DATA_7_1
} DATA_7_T ;
#define READ_DATA7(base) \
    ((READ_REGISTER_ULONG(base + 0x18C) & DATA7_MASK) >> DATA7_START_BIT )

#define WRITE_DATA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x18C); \
     WRITE_REGISTER_ULONG( base + 0x18C, (OldValue & ~DATA7_MASK) | ((val << DATA7_START_BIT) & DATA7_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI1R
//
// Notes : Register Ti1r at offset 0x190
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TI_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x190, val)

#define SET_BITS_TI_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, val |  mask ); \
   } 

#define CLEAR_BITS_TI_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190,  val & ~mask ); \
   } 

#define READ_REGISTER_TI_1R( base ) \
     READ_REGISTER_ULONG( base + 0x190) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI_1R
//
// Notes : Register mailbox identifier register (TI1R) at the offset 0x190, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXRQ 
    // 
#define TXRQ_MASK 0x1U
#define TXRQ_OFFSET 0
#define TXRQ_START_BIT 0
#define TXRQ_WIDTH 1


#define TI_1R_REG 0x190

#define WRITE_TXRQ(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, (OldValue & ~TXRQ_MASK) | ((val << TXRQ_START_BIT) & TXRQ_MASK )); \
   } 

#define ENABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, val |  TXRQ_MASK ); \
   } 

#define DISABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x190 ); \
     WRITE_REGISTER_ULONG( base + 0x190, val & ~TXRQ_MASK ); \
   } 

#define READ_TXRQ(base) \
    ((READ_REGISTER_ULONG(base + 0x190) & TXRQ_MASK) >> TXRQ_START_BIT )

#define WHEN_TXRQ_HIGH(base) \
     if ( READ_TXRQ(base) )


#define UNLESS_TXRQ_HIGH(base) \
     if (! READ_TXRQ(base) )


#define WAIT_TXRQ_LOW(base) \
    while ( READ_TXRQ(base) );


#define WAIT_TXRQ_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXRQ(base) && (--timeout > 0) );


#define WAIT_TXRQ_HIGH(base) \
    while (! READ_TXRQ(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI_1R
//
// Notes : Register mailbox identifier register (TI1R) at the offset 0x190, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RTR 
    // 
#define RTR_MASK 0x2U
#define RTR_OFFSET 1
#define RTR_START_BIT 1
#define RTR_WIDTH 1



#define WRITE_RTR(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, (OldValue & ~RTR_MASK) | ((val << RTR_START_BIT) & RTR_MASK )); \
   } 

#define ENABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, val |  RTR_MASK ); \
   } 

#define DISABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x190 ); \
     WRITE_REGISTER_ULONG( base + 0x190, val & ~RTR_MASK ); \
   } 

#define READ_RTR(base) \
    ((READ_REGISTER_ULONG(base + 0x190) & RTR_MASK) >> RTR_START_BIT )

#define WHEN_RTR_HIGH(base) \
     if ( READ_RTR(base) )


#define UNLESS_RTR_HIGH(base) \
     if (! READ_RTR(base) )


#define WAIT_RTR_LOW(base) \
    while ( READ_RTR(base) );


#define WAIT_RTR_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RTR(base) && (--timeout > 0) );


#define WAIT_RTR_HIGH(base) \
    while (! READ_RTR(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI_1R
//
// Notes : Register mailbox identifier register (TI1R) at the offset 0x190, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // IDE 
    // 
#define IDE_MASK 0x4U
#define IDE_OFFSET 2
#define IDE_START_BIT 2
#define IDE_WIDTH 1



#define WRITE_IDE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, (OldValue & ~IDE_MASK) | ((val << IDE_START_BIT) & IDE_MASK )); \
   } 

#define ENABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, val |  IDE_MASK ); \
   } 

#define DISABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x190 ); \
     WRITE_REGISTER_ULONG( base + 0x190, val & ~IDE_MASK ); \
   } 

#define READ_IDE(base) \
    ((READ_REGISTER_ULONG(base + 0x190) & IDE_MASK) >> IDE_START_BIT )

#define WHEN_IDE_HIGH(base) \
     if ( READ_IDE(base) )


#define UNLESS_IDE_HIGH(base) \
     if (! READ_IDE(base) )


#define WAIT_IDE_LOW(base) \
    while ( READ_IDE(base) );


#define WAIT_IDE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_IDE(base) && (--timeout > 0) );


#define WAIT_IDE_HIGH(base) \
    while (! READ_IDE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI_1R
//
// Notes : Register mailbox identifier register (TI1R) at the offset 0x190, Bits 3:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EXID 
    // 
#define EXID_MASK 0x1FFFF8U
#define EXID_OFFSET 20
#define EXID_START_BIT 3
#define EXID_WIDTH 18



#define READ_EXID(base) \
    ((READ_REGISTER_ULONG(base + 0x190) & EXID_MASK) >> EXID_START_BIT )

#define WRITE_EXID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, (OldValue & ~EXID_MASK) | ((val << EXID_START_BIT) & EXID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti1r
//
// Return the value of register TI_1R
//
// Notes : Register mailbox identifier register (TI1R) at the offset 0x190, Bits 21:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // STID 
    // 
#define STID_MASK 0xFFE00000U
#define STID_OFFSET 31
#define STID_START_BIT 21
#define STID_WIDTH 11



#define READ_STID(base) \
    ((READ_REGISTER_ULONG(base + 0x190) & STID_MASK) >> STID_START_BIT )

#define WRITE_STID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x190); \
     WRITE_REGISTER_ULONG( base + 0x190, (OldValue & ~STID_MASK) | ((val << STID_START_BIT) & STID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt1r
//
// Return the value of register TDT1R
//
// Notes : Register Tdt1r at offset 0x194
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDT_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x194, val)

#define SET_BITS_TDT_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194, val |  mask ); \
   } 

#define CLEAR_BITS_TDT_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194,  val & ~mask ); \
   } 

#define READ_REGISTER_TDT_1R( base ) \
     READ_REGISTER_ULONG( base + 0x194) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt1r
//
// Return the value of register TDT_1R
//
// Notes : Register mailbox data length control and time stamp register (TDT1R) at the offset 0x194, Bits 0:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DLC 
    // 
#define DLC_MASK 0xFU
#define DLC_OFFSET 3
#define DLC_START_BIT 0
#define DLC_WIDTH 4


#define TDT_1R_REG 0x194

#define READ_DLC(base) \
    ((READ_REGISTER_ULONG(base + 0x194) & DLC_MASK) >> DLC_START_BIT )

#define WRITE_DLC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194, (OldValue & ~DLC_MASK) | ((val << DLC_START_BIT) & DLC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt1r
//
// Return the value of register TDT_1R
//
// Notes : Register mailbox data length control and time stamp register (TDT1R) at the offset 0x194, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TGT 
    // 
#define TGT_MASK 0x100U
#define TGT_OFFSET 8
#define TGT_START_BIT 8
#define TGT_WIDTH 1



#define WRITE_TGT(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194, (OldValue & ~TGT_MASK) | ((val << TGT_START_BIT) & TGT_MASK )); \
   } 

#define ENABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194, val |  TGT_MASK ); \
   } 

#define DISABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x194 ); \
     WRITE_REGISTER_ULONG( base + 0x194, val & ~TGT_MASK ); \
   } 

#define READ_TGT(base) \
    ((READ_REGISTER_ULONG(base + 0x194) & TGT_MASK) >> TGT_START_BIT )

#define WHEN_TGT_HIGH(base) \
     if ( READ_TGT(base) )


#define UNLESS_TGT_HIGH(base) \
     if (! READ_TGT(base) )


#define WAIT_TGT_LOW(base) \
    while ( READ_TGT(base) );


#define WAIT_TGT_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TGT(base) && (--timeout > 0) );


#define WAIT_TGT_HIGH(base) \
    while (! READ_TGT(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt1r
//
// Return the value of register TDT_1R
//
// Notes : Register mailbox data length control and time stamp register (TDT1R) at the offset 0x194, Bits 16:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TIME 
    // 
#define TIME_MASK 0xFFFF0000U
#define TIME_OFFSET 31
#define TIME_START_BIT 16
#define TIME_WIDTH 16



#define READ_TIME(base) \
    ((READ_REGISTER_ULONG(base + 0x194) & TIME_MASK) >> TIME_START_BIT )

#define WRITE_TIME(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x194); \
     WRITE_REGISTER_ULONG( base + 0x194, (OldValue & ~TIME_MASK) | ((val << TIME_START_BIT) & TIME_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl1r
//
// Return the value of register TDL1R
//
// Notes : Register Tdl1r at offset 0x198
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDL_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x198, val)

#define SET_BITS_TDL_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198, val |  mask ); \
   } 

#define CLEAR_BITS_TDL_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198,  val & ~mask ); \
   } 

#define READ_REGISTER_TDL_1R( base ) \
     READ_REGISTER_ULONG( base + 0x198) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl1r
//
// Return the value of register TDL_1R
//
// Notes : Register mailbox data low register (TDL1R) at the offset 0x198, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA0 
    // 
#define DATA0_MASK 0xFFU
#define DATA0_OFFSET 7
#define DATA0_START_BIT 0
#define DATA0_WIDTH 8


#define TDL_1R_REG 0x198

#define READ_DATA0(base) \
    ((READ_REGISTER_ULONG(base + 0x198) & DATA0_MASK) >> DATA0_START_BIT )

#define WRITE_DATA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198, (OldValue & ~DATA0_MASK) | ((val << DATA0_START_BIT) & DATA0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl1r
//
// Return the value of register TDL_1R
//
// Notes : Register mailbox data low register (TDL1R) at the offset 0x198, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA1 
    // 
#define DATA1_MASK 0xFF00U
#define DATA1_OFFSET 15
#define DATA1_START_BIT 8
#define DATA1_WIDTH 8



#define READ_DATA1(base) \
    ((READ_REGISTER_ULONG(base + 0x198) & DATA1_MASK) >> DATA1_START_BIT )

#define WRITE_DATA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198, (OldValue & ~DATA1_MASK) | ((val << DATA1_START_BIT) & DATA1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl1r
//
// Return the value of register TDL_1R
//
// Notes : Register mailbox data low register (TDL1R) at the offset 0x198, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA2 
    // 
#define DATA2_MASK 0xFF0000U
#define DATA2_OFFSET 23
#define DATA2_START_BIT 16
#define DATA2_WIDTH 8



#define READ_DATA2(base) \
    ((READ_REGISTER_ULONG(base + 0x198) & DATA2_MASK) >> DATA2_START_BIT )

#define WRITE_DATA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198, (OldValue & ~DATA2_MASK) | ((val << DATA2_START_BIT) & DATA2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl1r
//
// Return the value of register TDL_1R
//
// Notes : Register mailbox data low register (TDL1R) at the offset 0x198, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA3 
    // 
#define DATA3_MASK 0xFF000000U
#define DATA3_OFFSET 31
#define DATA3_START_BIT 24
#define DATA3_WIDTH 8



#define READ_DATA3(base) \
    ((READ_REGISTER_ULONG(base + 0x198) & DATA3_MASK) >> DATA3_START_BIT )

#define WRITE_DATA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x198); \
     WRITE_REGISTER_ULONG( base + 0x198, (OldValue & ~DATA3_MASK) | ((val << DATA3_START_BIT) & DATA3_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh1r
//
// Return the value of register TDH1R
//
// Notes : Register Tdh1r at offset 0x19C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDH_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x19C, val)

#define SET_BITS_TDH_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C, val |  mask ); \
   } 

#define CLEAR_BITS_TDH_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C,  val & ~mask ); \
   } 

#define READ_REGISTER_TDH_1R( base ) \
     READ_REGISTER_ULONG( base + 0x19C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh1r
//
// Return the value of register TDH_1R
//
// Notes : Register mailbox data high register (TDH1R) at the offset 0x19C, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA4 
    // 
#define DATA4_MASK 0xFFU
#define DATA4_OFFSET 7
#define DATA4_START_BIT 0
#define DATA4_WIDTH 8


#define TDH_1R_REG 0x19C

#define READ_DATA4(base) \
    ((READ_REGISTER_ULONG(base + 0x19C) & DATA4_MASK) >> DATA4_START_BIT )

#define WRITE_DATA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C, (OldValue & ~DATA4_MASK) | ((val << DATA4_START_BIT) & DATA4_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh1r
//
// Return the value of register TDH_1R
//
// Notes : Register mailbox data high register (TDH1R) at the offset 0x19C, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA5 
    // 
#define DATA5_MASK 0xFF00U
#define DATA5_OFFSET 15
#define DATA5_START_BIT 8
#define DATA5_WIDTH 8



#define READ_DATA5(base) \
    ((READ_REGISTER_ULONG(base + 0x19C) & DATA5_MASK) >> DATA5_START_BIT )

#define WRITE_DATA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C, (OldValue & ~DATA5_MASK) | ((val << DATA5_START_BIT) & DATA5_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh1r
//
// Return the value of register TDH_1R
//
// Notes : Register mailbox data high register (TDH1R) at the offset 0x19C, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA6 
    // 
#define DATA6_MASK 0xFF0000U
#define DATA6_OFFSET 23
#define DATA6_START_BIT 16
#define DATA6_WIDTH 8



#define READ_DATA6(base) \
    ((READ_REGISTER_ULONG(base + 0x19C) & DATA6_MASK) >> DATA6_START_BIT )

#define WRITE_DATA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C, (OldValue & ~DATA6_MASK) | ((val << DATA6_START_BIT) & DATA6_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh1r
//
// Return the value of register TDH_1R
//
// Notes : Register mailbox data high register (TDH1R) at the offset 0x19C, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA7 
    // 
#define DATA7_MASK 0xFF000000U
#define DATA7_OFFSET 31
#define DATA7_START_BIT 24
#define DATA7_WIDTH 8



#define READ_DATA7(base) \
    ((READ_REGISTER_ULONG(base + 0x19C) & DATA7_MASK) >> DATA7_START_BIT )

#define WRITE_DATA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x19C); \
     WRITE_REGISTER_ULONG( base + 0x19C, (OldValue & ~DATA7_MASK) | ((val << DATA7_START_BIT) & DATA7_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI2R
//
// Notes : Register Ti2r at offset 0x1A0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TI_2R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x1A0, val)

#define SET_BITS_TI_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val |  mask ); \
   } 

#define CLEAR_BITS_TI_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0,  val & ~mask ); \
   } 

#define READ_REGISTER_TI_2R( base ) \
     READ_REGISTER_ULONG( base + 0x1A0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI_2R
//
// Notes : Register mailbox identifier register (TI2R) at the offset 0x1A0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TXRQ 
    // 
#define TXRQ_MASK 0x1U
#define TXRQ_OFFSET 0
#define TXRQ_START_BIT 0
#define TXRQ_WIDTH 1


#define TI_2R_REG 0x1A0

#define WRITE_TXRQ(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, (OldValue & ~TXRQ_MASK) | ((val << TXRQ_START_BIT) & TXRQ_MASK )); \
   } 

#define ENABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val |  TXRQ_MASK ); \
   } 

#define DISABLE_TXRQ(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1A0 ); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val & ~TXRQ_MASK ); \
   } 

#define READ_TXRQ(base) \
    ((READ_REGISTER_ULONG(base + 0x1A0) & TXRQ_MASK) >> TXRQ_START_BIT )

#define WHEN_TXRQ_HIGH(base) \
     if ( READ_TXRQ(base) )


#define UNLESS_TXRQ_HIGH(base) \
     if (! READ_TXRQ(base) )


#define WAIT_TXRQ_LOW(base) \
    while ( READ_TXRQ(base) );


#define WAIT_TXRQ_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TXRQ(base) && (--timeout > 0) );


#define WAIT_TXRQ_HIGH(base) \
    while (! READ_TXRQ(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI_2R
//
// Notes : Register mailbox identifier register (TI2R) at the offset 0x1A0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RTR 
    // 
#define RTR_MASK 0x2U
#define RTR_OFFSET 1
#define RTR_START_BIT 1
#define RTR_WIDTH 1



#define WRITE_RTR(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, (OldValue & ~RTR_MASK) | ((val << RTR_START_BIT) & RTR_MASK )); \
   } 

#define ENABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val |  RTR_MASK ); \
   } 

#define DISABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1A0 ); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val & ~RTR_MASK ); \
   } 

#define READ_RTR(base) \
    ((READ_REGISTER_ULONG(base + 0x1A0) & RTR_MASK) >> RTR_START_BIT )

#define WHEN_RTR_HIGH(base) \
     if ( READ_RTR(base) )


#define UNLESS_RTR_HIGH(base) \
     if (! READ_RTR(base) )


#define WAIT_RTR_LOW(base) \
    while ( READ_RTR(base) );


#define WAIT_RTR_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RTR(base) && (--timeout > 0) );


#define WAIT_RTR_HIGH(base) \
    while (! READ_RTR(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI_2R
//
// Notes : Register mailbox identifier register (TI2R) at the offset 0x1A0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // IDE 
    // 
#define IDE_MASK 0x4U
#define IDE_OFFSET 2
#define IDE_START_BIT 2
#define IDE_WIDTH 1



#define WRITE_IDE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, (OldValue & ~IDE_MASK) | ((val << IDE_START_BIT) & IDE_MASK )); \
   } 

#define ENABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val |  IDE_MASK ); \
   } 

#define DISABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1A0 ); \
     WRITE_REGISTER_ULONG( base + 0x1A0, val & ~IDE_MASK ); \
   } 

#define READ_IDE(base) \
    ((READ_REGISTER_ULONG(base + 0x1A0) & IDE_MASK) >> IDE_START_BIT )

#define WHEN_IDE_HIGH(base) \
     if ( READ_IDE(base) )


#define UNLESS_IDE_HIGH(base) \
     if (! READ_IDE(base) )


#define WAIT_IDE_LOW(base) \
    while ( READ_IDE(base) );


#define WAIT_IDE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_IDE(base) && (--timeout > 0) );


#define WAIT_IDE_HIGH(base) \
    while (! READ_IDE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI_2R
//
// Notes : Register mailbox identifier register (TI2R) at the offset 0x1A0, Bits 3:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EXID 
    // 
#define EXID_MASK 0x1FFFF8U
#define EXID_OFFSET 20
#define EXID_START_BIT 3
#define EXID_WIDTH 18



#define READ_EXID(base) \
    ((READ_REGISTER_ULONG(base + 0x1A0) & EXID_MASK) >> EXID_START_BIT )

#define WRITE_EXID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, (OldValue & ~EXID_MASK) | ((val << EXID_START_BIT) & EXID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ti2r
//
// Return the value of register TI_2R
//
// Notes : Register mailbox identifier register (TI2R) at the offset 0x1A0, Bits 21:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // STID 
    // 
#define STID_MASK 0xFFE00000U
#define STID_OFFSET 31
#define STID_START_BIT 21
#define STID_WIDTH 11



#define READ_STID(base) \
    ((READ_REGISTER_ULONG(base + 0x1A0) & STID_MASK) >> STID_START_BIT )

#define WRITE_STID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A0); \
     WRITE_REGISTER_ULONG( base + 0x1A0, (OldValue & ~STID_MASK) | ((val << STID_START_BIT) & STID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt2r
//
// Return the value of register TDT2R
//
// Notes : Register Tdt2r at offset 0x1A4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDT_2R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x1A4, val)

#define SET_BITS_TDT_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4, val |  mask ); \
   } 

#define CLEAR_BITS_TDT_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4,  val & ~mask ); \
   } 

#define READ_REGISTER_TDT_2R( base ) \
     READ_REGISTER_ULONG( base + 0x1A4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt2r
//
// Return the value of register TDT_2R
//
// Notes : Register mailbox data length control and time stamp register (TDT2R) at the offset 0x1A4, Bits 0:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DLC 
    // 
#define DLC_MASK 0xFU
#define DLC_OFFSET 3
#define DLC_START_BIT 0
#define DLC_WIDTH 4


#define TDT_2R_REG 0x1A4

#define READ_DLC(base) \
    ((READ_REGISTER_ULONG(base + 0x1A4) & DLC_MASK) >> DLC_START_BIT )

#define WRITE_DLC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4, (OldValue & ~DLC_MASK) | ((val << DLC_START_BIT) & DLC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt2r
//
// Return the value of register TDT_2R
//
// Notes : Register mailbox data length control and time stamp register (TDT2R) at the offset 0x1A4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TGT 
    // 
#define TGT_MASK 0x100U
#define TGT_OFFSET 8
#define TGT_START_BIT 8
#define TGT_WIDTH 1



#define WRITE_TGT(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4, (OldValue & ~TGT_MASK) | ((val << TGT_START_BIT) & TGT_MASK )); \
   } 

#define ENABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4, val |  TGT_MASK ); \
   } 

#define DISABLE_TGT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1A4 ); \
     WRITE_REGISTER_ULONG( base + 0x1A4, val & ~TGT_MASK ); \
   } 

#define READ_TGT(base) \
    ((READ_REGISTER_ULONG(base + 0x1A4) & TGT_MASK) >> TGT_START_BIT )

#define WHEN_TGT_HIGH(base) \
     if ( READ_TGT(base) )


#define UNLESS_TGT_HIGH(base) \
     if (! READ_TGT(base) )


#define WAIT_TGT_LOW(base) \
    while ( READ_TGT(base) );


#define WAIT_TGT_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_TGT(base) && (--timeout > 0) );


#define WAIT_TGT_HIGH(base) \
    while (! READ_TGT(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Tdt2r
//
// Return the value of register TDT_2R
//
// Notes : Register mailbox data length control and time stamp register (TDT2R) at the offset 0x1A4, Bits 16:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TIME 
    // 
#define TIME_MASK 0xFFFF0000U
#define TIME_OFFSET 31
#define TIME_START_BIT 16
#define TIME_WIDTH 16



#define READ_TIME(base) \
    ((READ_REGISTER_ULONG(base + 0x1A4) & TIME_MASK) >> TIME_START_BIT )

#define WRITE_TIME(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A4); \
     WRITE_REGISTER_ULONG( base + 0x1A4, (OldValue & ~TIME_MASK) | ((val << TIME_START_BIT) & TIME_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl2r
//
// Return the value of register TDL2R
//
// Notes : Register Tdl2r at offset 0x1A8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDL_2R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x1A8, val)

#define SET_BITS_TDL_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8, val |  mask ); \
   } 

#define CLEAR_BITS_TDL_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8,  val & ~mask ); \
   } 

#define READ_REGISTER_TDL_2R( base ) \
     READ_REGISTER_ULONG( base + 0x1A8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl2r
//
// Return the value of register TDL_2R
//
// Notes : Register mailbox data low register (TDL2R) at the offset 0x1A8, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA0 
    // 
#define DATA0_MASK 0xFFU
#define DATA0_OFFSET 7
#define DATA0_START_BIT 0
#define DATA0_WIDTH 8


#define TDL_2R_REG 0x1A8

#define READ_DATA0(base) \
    ((READ_REGISTER_ULONG(base + 0x1A8) & DATA0_MASK) >> DATA0_START_BIT )

#define WRITE_DATA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8, (OldValue & ~DATA0_MASK) | ((val << DATA0_START_BIT) & DATA0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl2r
//
// Return the value of register TDL_2R
//
// Notes : Register mailbox data low register (TDL2R) at the offset 0x1A8, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA1 
    // 
#define DATA1_MASK 0xFF00U
#define DATA1_OFFSET 15
#define DATA1_START_BIT 8
#define DATA1_WIDTH 8



#define READ_DATA1(base) \
    ((READ_REGISTER_ULONG(base + 0x1A8) & DATA1_MASK) >> DATA1_START_BIT )

#define WRITE_DATA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8, (OldValue & ~DATA1_MASK) | ((val << DATA1_START_BIT) & DATA1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl2r
//
// Return the value of register TDL_2R
//
// Notes : Register mailbox data low register (TDL2R) at the offset 0x1A8, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA2 
    // 
#define DATA2_MASK 0xFF0000U
#define DATA2_OFFSET 23
#define DATA2_START_BIT 16
#define DATA2_WIDTH 8



#define READ_DATA2(base) \
    ((READ_REGISTER_ULONG(base + 0x1A8) & DATA2_MASK) >> DATA2_START_BIT )

#define WRITE_DATA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8, (OldValue & ~DATA2_MASK) | ((val << DATA2_START_BIT) & DATA2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdl2r
//
// Return the value of register TDL_2R
//
// Notes : Register mailbox data low register (TDL2R) at the offset 0x1A8, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA3 
    // 
#define DATA3_MASK 0xFF000000U
#define DATA3_OFFSET 31
#define DATA3_START_BIT 24
#define DATA3_WIDTH 8



#define READ_DATA3(base) \
    ((READ_REGISTER_ULONG(base + 0x1A8) & DATA3_MASK) >> DATA3_START_BIT )

#define WRITE_DATA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1A8); \
     WRITE_REGISTER_ULONG( base + 0x1A8, (OldValue & ~DATA3_MASK) | ((val << DATA3_START_BIT) & DATA3_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh2r
//
// Return the value of register TDH2R
//
// Notes : Register Tdh2r at offset 0x1AC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_TDH_2R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x1AC, val)

#define SET_BITS_TDH_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC, val |  mask ); \
   } 

#define CLEAR_BITS_TDH_2R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC,  val & ~mask ); \
   } 

#define READ_REGISTER_TDH_2R( base ) \
     READ_REGISTER_ULONG( base + 0x1AC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh2r
//
// Return the value of register TDH_2R
//
// Notes : Register mailbox data high register (TDH2R) at the offset 0x1AC, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA4 
    // 
#define DATA4_MASK 0xFFU
#define DATA4_OFFSET 7
#define DATA4_START_BIT 0
#define DATA4_WIDTH 8


#define TDH_2R_REG 0x1AC

#define READ_DATA4(base) \
    ((READ_REGISTER_ULONG(base + 0x1AC) & DATA4_MASK) >> DATA4_START_BIT )

#define WRITE_DATA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC, (OldValue & ~DATA4_MASK) | ((val << DATA4_START_BIT) & DATA4_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh2r
//
// Return the value of register TDH_2R
//
// Notes : Register mailbox data high register (TDH2R) at the offset 0x1AC, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA5 
    // 
#define DATA5_MASK 0xFF00U
#define DATA5_OFFSET 15
#define DATA5_START_BIT 8
#define DATA5_WIDTH 8



#define READ_DATA5(base) \
    ((READ_REGISTER_ULONG(base + 0x1AC) & DATA5_MASK) >> DATA5_START_BIT )

#define WRITE_DATA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC, (OldValue & ~DATA5_MASK) | ((val << DATA5_START_BIT) & DATA5_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh2r
//
// Return the value of register TDH_2R
//
// Notes : Register mailbox data high register (TDH2R) at the offset 0x1AC, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA6 
    // 
#define DATA6_MASK 0xFF0000U
#define DATA6_OFFSET 23
#define DATA6_START_BIT 16
#define DATA6_WIDTH 8



#define READ_DATA6(base) \
    ((READ_REGISTER_ULONG(base + 0x1AC) & DATA6_MASK) >> DATA6_START_BIT )

#define WRITE_DATA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC, (OldValue & ~DATA6_MASK) | ((val << DATA6_START_BIT) & DATA6_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Tdh2r
//
// Return the value of register TDH_2R
//
// Notes : Register mailbox data high register (TDH2R) at the offset 0x1AC, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA7 
    // 
#define DATA7_MASK 0xFF000000U
#define DATA7_OFFSET 31
#define DATA7_START_BIT 24
#define DATA7_WIDTH 8



#define READ_DATA7(base) \
    ((READ_REGISTER_ULONG(base + 0x1AC) & DATA7_MASK) >> DATA7_START_BIT )

#define WRITE_DATA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1AC); \
     WRITE_REGISTER_ULONG( base + 0x1AC, (OldValue & ~DATA7_MASK) | ((val << DATA7_START_BIT) & DATA7_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri0r
//
// Return the value of register RI0R
//
// Notes : Register Ri0r at offset 0x1B0
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RI_0R( base ) \
     READ_REGISTER_ULONG( base + 0x1B0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri0r
//
// Return the value of register RI_0R
//
// Notes : Register receive FIFO mailbox identifier register (RI0R) at the offset 0x1B0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RTR 
    // 
#define RTR_MASK 0x2U
#define RTR_OFFSET 1
#define RTR_START_BIT 1
#define RTR_WIDTH 1


#define RI_0R_REG 0x1B0

#define WRITE_RTR(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, (OldValue & ~RTR_MASK) | ((val << RTR_START_BIT) & RTR_MASK )); \
   } 

#define ENABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, val |  RTR_MASK ); \
   } 

#define DISABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1B0 ); \
     WRITE_REGISTER_ULONG( base + 0x1B0, val & ~RTR_MASK ); \
   } 

#define READ_RTR(base) \
    ((READ_REGISTER_ULONG(base + 0x1B0) & RTR_MASK) >> RTR_START_BIT )

#define WHEN_RTR_HIGH(base) \
     if ( READ_RTR(base) )


#define UNLESS_RTR_HIGH(base) \
     if (! READ_RTR(base) )


#define WAIT_RTR_LOW(base) \
    while ( READ_RTR(base) );


#define WAIT_RTR_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RTR(base) && (--timeout > 0) );


#define WAIT_RTR_HIGH(base) \
    while (! READ_RTR(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ri0r
//
// Return the value of register RI_0R
//
// Notes : Register receive FIFO mailbox identifier register (RI0R) at the offset 0x1B0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // IDE 
    // 
#define IDE_MASK 0x4U
#define IDE_OFFSET 2
#define IDE_START_BIT 2
#define IDE_WIDTH 1



#define WRITE_IDE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, (OldValue & ~IDE_MASK) | ((val << IDE_START_BIT) & IDE_MASK )); \
   } 

#define ENABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, val |  IDE_MASK ); \
   } 

#define DISABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1B0 ); \
     WRITE_REGISTER_ULONG( base + 0x1B0, val & ~IDE_MASK ); \
   } 

#define READ_IDE(base) \
    ((READ_REGISTER_ULONG(base + 0x1B0) & IDE_MASK) >> IDE_START_BIT )

#define WHEN_IDE_HIGH(base) \
     if ( READ_IDE(base) )


#define UNLESS_IDE_HIGH(base) \
     if (! READ_IDE(base) )


#define WAIT_IDE_LOW(base) \
    while ( READ_IDE(base) );


#define WAIT_IDE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_IDE(base) && (--timeout > 0) );


#define WAIT_IDE_HIGH(base) \
    while (! READ_IDE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ri0r
//
// Return the value of register RI_0R
//
// Notes : Register receive FIFO mailbox identifier register (RI0R) at the offset 0x1B0, Bits 3:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EXID 
    // 
#define EXID_MASK 0x1FFFF8U
#define EXID_OFFSET 20
#define EXID_START_BIT 3
#define EXID_WIDTH 18



#define READ_EXID(base) \
    ((READ_REGISTER_ULONG(base + 0x1B0) & EXID_MASK) >> EXID_START_BIT )

#define WRITE_EXID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, (OldValue & ~EXID_MASK) | ((val << EXID_START_BIT) & EXID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri0r
//
// Return the value of register RI_0R
//
// Notes : Register receive FIFO mailbox identifier register (RI0R) at the offset 0x1B0, Bits 21:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // STID 
    // 
#define STID_MASK 0xFFE00000U
#define STID_OFFSET 31
#define STID_START_BIT 21
#define STID_WIDTH 11



#define READ_STID(base) \
    ((READ_REGISTER_ULONG(base + 0x1B0) & STID_MASK) >> STID_START_BIT )

#define WRITE_STID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B0); \
     WRITE_REGISTER_ULONG( base + 0x1B0, (OldValue & ~STID_MASK) | ((val << STID_START_BIT) & STID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt0r
//
// Return the value of register RDT0R
//
// Notes : Register Rdt0r at offset 0x1B4
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDT_0R( base ) \
     READ_REGISTER_ULONG( base + 0x1B4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt0r
//
// Return the value of register RDT_0R
//
// Notes : Register mailbox data high register (RDT0R) at the offset 0x1B4, Bits 0:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DLC 
    // 
#define DLC_MASK 0xFU
#define DLC_OFFSET 3
#define DLC_START_BIT 0
#define DLC_WIDTH 4


#define RDT_0R_REG 0x1B4

#define READ_DLC(base) \
    ((READ_REGISTER_ULONG(base + 0x1B4) & DLC_MASK) >> DLC_START_BIT )

#define WRITE_DLC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B4); \
     WRITE_REGISTER_ULONG( base + 0x1B4, (OldValue & ~DLC_MASK) | ((val << DLC_START_BIT) & DLC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt0r
//
// Return the value of register RDT_0R
//
// Notes : Register mailbox data high register (RDT0R) at the offset 0x1B4, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FMI 
    // 
#define FMI_MASK 0xFF00U
#define FMI_OFFSET 15
#define FMI_START_BIT 8
#define FMI_WIDTH 8



typedef enum fmi {
    FMI_0,
    FMI_1
} FMI_T ;
#define READ_FMI(base) \
    ((READ_REGISTER_ULONG(base + 0x1B4) & FMI_MASK) >> FMI_START_BIT )

#define WRITE_FMI(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B4); \
     WRITE_REGISTER_ULONG( base + 0x1B4, (OldValue & ~FMI_MASK) | ((val << FMI_START_BIT) & FMI_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt0r
//
// Return the value of register RDT_0R
//
// Notes : Register mailbox data high register (RDT0R) at the offset 0x1B4, Bits 16:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TIME 
    // 
#define TIME_MASK 0xFFFF0000U
#define TIME_OFFSET 31
#define TIME_START_BIT 16
#define TIME_WIDTH 16



#define READ_TIME(base) \
    ((READ_REGISTER_ULONG(base + 0x1B4) & TIME_MASK) >> TIME_START_BIT )

#define WRITE_TIME(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B4); \
     WRITE_REGISTER_ULONG( base + 0x1B4, (OldValue & ~TIME_MASK) | ((val << TIME_START_BIT) & TIME_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl0r
//
// Return the value of register RDL0R
//
// Notes : Register Rdl0r at offset 0x1B8
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDL_0R( base ) \
     READ_REGISTER_ULONG( base + 0x1B8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl0r
//
// Return the value of register RDL_0R
//
// Notes : Register mailbox data high register (RDL0R) at the offset 0x1B8, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA0 
    // 
#define DATA0_MASK 0xFFU
#define DATA0_OFFSET 7
#define DATA0_START_BIT 0
#define DATA0_WIDTH 8


#define RDL_0R_REG 0x1B8

#define READ_DATA0(base) \
    ((READ_REGISTER_ULONG(base + 0x1B8) & DATA0_MASK) >> DATA0_START_BIT )

#define WRITE_DATA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B8); \
     WRITE_REGISTER_ULONG( base + 0x1B8, (OldValue & ~DATA0_MASK) | ((val << DATA0_START_BIT) & DATA0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl0r
//
// Return the value of register RDL_0R
//
// Notes : Register mailbox data high register (RDL0R) at the offset 0x1B8, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA1 
    // 
#define DATA1_MASK 0xFF00U
#define DATA1_OFFSET 15
#define DATA1_START_BIT 8
#define DATA1_WIDTH 8



#define READ_DATA1(base) \
    ((READ_REGISTER_ULONG(base + 0x1B8) & DATA1_MASK) >> DATA1_START_BIT )

#define WRITE_DATA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B8); \
     WRITE_REGISTER_ULONG( base + 0x1B8, (OldValue & ~DATA1_MASK) | ((val << DATA1_START_BIT) & DATA1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl0r
//
// Return the value of register RDL_0R
//
// Notes : Register mailbox data high register (RDL0R) at the offset 0x1B8, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA2 
    // 
#define DATA2_MASK 0xFF0000U
#define DATA2_OFFSET 23
#define DATA2_START_BIT 16
#define DATA2_WIDTH 8



#define READ_DATA2(base) \
    ((READ_REGISTER_ULONG(base + 0x1B8) & DATA2_MASK) >> DATA2_START_BIT )

#define WRITE_DATA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B8); \
     WRITE_REGISTER_ULONG( base + 0x1B8, (OldValue & ~DATA2_MASK) | ((val << DATA2_START_BIT) & DATA2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl0r
//
// Return the value of register RDL_0R
//
// Notes : Register mailbox data high register (RDL0R) at the offset 0x1B8, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA3 
    // 
#define DATA3_MASK 0xFF000000U
#define DATA3_OFFSET 31
#define DATA3_START_BIT 24
#define DATA3_WIDTH 8



#define READ_DATA3(base) \
    ((READ_REGISTER_ULONG(base + 0x1B8) & DATA3_MASK) >> DATA3_START_BIT )

#define WRITE_DATA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1B8); \
     WRITE_REGISTER_ULONG( base + 0x1B8, (OldValue & ~DATA3_MASK) | ((val << DATA3_START_BIT) & DATA3_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh0r
//
// Return the value of register RDH0R
//
// Notes : Register Rdh0r at offset 0x1BC
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDH_0R( base ) \
     READ_REGISTER_ULONG( base + 0x1BC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh0r
//
// Return the value of register RDH_0R
//
// Notes : Register receive FIFO mailbox data high register (RDH0R) at the offset 0x1BC, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA4 
    // 
#define DATA4_MASK 0xFFU
#define DATA4_OFFSET 7
#define DATA4_START_BIT 0
#define DATA4_WIDTH 8


#define RDH_0R_REG 0x1BC

#define READ_DATA4(base) \
    ((READ_REGISTER_ULONG(base + 0x1BC) & DATA4_MASK) >> DATA4_START_BIT )

#define WRITE_DATA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1BC); \
     WRITE_REGISTER_ULONG( base + 0x1BC, (OldValue & ~DATA4_MASK) | ((val << DATA4_START_BIT) & DATA4_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh0r
//
// Return the value of register RDH_0R
//
// Notes : Register receive FIFO mailbox data high register (RDH0R) at the offset 0x1BC, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA5 
    // 
#define DATA5_MASK 0xFF00U
#define DATA5_OFFSET 15
#define DATA5_START_BIT 8
#define DATA5_WIDTH 8



#define READ_DATA5(base) \
    ((READ_REGISTER_ULONG(base + 0x1BC) & DATA5_MASK) >> DATA5_START_BIT )

#define WRITE_DATA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1BC); \
     WRITE_REGISTER_ULONG( base + 0x1BC, (OldValue & ~DATA5_MASK) | ((val << DATA5_START_BIT) & DATA5_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh0r
//
// Return the value of register RDH_0R
//
// Notes : Register receive FIFO mailbox data high register (RDH0R) at the offset 0x1BC, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA6 
    // 
#define DATA6_MASK 0xFF0000U
#define DATA6_OFFSET 23
#define DATA6_START_BIT 16
#define DATA6_WIDTH 8



#define READ_DATA6(base) \
    ((READ_REGISTER_ULONG(base + 0x1BC) & DATA6_MASK) >> DATA6_START_BIT )

#define WRITE_DATA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1BC); \
     WRITE_REGISTER_ULONG( base + 0x1BC, (OldValue & ~DATA6_MASK) | ((val << DATA6_START_BIT) & DATA6_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh0r
//
// Return the value of register RDH_0R
//
// Notes : Register receive FIFO mailbox data high register (RDH0R) at the offset 0x1BC, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA7 
    // 
#define DATA7_MASK 0xFF000000U
#define DATA7_OFFSET 31
#define DATA7_START_BIT 24
#define DATA7_WIDTH 8



#define READ_DATA7(base) \
    ((READ_REGISTER_ULONG(base + 0x1BC) & DATA7_MASK) >> DATA7_START_BIT )

#define WRITE_DATA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1BC); \
     WRITE_REGISTER_ULONG( base + 0x1BC, (OldValue & ~DATA7_MASK) | ((val << DATA7_START_BIT) & DATA7_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri1r
//
// Return the value of register RI1R
//
// Notes : Register Ri1r at offset 0x1C0
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RI_1R( base ) \
     READ_REGISTER_ULONG( base + 0x1C0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri1r
//
// Return the value of register RI_1R
//
// Notes : Register mailbox data high register (RI1R) at the offset 0x1C0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // RTR 
    // 
#define RTR_MASK 0x2U
#define RTR_OFFSET 1
#define RTR_START_BIT 1
#define RTR_WIDTH 1


#define RI_1R_REG 0x1C0

#define WRITE_RTR(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, (OldValue & ~RTR_MASK) | ((val << RTR_START_BIT) & RTR_MASK )); \
   } 

#define ENABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, val |  RTR_MASK ); \
   } 

#define DISABLE_RTR(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1C0 ); \
     WRITE_REGISTER_ULONG( base + 0x1C0, val & ~RTR_MASK ); \
   } 

#define READ_RTR(base) \
    ((READ_REGISTER_ULONG(base + 0x1C0) & RTR_MASK) >> RTR_START_BIT )

#define WHEN_RTR_HIGH(base) \
     if ( READ_RTR(base) )


#define UNLESS_RTR_HIGH(base) \
     if (! READ_RTR(base) )


#define WAIT_RTR_LOW(base) \
    while ( READ_RTR(base) );


#define WAIT_RTR_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_RTR(base) && (--timeout > 0) );


#define WAIT_RTR_HIGH(base) \
    while (! READ_RTR(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ri1r
//
// Return the value of register RI_1R
//
// Notes : Register mailbox data high register (RI1R) at the offset 0x1C0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // IDE 
    // 
#define IDE_MASK 0x4U
#define IDE_OFFSET 2
#define IDE_START_BIT 2
#define IDE_WIDTH 1



#define WRITE_IDE(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, (OldValue & ~IDE_MASK) | ((val << IDE_START_BIT) & IDE_MASK )); \
   } 

#define ENABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, val |  IDE_MASK ); \
   } 

#define DISABLE_IDE(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x1C0 ); \
     WRITE_REGISTER_ULONG( base + 0x1C0, val & ~IDE_MASK ); \
   } 

#define READ_IDE(base) \
    ((READ_REGISTER_ULONG(base + 0x1C0) & IDE_MASK) >> IDE_START_BIT )

#define WHEN_IDE_HIGH(base) \
     if ( READ_IDE(base) )


#define UNLESS_IDE_HIGH(base) \
     if (! READ_IDE(base) )


#define WAIT_IDE_LOW(base) \
    while ( READ_IDE(base) );


#define WAIT_IDE_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_IDE(base) && (--timeout > 0) );


#define WAIT_IDE_HIGH(base) \
    while (! READ_IDE(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ri1r
//
// Return the value of register RI_1R
//
// Notes : Register mailbox data high register (RI1R) at the offset 0x1C0, Bits 3:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // EXID 
    // 
#define EXID_MASK 0x1FFFF8U
#define EXID_OFFSET 20
#define EXID_START_BIT 3
#define EXID_WIDTH 18



#define READ_EXID(base) \
    ((READ_REGISTER_ULONG(base + 0x1C0) & EXID_MASK) >> EXID_START_BIT )

#define WRITE_EXID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, (OldValue & ~EXID_MASK) | ((val << EXID_START_BIT) & EXID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ri1r
//
// Return the value of register RI_1R
//
// Notes : Register mailbox data high register (RI1R) at the offset 0x1C0, Bits 21:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // STID 
    // 
#define STID_MASK 0xFFE00000U
#define STID_OFFSET 31
#define STID_START_BIT 21
#define STID_WIDTH 11



#define READ_STID(base) \
    ((READ_REGISTER_ULONG(base + 0x1C0) & STID_MASK) >> STID_START_BIT )

#define WRITE_STID(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C0); \
     WRITE_REGISTER_ULONG( base + 0x1C0, (OldValue & ~STID_MASK) | ((val << STID_START_BIT) & STID_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt1r
//
// Return the value of register RDT1R
//
// Notes : Register Rdt1r at offset 0x1C4
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDT_1R( base ) \
     READ_REGISTER_ULONG( base + 0x1C4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt1r
//
// Return the value of register RDT_1R
//
// Notes : Register mailbox data high register (RDT1R) at the offset 0x1C4, Bits 0:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DLC 
    // 
#define DLC_MASK 0xFU
#define DLC_OFFSET 3
#define DLC_START_BIT 0
#define DLC_WIDTH 4


#define RDT_1R_REG 0x1C4

#define READ_DLC(base) \
    ((READ_REGISTER_ULONG(base + 0x1C4) & DLC_MASK) >> DLC_START_BIT )

#define WRITE_DLC(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C4); \
     WRITE_REGISTER_ULONG( base + 0x1C4, (OldValue & ~DLC_MASK) | ((val << DLC_START_BIT) & DLC_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt1r
//
// Return the value of register RDT_1R
//
// Notes : Register mailbox data high register (RDT1R) at the offset 0x1C4, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FMI 
    // 
#define FMI_MASK 0xFF00U
#define FMI_OFFSET 15
#define FMI_START_BIT 8
#define FMI_WIDTH 8



#define READ_FMI(base) \
    ((READ_REGISTER_ULONG(base + 0x1C4) & FMI_MASK) >> FMI_START_BIT )

#define WRITE_FMI(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C4); \
     WRITE_REGISTER_ULONG( base + 0x1C4, (OldValue & ~FMI_MASK) | ((val << FMI_START_BIT) & FMI_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdt1r
//
// Return the value of register RDT_1R
//
// Notes : Register mailbox data high register (RDT1R) at the offset 0x1C4, Bits 16:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // TIME 
    // 
#define TIME_MASK 0xFFFF0000U
#define TIME_OFFSET 31
#define TIME_START_BIT 16
#define TIME_WIDTH 16



#define READ_TIME(base) \
    ((READ_REGISTER_ULONG(base + 0x1C4) & TIME_MASK) >> TIME_START_BIT )

#define WRITE_TIME(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C4); \
     WRITE_REGISTER_ULONG( base + 0x1C4, (OldValue & ~TIME_MASK) | ((val << TIME_START_BIT) & TIME_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl1r
//
// Return the value of register RDL1R
//
// Notes : Register Rdl1r at offset 0x1C8
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDL_1R( base ) \
     READ_REGISTER_ULONG( base + 0x1C8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl1r
//
// Return the value of register RDL_1R
//
// Notes : Register mailbox data high register (RDL1R) at the offset 0x1C8, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA0 
    // 
#define DATA0_MASK 0xFFU
#define DATA0_OFFSET 7
#define DATA0_START_BIT 0
#define DATA0_WIDTH 8


#define RDL_1R_REG 0x1C8

#define READ_DATA0(base) \
    ((READ_REGISTER_ULONG(base + 0x1C8) & DATA0_MASK) >> DATA0_START_BIT )

#define WRITE_DATA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C8); \
     WRITE_REGISTER_ULONG( base + 0x1C8, (OldValue & ~DATA0_MASK) | ((val << DATA0_START_BIT) & DATA0_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl1r
//
// Return the value of register RDL_1R
//
// Notes : Register mailbox data high register (RDL1R) at the offset 0x1C8, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA1 
    // 
#define DATA1_MASK 0xFF00U
#define DATA1_OFFSET 15
#define DATA1_START_BIT 8
#define DATA1_WIDTH 8



#define READ_DATA1(base) \
    ((READ_REGISTER_ULONG(base + 0x1C8) & DATA1_MASK) >> DATA1_START_BIT )

#define WRITE_DATA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C8); \
     WRITE_REGISTER_ULONG( base + 0x1C8, (OldValue & ~DATA1_MASK) | ((val << DATA1_START_BIT) & DATA1_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl1r
//
// Return the value of register RDL_1R
//
// Notes : Register mailbox data high register (RDL1R) at the offset 0x1C8, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA2 
    // 
#define DATA2_MASK 0xFF0000U
#define DATA2_OFFSET 23
#define DATA2_START_BIT 16
#define DATA2_WIDTH 8



#define READ_DATA2(base) \
    ((READ_REGISTER_ULONG(base + 0x1C8) & DATA2_MASK) >> DATA2_START_BIT )

#define WRITE_DATA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C8); \
     WRITE_REGISTER_ULONG( base + 0x1C8, (OldValue & ~DATA2_MASK) | ((val << DATA2_START_BIT) & DATA2_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdl1r
//
// Return the value of register RDL_1R
//
// Notes : Register mailbox data high register (RDL1R) at the offset 0x1C8, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA3 
    // 
#define DATA3_MASK 0xFF000000U
#define DATA3_OFFSET 31
#define DATA3_START_BIT 24
#define DATA3_WIDTH 8



#define READ_DATA3(base) \
    ((READ_REGISTER_ULONG(base + 0x1C8) & DATA3_MASK) >> DATA3_START_BIT )

#define WRITE_DATA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1C8); \
     WRITE_REGISTER_ULONG( base + 0x1C8, (OldValue & ~DATA3_MASK) | ((val << DATA3_START_BIT) & DATA3_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh1r
//
// Return the value of register RDH1R
//
// Notes : Register Rdh1r at offset 0x1CC
//
/////////////////////////////////////////////////////////////////////////
#define READ_REGISTER_RDH_1R( base ) \
     READ_REGISTER_ULONG( base + 0x1CC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh1r
//
// Return the value of register RDH_1R
//
// Notes : Register mailbox data high register (RDH1R) at the offset 0x1CC, Bits 0:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA4 
    // 
#define DATA4_MASK 0xFFU
#define DATA4_OFFSET 7
#define DATA4_START_BIT 0
#define DATA4_WIDTH 8


#define RDH_1R_REG 0x1CC

#define READ_DATA4(base) \
    ((READ_REGISTER_ULONG(base + 0x1CC) & DATA4_MASK) >> DATA4_START_BIT )

#define WRITE_DATA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1CC); \
     WRITE_REGISTER_ULONG( base + 0x1CC, (OldValue & ~DATA4_MASK) | ((val << DATA4_START_BIT) & DATA4_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh1r
//
// Return the value of register RDH_1R
//
// Notes : Register mailbox data high register (RDH1R) at the offset 0x1CC, Bits 8:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA5 
    // 
#define DATA5_MASK 0xFF00U
#define DATA5_OFFSET 15
#define DATA5_START_BIT 8
#define DATA5_WIDTH 8



#define READ_DATA5(base) \
    ((READ_REGISTER_ULONG(base + 0x1CC) & DATA5_MASK) >> DATA5_START_BIT )

#define WRITE_DATA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1CC); \
     WRITE_REGISTER_ULONG( base + 0x1CC, (OldValue & ~DATA5_MASK) | ((val << DATA5_START_BIT) & DATA5_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh1r
//
// Return the value of register RDH_1R
//
// Notes : Register mailbox data high register (RDH1R) at the offset 0x1CC, Bits 16:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA6 
    // 
#define DATA6_MASK 0xFF0000U
#define DATA6_OFFSET 23
#define DATA6_START_BIT 16
#define DATA6_WIDTH 8



#define READ_DATA6(base) \
    ((READ_REGISTER_ULONG(base + 0x1CC) & DATA6_MASK) >> DATA6_START_BIT )

#define WRITE_DATA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1CC); \
     WRITE_REGISTER_ULONG( base + 0x1CC, (OldValue & ~DATA6_MASK) | ((val << DATA6_START_BIT) & DATA6_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Rdh1r
//
// Return the value of register RDH_1R
//
// Notes : Register mailbox data high register (RDH1R) at the offset 0x1CC, Bits 24:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // DATA7 
    // 
#define DATA7_MASK 0xFF000000U
#define DATA7_OFFSET 31
#define DATA7_START_BIT 24
#define DATA7_WIDTH 8



#define READ_DATA7(base) \
    ((READ_REGISTER_ULONG(base + 0x1CC) & DATA7_MASK) >> DATA7_START_BIT )

#define WRITE_DATA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x1CC); \
     WRITE_REGISTER_ULONG( base + 0x1CC, (OldValue & ~DATA7_MASK) | ((val << DATA7_START_BIT) & DATA7_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fmr
//
// Return the value of register FMR
//
// Notes : Register Fmr at offset 0x200
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_FMR( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x200, val)

#define SET_BITS_FMR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x200); \
     WRITE_REGISTER_ULONG( base + 0x200, val |  mask ); \
   } 

#define CLEAR_BITS_FMR(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x200); \
     WRITE_REGISTER_ULONG( base + 0x200,  val & ~mask ); \
   } 

#define READ_REGISTER_FMR( base ) \
     READ_REGISTER_ULONG( base + 0x200) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fmr
//
// Return the value of register FMR
//
// Notes : Register filter master register (FMR) at the offset 0x200, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // FINIT 
    // 
#define FINIT_MASK 0x1U
#define FINIT_OFFSET 0
#define FINIT_START_BIT 0
#define FINIT_WIDTH 1


#define FMR_REG 0x200

typedef enum finit {
    FINIT_0,
    FINIT_1
} FINIT_T ;
#define WRITE_FINIT(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x200); \
     WRITE_REGISTER_ULONG( base + 0x200, (OldValue & ~FINIT_MASK) | ((val << FINIT_START_BIT) & FINIT_MASK )); \
   } 

#define ENABLE_FINIT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x200); \
     WRITE_REGISTER_ULONG( base + 0x200, val |  FINIT_MASK ); \
   } 

#define DISABLE_FINIT(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x200 ); \
     WRITE_REGISTER_ULONG( base + 0x200, val & ~FINIT_MASK ); \
   } 

#define READ_FINIT(base) \
    ((READ_REGISTER_ULONG(base + 0x200) & FINIT_MASK) >> FINIT_START_BIT )

#define WHEN_FINIT_HIGH(base) \
     if ( READ_FINIT(base) )


#define UNLESS_FINIT_HIGH(base) \
     if (! READ_FINIT(base) )


#define WAIT_FINIT_LOW(base) \
    while ( READ_FINIT(base) );


#define WAIT_FINIT_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FINIT(base) && (--timeout > 0) );


#define WAIT_FINIT_HIGH(base) \
    while (! READ_FINIT(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fmr
//
// Return the value of register FMR
//
// Notes : Register filter master register (FMR) at the offset 0x200, Bits 8:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // CAN2SB 
    // 
#define CAN2SB_MASK 0x3F00U
#define CAN2SB_OFFSET 13
#define CAN2SB_START_BIT 8
#define CAN2SB_WIDTH 6



typedef enum can2sb {
    CAN_2SB_0,
    CAN_2SB_1
} CAN_2SB_T ;
#define READ_CAN2SB(base) \
    ((READ_REGISTER_ULONG(base + 0x200) & CAN2SB_MASK) >> CAN2SB_START_BIT )

#define WRITE_CAN2SB(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x200); \
     WRITE_REGISTER_ULONG( base + 0x200, (OldValue & ~CAN2SB_MASK) | ((val << CAN2SB_START_BIT) & CAN2SB_MASK )); \
   } 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM1R
//
// Notes : Register Fm1r at offset 0x204
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_FM_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x204, val)

#define SET_BITS_FM_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  mask ); \
   } 

#define CLEAR_BITS_FM_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204,  val & ~mask ); \
   } 

#define READ_REGISTER_FM_1R( base ) \
     READ_REGISTER_ULONG( base + 0x204) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM27_MASK 0x8000000U
#define FBM27_OFFSET 27
#define FBM27_START_BIT 27
#define FBM27_WIDTH 1


#define FM_1R_REG 0x204

typedef enum fbm27 {
    FBM_2_7_0,
    FBM_2_7_1
} FBM_27_T ;
#define WRITE_FBM27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM27_MASK) | ((val << FBM27_START_BIT) & FBM27_MASK )); \
   } 

#define ENABLE_FBM27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM27_MASK ); \
   } 

#define DISABLE_FBM27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM27_MASK ); \
   } 

#define READ_FBM27(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM27_MASK) >> FBM27_START_BIT )

#define WHEN_FBM27_HIGH(base) \
     if ( READ_FBM27(base) )


#define UNLESS_FBM27_HIGH(base) \
     if (! READ_FBM27(base) )


#define WAIT_FBM27_LOW(base) \
    while ( READ_FBM27(base) );


#define WAIT_FBM27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM27(base) && (--timeout > 0) );


#define WAIT_FBM27_HIGH(base) \
    while (! READ_FBM27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM26_MASK 0x4000000U
#define FBM26_OFFSET 26
#define FBM26_START_BIT 26
#define FBM26_WIDTH 1



typedef enum fbm26 {
    FBM_2_6_0,
    FBM_2_6_1
} FBM_26_T ;
#define WRITE_FBM26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM26_MASK) | ((val << FBM26_START_BIT) & FBM26_MASK )); \
   } 

#define ENABLE_FBM26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM26_MASK ); \
   } 

#define DISABLE_FBM26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM26_MASK ); \
   } 

#define READ_FBM26(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM26_MASK) >> FBM26_START_BIT )

#define WHEN_FBM26_HIGH(base) \
     if ( READ_FBM26(base) )


#define UNLESS_FBM26_HIGH(base) \
     if (! READ_FBM26(base) )


#define WAIT_FBM26_LOW(base) \
    while ( READ_FBM26(base) );


#define WAIT_FBM26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM26(base) && (--timeout > 0) );


#define WAIT_FBM26_HIGH(base) \
    while (! READ_FBM26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM25_MASK 0x2000000U
#define FBM25_OFFSET 25
#define FBM25_START_BIT 25
#define FBM25_WIDTH 1



typedef enum fbm25 {
    FBM_2_5_0,
    FBM_2_5_1
} FBM_25_T ;
#define WRITE_FBM25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM25_MASK) | ((val << FBM25_START_BIT) & FBM25_MASK )); \
   } 

#define ENABLE_FBM25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM25_MASK ); \
   } 

#define DISABLE_FBM25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM25_MASK ); \
   } 

#define READ_FBM25(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM25_MASK) >> FBM25_START_BIT )

#define WHEN_FBM25_HIGH(base) \
     if ( READ_FBM25(base) )


#define UNLESS_FBM25_HIGH(base) \
     if (! READ_FBM25(base) )


#define WAIT_FBM25_LOW(base) \
    while ( READ_FBM25(base) );


#define WAIT_FBM25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM25(base) && (--timeout > 0) );


#define WAIT_FBM25_HIGH(base) \
    while (! READ_FBM25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM24_MASK 0x1000000U
#define FBM24_OFFSET 24
#define FBM24_START_BIT 24
#define FBM24_WIDTH 1



typedef enum fbm24 {
    FBM_2_4_0,
    FBM_2_4_1
} FBM_24_T ;
#define WRITE_FBM24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM24_MASK) | ((val << FBM24_START_BIT) & FBM24_MASK )); \
   } 

#define ENABLE_FBM24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM24_MASK ); \
   } 

#define DISABLE_FBM24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM24_MASK ); \
   } 

#define READ_FBM24(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM24_MASK) >> FBM24_START_BIT )

#define WHEN_FBM24_HIGH(base) \
     if ( READ_FBM24(base) )


#define UNLESS_FBM24_HIGH(base) \
     if (! READ_FBM24(base) )


#define WAIT_FBM24_LOW(base) \
    while ( READ_FBM24(base) );


#define WAIT_FBM24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM24(base) && (--timeout > 0) );


#define WAIT_FBM24_HIGH(base) \
    while (! READ_FBM24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM23_MASK 0x800000U
#define FBM23_OFFSET 23
#define FBM23_START_BIT 23
#define FBM23_WIDTH 1



typedef enum fbm23 {
    FBM_2_3_0,
    FBM_2_3_1
} FBM_23_T ;
#define WRITE_FBM23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM23_MASK) | ((val << FBM23_START_BIT) & FBM23_MASK )); \
   } 

#define ENABLE_FBM23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM23_MASK ); \
   } 

#define DISABLE_FBM23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM23_MASK ); \
   } 

#define READ_FBM23(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM23_MASK) >> FBM23_START_BIT )

#define WHEN_FBM23_HIGH(base) \
     if ( READ_FBM23(base) )


#define UNLESS_FBM23_HIGH(base) \
     if (! READ_FBM23(base) )


#define WAIT_FBM23_LOW(base) \
    while ( READ_FBM23(base) );


#define WAIT_FBM23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM23(base) && (--timeout > 0) );


#define WAIT_FBM23_HIGH(base) \
    while (! READ_FBM23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM22_MASK 0x400000U
#define FBM22_OFFSET 22
#define FBM22_START_BIT 22
#define FBM22_WIDTH 1



typedef enum fbm22 {
    FBM_2_2_0,
    FBM_2_2_1
} FBM_22_T ;
#define WRITE_FBM22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM22_MASK) | ((val << FBM22_START_BIT) & FBM22_MASK )); \
   } 

#define ENABLE_FBM22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM22_MASK ); \
   } 

#define DISABLE_FBM22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM22_MASK ); \
   } 

#define READ_FBM22(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM22_MASK) >> FBM22_START_BIT )

#define WHEN_FBM22_HIGH(base) \
     if ( READ_FBM22(base) )


#define UNLESS_FBM22_HIGH(base) \
     if (! READ_FBM22(base) )


#define WAIT_FBM22_LOW(base) \
    while ( READ_FBM22(base) );


#define WAIT_FBM22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM22(base) && (--timeout > 0) );


#define WAIT_FBM22_HIGH(base) \
    while (! READ_FBM22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM21_MASK 0x200000U
#define FBM21_OFFSET 21
#define FBM21_START_BIT 21
#define FBM21_WIDTH 1



typedef enum fbm21 {
    FBM_2_1_0,
    FBM_2_1_1
} FBM_21_T ;
#define WRITE_FBM21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM21_MASK) | ((val << FBM21_START_BIT) & FBM21_MASK )); \
   } 

#define ENABLE_FBM21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM21_MASK ); \
   } 

#define DISABLE_FBM21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM21_MASK ); \
   } 

#define READ_FBM21(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM21_MASK) >> FBM21_START_BIT )

#define WHEN_FBM21_HIGH(base) \
     if ( READ_FBM21(base) )


#define UNLESS_FBM21_HIGH(base) \
     if (! READ_FBM21(base) )


#define WAIT_FBM21_LOW(base) \
    while ( READ_FBM21(base) );


#define WAIT_FBM21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM21(base) && (--timeout > 0) );


#define WAIT_FBM21_HIGH(base) \
    while (! READ_FBM21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM20_MASK 0x100000U
#define FBM20_OFFSET 20
#define FBM20_START_BIT 20
#define FBM20_WIDTH 1



typedef enum fbm20 {
    FBM_2_0_0,
    FBM_2_0_1
} FBM_20_T ;
#define WRITE_FBM20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM20_MASK) | ((val << FBM20_START_BIT) & FBM20_MASK )); \
   } 

#define ENABLE_FBM20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM20_MASK ); \
   } 

#define DISABLE_FBM20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM20_MASK ); \
   } 

#define READ_FBM20(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM20_MASK) >> FBM20_START_BIT )

#define WHEN_FBM20_HIGH(base) \
     if ( READ_FBM20(base) )


#define UNLESS_FBM20_HIGH(base) \
     if (! READ_FBM20(base) )


#define WAIT_FBM20_LOW(base) \
    while ( READ_FBM20(base) );


#define WAIT_FBM20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM20(base) && (--timeout > 0) );


#define WAIT_FBM20_HIGH(base) \
    while (! READ_FBM20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM19_MASK 0x80000U
#define FBM19_OFFSET 19
#define FBM19_START_BIT 19
#define FBM19_WIDTH 1



typedef enum fbm19 {
    FBM_1_9_0,
    FBM_1_9_1
} FBM_19_T ;
#define WRITE_FBM19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM19_MASK) | ((val << FBM19_START_BIT) & FBM19_MASK )); \
   } 

#define ENABLE_FBM19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM19_MASK ); \
   } 

#define DISABLE_FBM19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM19_MASK ); \
   } 

#define READ_FBM19(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM19_MASK) >> FBM19_START_BIT )

#define WHEN_FBM19_HIGH(base) \
     if ( READ_FBM19(base) )


#define UNLESS_FBM19_HIGH(base) \
     if (! READ_FBM19(base) )


#define WAIT_FBM19_LOW(base) \
    while ( READ_FBM19(base) );


#define WAIT_FBM19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM19(base) && (--timeout > 0) );


#define WAIT_FBM19_HIGH(base) \
    while (! READ_FBM19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM18_MASK 0x40000U
#define FBM18_OFFSET 18
#define FBM18_START_BIT 18
#define FBM18_WIDTH 1



typedef enum fbm18 {
    FBM_1_8_0,
    FBM_1_8_1
} FBM_18_T ;
#define WRITE_FBM18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM18_MASK) | ((val << FBM18_START_BIT) & FBM18_MASK )); \
   } 

#define ENABLE_FBM18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM18_MASK ); \
   } 

#define DISABLE_FBM18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM18_MASK ); \
   } 

#define READ_FBM18(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM18_MASK) >> FBM18_START_BIT )

#define WHEN_FBM18_HIGH(base) \
     if ( READ_FBM18(base) )


#define UNLESS_FBM18_HIGH(base) \
     if (! READ_FBM18(base) )


#define WAIT_FBM18_LOW(base) \
    while ( READ_FBM18(base) );


#define WAIT_FBM18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM18(base) && (--timeout > 0) );


#define WAIT_FBM18_HIGH(base) \
    while (! READ_FBM18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM17_MASK 0x20000U
#define FBM17_OFFSET 17
#define FBM17_START_BIT 17
#define FBM17_WIDTH 1



typedef enum fbm17 {
    FBM_1_7_0,
    FBM_1_7_1
} FBM_17_T ;
#define WRITE_FBM17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM17_MASK) | ((val << FBM17_START_BIT) & FBM17_MASK )); \
   } 

#define ENABLE_FBM17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM17_MASK ); \
   } 

#define DISABLE_FBM17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM17_MASK ); \
   } 

#define READ_FBM17(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM17_MASK) >> FBM17_START_BIT )

#define WHEN_FBM17_HIGH(base) \
     if ( READ_FBM17(base) )


#define UNLESS_FBM17_HIGH(base) \
     if (! READ_FBM17(base) )


#define WAIT_FBM17_LOW(base) \
    while ( READ_FBM17(base) );


#define WAIT_FBM17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM17(base) && (--timeout > 0) );


#define WAIT_FBM17_HIGH(base) \
    while (! READ_FBM17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM16_MASK 0x10000U
#define FBM16_OFFSET 16
#define FBM16_START_BIT 16
#define FBM16_WIDTH 1



typedef enum fbm16 {
    FBM_1_6_0,
    FBM_1_6_1
} FBM_16_T ;
#define WRITE_FBM16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM16_MASK) | ((val << FBM16_START_BIT) & FBM16_MASK )); \
   } 

#define ENABLE_FBM16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM16_MASK ); \
   } 

#define DISABLE_FBM16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM16_MASK ); \
   } 

#define READ_FBM16(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM16_MASK) >> FBM16_START_BIT )

#define WHEN_FBM16_HIGH(base) \
     if ( READ_FBM16(base) )


#define UNLESS_FBM16_HIGH(base) \
     if (! READ_FBM16(base) )


#define WAIT_FBM16_LOW(base) \
    while ( READ_FBM16(base) );


#define WAIT_FBM16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM16(base) && (--timeout > 0) );


#define WAIT_FBM16_HIGH(base) \
    while (! READ_FBM16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM15_MASK 0x8000U
#define FBM15_OFFSET 15
#define FBM15_START_BIT 15
#define FBM15_WIDTH 1



typedef enum fbm15 {
    FBM_1_5_0,
    FBM_1_5_1
} FBM_15_T ;
#define WRITE_FBM15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM15_MASK) | ((val << FBM15_START_BIT) & FBM15_MASK )); \
   } 

#define ENABLE_FBM15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM15_MASK ); \
   } 

#define DISABLE_FBM15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM15_MASK ); \
   } 

#define READ_FBM15(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM15_MASK) >> FBM15_START_BIT )

#define WHEN_FBM15_HIGH(base) \
     if ( READ_FBM15(base) )


#define UNLESS_FBM15_HIGH(base) \
     if (! READ_FBM15(base) )


#define WAIT_FBM15_LOW(base) \
    while ( READ_FBM15(base) );


#define WAIT_FBM15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM15(base) && (--timeout > 0) );


#define WAIT_FBM15_HIGH(base) \
    while (! READ_FBM15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM14_MASK 0x4000U
#define FBM14_OFFSET 14
#define FBM14_START_BIT 14
#define FBM14_WIDTH 1



typedef enum fbm14 {
    FBM_1_4_0,
    FBM_1_4_1
} FBM_14_T ;
#define WRITE_FBM14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM14_MASK) | ((val << FBM14_START_BIT) & FBM14_MASK )); \
   } 

#define ENABLE_FBM14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM14_MASK ); \
   } 

#define DISABLE_FBM14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM14_MASK ); \
   } 

#define READ_FBM14(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM14_MASK) >> FBM14_START_BIT )

#define WHEN_FBM14_HIGH(base) \
     if ( READ_FBM14(base) )


#define UNLESS_FBM14_HIGH(base) \
     if (! READ_FBM14(base) )


#define WAIT_FBM14_LOW(base) \
    while ( READ_FBM14(base) );


#define WAIT_FBM14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM14(base) && (--timeout > 0) );


#define WAIT_FBM14_HIGH(base) \
    while (! READ_FBM14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM13_MASK 0x2000U
#define FBM13_OFFSET 13
#define FBM13_START_BIT 13
#define FBM13_WIDTH 1



typedef enum fbm13 {
    FBM_1_3_0,
    FBM_1_3_1
} FBM_13_T ;
#define WRITE_FBM13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM13_MASK) | ((val << FBM13_START_BIT) & FBM13_MASK )); \
   } 

#define ENABLE_FBM13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM13_MASK ); \
   } 

#define DISABLE_FBM13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM13_MASK ); \
   } 

#define READ_FBM13(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM13_MASK) >> FBM13_START_BIT )

#define WHEN_FBM13_HIGH(base) \
     if ( READ_FBM13(base) )


#define UNLESS_FBM13_HIGH(base) \
     if (! READ_FBM13(base) )


#define WAIT_FBM13_LOW(base) \
    while ( READ_FBM13(base) );


#define WAIT_FBM13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM13(base) && (--timeout > 0) );


#define WAIT_FBM13_HIGH(base) \
    while (! READ_FBM13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM12_MASK 0x1000U
#define FBM12_OFFSET 12
#define FBM12_START_BIT 12
#define FBM12_WIDTH 1



typedef enum fbm12 {
    FBM_1_2_0,
    FBM_1_2_1
} FBM_12_T ;
#define WRITE_FBM12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM12_MASK) | ((val << FBM12_START_BIT) & FBM12_MASK )); \
   } 

#define ENABLE_FBM12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM12_MASK ); \
   } 

#define DISABLE_FBM12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM12_MASK ); \
   } 

#define READ_FBM12(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM12_MASK) >> FBM12_START_BIT )

#define WHEN_FBM12_HIGH(base) \
     if ( READ_FBM12(base) )


#define UNLESS_FBM12_HIGH(base) \
     if (! READ_FBM12(base) )


#define WAIT_FBM12_LOW(base) \
    while ( READ_FBM12(base) );


#define WAIT_FBM12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM12(base) && (--timeout > 0) );


#define WAIT_FBM12_HIGH(base) \
    while (! READ_FBM12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM11_MASK 0x800U
#define FBM11_OFFSET 11
#define FBM11_START_BIT 11
#define FBM11_WIDTH 1



typedef enum fbm11 {
    FBM_1_1_0,
    FBM_1_1_1
} FBM_11_T ;
#define WRITE_FBM11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM11_MASK) | ((val << FBM11_START_BIT) & FBM11_MASK )); \
   } 

#define ENABLE_FBM11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM11_MASK ); \
   } 

#define DISABLE_FBM11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM11_MASK ); \
   } 

#define READ_FBM11(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM11_MASK) >> FBM11_START_BIT )

#define WHEN_FBM11_HIGH(base) \
     if ( READ_FBM11(base) )


#define UNLESS_FBM11_HIGH(base) \
     if (! READ_FBM11(base) )


#define WAIT_FBM11_LOW(base) \
    while ( READ_FBM11(base) );


#define WAIT_FBM11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM11(base) && (--timeout > 0) );


#define WAIT_FBM11_HIGH(base) \
    while (! READ_FBM11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM10_MASK 0x400U
#define FBM10_OFFSET 10
#define FBM10_START_BIT 10
#define FBM10_WIDTH 1



typedef enum fbm10 {
    FBM_1_0_0,
    FBM_1_0_1
} FBM_10_T ;
#define WRITE_FBM10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM10_MASK) | ((val << FBM10_START_BIT) & FBM10_MASK )); \
   } 

#define ENABLE_FBM10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM10_MASK ); \
   } 

#define DISABLE_FBM10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM10_MASK ); \
   } 

#define READ_FBM10(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM10_MASK) >> FBM10_START_BIT )

#define WHEN_FBM10_HIGH(base) \
     if ( READ_FBM10(base) )


#define UNLESS_FBM10_HIGH(base) \
     if (! READ_FBM10(base) )


#define WAIT_FBM10_LOW(base) \
    while ( READ_FBM10(base) );


#define WAIT_FBM10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM10(base) && (--timeout > 0) );


#define WAIT_FBM10_HIGH(base) \
    while (! READ_FBM10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM9_MASK 0x200U
#define FBM9_OFFSET 9
#define FBM9_START_BIT 9
#define FBM9_WIDTH 1



typedef enum fbm9 {
    FBM_9_0,
    FBM_9_1
} FBM_9_T ;
#define WRITE_FBM9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM9_MASK) | ((val << FBM9_START_BIT) & FBM9_MASK )); \
   } 

#define ENABLE_FBM9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM9_MASK ); \
   } 

#define DISABLE_FBM9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM9_MASK ); \
   } 

#define READ_FBM9(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM9_MASK) >> FBM9_START_BIT )

#define WHEN_FBM9_HIGH(base) \
     if ( READ_FBM9(base) )


#define UNLESS_FBM9_HIGH(base) \
     if (! READ_FBM9(base) )


#define WAIT_FBM9_LOW(base) \
    while ( READ_FBM9(base) );


#define WAIT_FBM9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM9(base) && (--timeout > 0) );


#define WAIT_FBM9_HIGH(base) \
    while (! READ_FBM9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM8_MASK 0x100U
#define FBM8_OFFSET 8
#define FBM8_START_BIT 8
#define FBM8_WIDTH 1



typedef enum fbm8 {
    FBM_8_0,
    FBM_8_1
} FBM_8_T ;
#define WRITE_FBM8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM8_MASK) | ((val << FBM8_START_BIT) & FBM8_MASK )); \
   } 

#define ENABLE_FBM8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM8_MASK ); \
   } 

#define DISABLE_FBM8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM8_MASK ); \
   } 

#define READ_FBM8(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM8_MASK) >> FBM8_START_BIT )

#define WHEN_FBM8_HIGH(base) \
     if ( READ_FBM8(base) )


#define UNLESS_FBM8_HIGH(base) \
     if (! READ_FBM8(base) )


#define WAIT_FBM8_LOW(base) \
    while ( READ_FBM8(base) );


#define WAIT_FBM8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM8(base) && (--timeout > 0) );


#define WAIT_FBM8_HIGH(base) \
    while (! READ_FBM8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM7_MASK 0x80U
#define FBM7_OFFSET 7
#define FBM7_START_BIT 7
#define FBM7_WIDTH 1



typedef enum fbm7 {
    FBM_7_0,
    FBM_7_1
} FBM_7_T ;
#define WRITE_FBM7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM7_MASK) | ((val << FBM7_START_BIT) & FBM7_MASK )); \
   } 

#define ENABLE_FBM7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM7_MASK ); \
   } 

#define DISABLE_FBM7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM7_MASK ); \
   } 

#define READ_FBM7(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM7_MASK) >> FBM7_START_BIT )

#define WHEN_FBM7_HIGH(base) \
     if ( READ_FBM7(base) )


#define UNLESS_FBM7_HIGH(base) \
     if (! READ_FBM7(base) )


#define WAIT_FBM7_LOW(base) \
    while ( READ_FBM7(base) );


#define WAIT_FBM7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM7(base) && (--timeout > 0) );


#define WAIT_FBM7_HIGH(base) \
    while (! READ_FBM7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM6_MASK 0x40U
#define FBM6_OFFSET 6
#define FBM6_START_BIT 6
#define FBM6_WIDTH 1



typedef enum fbm6 {
    FBM_6_0,
    FBM_6_1
} FBM_6_T ;
#define WRITE_FBM6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM6_MASK) | ((val << FBM6_START_BIT) & FBM6_MASK )); \
   } 

#define ENABLE_FBM6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM6_MASK ); \
   } 

#define DISABLE_FBM6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM6_MASK ); \
   } 

#define READ_FBM6(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM6_MASK) >> FBM6_START_BIT )

#define WHEN_FBM6_HIGH(base) \
     if ( READ_FBM6(base) )


#define UNLESS_FBM6_HIGH(base) \
     if (! READ_FBM6(base) )


#define WAIT_FBM6_LOW(base) \
    while ( READ_FBM6(base) );


#define WAIT_FBM6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM6(base) && (--timeout > 0) );


#define WAIT_FBM6_HIGH(base) \
    while (! READ_FBM6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM5_MASK 0x20U
#define FBM5_OFFSET 5
#define FBM5_START_BIT 5
#define FBM5_WIDTH 1



typedef enum fbm5 {
    FBM_5_0,
    FBM_5_1
} FBM_5_T ;
#define WRITE_FBM5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM5_MASK) | ((val << FBM5_START_BIT) & FBM5_MASK )); \
   } 

#define ENABLE_FBM5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM5_MASK ); \
   } 

#define DISABLE_FBM5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM5_MASK ); \
   } 

#define READ_FBM5(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM5_MASK) >> FBM5_START_BIT )

#define WHEN_FBM5_HIGH(base) \
     if ( READ_FBM5(base) )


#define UNLESS_FBM5_HIGH(base) \
     if (! READ_FBM5(base) )


#define WAIT_FBM5_LOW(base) \
    while ( READ_FBM5(base) );


#define WAIT_FBM5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM5(base) && (--timeout > 0) );


#define WAIT_FBM5_HIGH(base) \
    while (! READ_FBM5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM4_MASK 0x10U
#define FBM4_OFFSET 4
#define FBM4_START_BIT 4
#define FBM4_WIDTH 1



typedef enum fbm4 {
    FBM_4_0,
    FBM_4_1
} FBM_4_T ;
#define WRITE_FBM4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM4_MASK) | ((val << FBM4_START_BIT) & FBM4_MASK )); \
   } 

#define ENABLE_FBM4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM4_MASK ); \
   } 

#define DISABLE_FBM4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM4_MASK ); \
   } 

#define READ_FBM4(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM4_MASK) >> FBM4_START_BIT )

#define WHEN_FBM4_HIGH(base) \
     if ( READ_FBM4(base) )


#define UNLESS_FBM4_HIGH(base) \
     if (! READ_FBM4(base) )


#define WAIT_FBM4_LOW(base) \
    while ( READ_FBM4(base) );


#define WAIT_FBM4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM4(base) && (--timeout > 0) );


#define WAIT_FBM4_HIGH(base) \
    while (! READ_FBM4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM3_MASK 0x8U
#define FBM3_OFFSET 3
#define FBM3_START_BIT 3
#define FBM3_WIDTH 1



typedef enum fbm3 {
    FBM_3_0,
    FBM_3_1
} FBM_3_T ;
#define WRITE_FBM3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM3_MASK) | ((val << FBM3_START_BIT) & FBM3_MASK )); \
   } 

#define ENABLE_FBM3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM3_MASK ); \
   } 

#define DISABLE_FBM3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM3_MASK ); \
   } 

#define READ_FBM3(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM3_MASK) >> FBM3_START_BIT )

#define WHEN_FBM3_HIGH(base) \
     if ( READ_FBM3(base) )


#define UNLESS_FBM3_HIGH(base) \
     if (! READ_FBM3(base) )


#define WAIT_FBM3_LOW(base) \
    while ( READ_FBM3(base) );


#define WAIT_FBM3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM3(base) && (--timeout > 0) );


#define WAIT_FBM3_HIGH(base) \
    while (! READ_FBM3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM2_MASK 0x4U
#define FBM2_OFFSET 2
#define FBM2_START_BIT 2
#define FBM2_WIDTH 1



typedef enum fbm2 {
    FBM_2_0,
    FBM_2_1
} FBM_2_T ;
#define WRITE_FBM2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM2_MASK) | ((val << FBM2_START_BIT) & FBM2_MASK )); \
   } 

#define ENABLE_FBM2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM2_MASK ); \
   } 

#define DISABLE_FBM2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM2_MASK ); \
   } 

#define READ_FBM2(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM2_MASK) >> FBM2_START_BIT )

#define WHEN_FBM2_HIGH(base) \
     if ( READ_FBM2(base) )


#define UNLESS_FBM2_HIGH(base) \
     if (! READ_FBM2(base) )


#define WAIT_FBM2_LOW(base) \
    while ( READ_FBM2(base) );


#define WAIT_FBM2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM2(base) && (--timeout > 0) );


#define WAIT_FBM2_HIGH(base) \
    while (! READ_FBM2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM1_MASK 0x2U
#define FBM1_OFFSET 1
#define FBM1_START_BIT 1
#define FBM1_WIDTH 1



typedef enum fbm1 {
    FBM_1_0,
    FBM_1_1
} FBM_1_T ;
#define WRITE_FBM1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM1_MASK) | ((val << FBM1_START_BIT) & FBM1_MASK )); \
   } 

#define ENABLE_FBM1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM1_MASK ); \
   } 

#define DISABLE_FBM1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM1_MASK ); \
   } 

#define READ_FBM1(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM1_MASK) >> FBM1_START_BIT )

#define WHEN_FBM1_HIGH(base) \
     if ( READ_FBM1(base) )


#define UNLESS_FBM1_HIGH(base) \
     if (! READ_FBM1(base) )


#define WAIT_FBM1_LOW(base) \
    while ( READ_FBM1(base) );


#define WAIT_FBM1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM1(base) && (--timeout > 0) );


#define WAIT_FBM1_HIGH(base) \
    while (! READ_FBM1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fm1r
//
// Return the value of register FM_1R
//
// Notes : Register filter mode register (FM1R) at the offset 0x204, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter mode 
    // 
#define FBM0_MASK 0x1U
#define FBM0_OFFSET 0
#define FBM0_START_BIT 0
#define FBM0_WIDTH 1



typedef enum fbm0 {
    FBM_0_0,
    FBM_0_1
} FBM_0_T ;
#define WRITE_FBM0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, (OldValue & ~FBM0_MASK) | ((val << FBM0_START_BIT) & FBM0_MASK )); \
   } 

#define ENABLE_FBM0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x204); \
     WRITE_REGISTER_ULONG( base + 0x204, val |  FBM0_MASK ); \
   } 

#define DISABLE_FBM0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x204 ); \
     WRITE_REGISTER_ULONG( base + 0x204, val & ~FBM0_MASK ); \
   } 

#define READ_FBM0(base) \
    ((READ_REGISTER_ULONG(base + 0x204) & FBM0_MASK) >> FBM0_START_BIT )

#define WHEN_FBM0_HIGH(base) \
     if ( READ_FBM0(base) )


#define UNLESS_FBM0_HIGH(base) \
     if (! READ_FBM0(base) )


#define WAIT_FBM0_LOW(base) \
    while ( READ_FBM0(base) );


#define WAIT_FBM0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FBM0(base) && (--timeout > 0) );


#define WAIT_FBM0_HIGH(base) \
    while (! READ_FBM0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS1R
//
// Notes : Register Fs1r at offset 0x20C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_FS_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x20C, val)

#define SET_BITS_FS_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  mask ); \
   } 

#define CLEAR_BITS_FS_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C,  val & ~mask ); \
   } 

#define READ_REGISTER_FS_1R( base ) \
     READ_REGISTER_ULONG( base + 0x20C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC27_MASK 0x8000000U
#define FSC27_OFFSET 27
#define FSC27_START_BIT 27
#define FSC27_WIDTH 1


#define FS_1R_REG 0x20C

typedef enum fsc27 {
    FSC_2_7_0,
    FSC_2_7_1
} FSC_27_T ;
#define WRITE_FSC27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC27_MASK) | ((val << FSC27_START_BIT) & FSC27_MASK )); \
   } 

#define ENABLE_FSC27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC27_MASK ); \
   } 

#define DISABLE_FSC27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC27_MASK ); \
   } 

#define READ_FSC27(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC27_MASK) >> FSC27_START_BIT )

#define WHEN_FSC27_HIGH(base) \
     if ( READ_FSC27(base) )


#define UNLESS_FSC27_HIGH(base) \
     if (! READ_FSC27(base) )


#define WAIT_FSC27_LOW(base) \
    while ( READ_FSC27(base) );


#define WAIT_FSC27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC27(base) && (--timeout > 0) );


#define WAIT_FSC27_HIGH(base) \
    while (! READ_FSC27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC26_MASK 0x4000000U
#define FSC26_OFFSET 26
#define FSC26_START_BIT 26
#define FSC26_WIDTH 1



typedef enum fsc26 {
    FSC_2_6_0,
    FSC_2_6_1
} FSC_26_T ;
#define WRITE_FSC26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC26_MASK) | ((val << FSC26_START_BIT) & FSC26_MASK )); \
   } 

#define ENABLE_FSC26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC26_MASK ); \
   } 

#define DISABLE_FSC26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC26_MASK ); \
   } 

#define READ_FSC26(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC26_MASK) >> FSC26_START_BIT )

#define WHEN_FSC26_HIGH(base) \
     if ( READ_FSC26(base) )


#define UNLESS_FSC26_HIGH(base) \
     if (! READ_FSC26(base) )


#define WAIT_FSC26_LOW(base) \
    while ( READ_FSC26(base) );


#define WAIT_FSC26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC26(base) && (--timeout > 0) );


#define WAIT_FSC26_HIGH(base) \
    while (! READ_FSC26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC25_MASK 0x2000000U
#define FSC25_OFFSET 25
#define FSC25_START_BIT 25
#define FSC25_WIDTH 1



typedef enum fsc25 {
    FSC_2_5_0,
    FSC_2_5_1
} FSC_25_T ;
#define WRITE_FSC25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC25_MASK) | ((val << FSC25_START_BIT) & FSC25_MASK )); \
   } 

#define ENABLE_FSC25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC25_MASK ); \
   } 

#define DISABLE_FSC25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC25_MASK ); \
   } 

#define READ_FSC25(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC25_MASK) >> FSC25_START_BIT )

#define WHEN_FSC25_HIGH(base) \
     if ( READ_FSC25(base) )


#define UNLESS_FSC25_HIGH(base) \
     if (! READ_FSC25(base) )


#define WAIT_FSC25_LOW(base) \
    while ( READ_FSC25(base) );


#define WAIT_FSC25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC25(base) && (--timeout > 0) );


#define WAIT_FSC25_HIGH(base) \
    while (! READ_FSC25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC24_MASK 0x1000000U
#define FSC24_OFFSET 24
#define FSC24_START_BIT 24
#define FSC24_WIDTH 1



typedef enum fsc24 {
    FSC_2_4_0,
    FSC_2_4_1
} FSC_24_T ;
#define WRITE_FSC24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC24_MASK) | ((val << FSC24_START_BIT) & FSC24_MASK )); \
   } 

#define ENABLE_FSC24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC24_MASK ); \
   } 

#define DISABLE_FSC24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC24_MASK ); \
   } 

#define READ_FSC24(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC24_MASK) >> FSC24_START_BIT )

#define WHEN_FSC24_HIGH(base) \
     if ( READ_FSC24(base) )


#define UNLESS_FSC24_HIGH(base) \
     if (! READ_FSC24(base) )


#define WAIT_FSC24_LOW(base) \
    while ( READ_FSC24(base) );


#define WAIT_FSC24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC24(base) && (--timeout > 0) );


#define WAIT_FSC24_HIGH(base) \
    while (! READ_FSC24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC23_MASK 0x800000U
#define FSC23_OFFSET 23
#define FSC23_START_BIT 23
#define FSC23_WIDTH 1



typedef enum fsc23 {
    FSC_2_3_0,
    FSC_2_3_1
} FSC_23_T ;
#define WRITE_FSC23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC23_MASK) | ((val << FSC23_START_BIT) & FSC23_MASK )); \
   } 

#define ENABLE_FSC23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC23_MASK ); \
   } 

#define DISABLE_FSC23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC23_MASK ); \
   } 

#define READ_FSC23(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC23_MASK) >> FSC23_START_BIT )

#define WHEN_FSC23_HIGH(base) \
     if ( READ_FSC23(base) )


#define UNLESS_FSC23_HIGH(base) \
     if (! READ_FSC23(base) )


#define WAIT_FSC23_LOW(base) \
    while ( READ_FSC23(base) );


#define WAIT_FSC23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC23(base) && (--timeout > 0) );


#define WAIT_FSC23_HIGH(base) \
    while (! READ_FSC23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC22_MASK 0x400000U
#define FSC22_OFFSET 22
#define FSC22_START_BIT 22
#define FSC22_WIDTH 1



typedef enum fsc22 {
    FSC_2_2_0,
    FSC_2_2_1
} FSC_22_T ;
#define WRITE_FSC22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC22_MASK) | ((val << FSC22_START_BIT) & FSC22_MASK )); \
   } 

#define ENABLE_FSC22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC22_MASK ); \
   } 

#define DISABLE_FSC22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC22_MASK ); \
   } 

#define READ_FSC22(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC22_MASK) >> FSC22_START_BIT )

#define WHEN_FSC22_HIGH(base) \
     if ( READ_FSC22(base) )


#define UNLESS_FSC22_HIGH(base) \
     if (! READ_FSC22(base) )


#define WAIT_FSC22_LOW(base) \
    while ( READ_FSC22(base) );


#define WAIT_FSC22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC22(base) && (--timeout > 0) );


#define WAIT_FSC22_HIGH(base) \
    while (! READ_FSC22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC21_MASK 0x200000U
#define FSC21_OFFSET 21
#define FSC21_START_BIT 21
#define FSC21_WIDTH 1



typedef enum fsc21 {
    FSC_2_1_0,
    FSC_2_1_1
} FSC_21_T ;
#define WRITE_FSC21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC21_MASK) | ((val << FSC21_START_BIT) & FSC21_MASK )); \
   } 

#define ENABLE_FSC21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC21_MASK ); \
   } 

#define DISABLE_FSC21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC21_MASK ); \
   } 

#define READ_FSC21(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC21_MASK) >> FSC21_START_BIT )

#define WHEN_FSC21_HIGH(base) \
     if ( READ_FSC21(base) )


#define UNLESS_FSC21_HIGH(base) \
     if (! READ_FSC21(base) )


#define WAIT_FSC21_LOW(base) \
    while ( READ_FSC21(base) );


#define WAIT_FSC21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC21(base) && (--timeout > 0) );


#define WAIT_FSC21_HIGH(base) \
    while (! READ_FSC21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC20_MASK 0x100000U
#define FSC20_OFFSET 20
#define FSC20_START_BIT 20
#define FSC20_WIDTH 1



typedef enum fsc20 {
    FSC_2_0_0,
    FSC_2_0_1
} FSC_20_T ;
#define WRITE_FSC20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC20_MASK) | ((val << FSC20_START_BIT) & FSC20_MASK )); \
   } 

#define ENABLE_FSC20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC20_MASK ); \
   } 

#define DISABLE_FSC20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC20_MASK ); \
   } 

#define READ_FSC20(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC20_MASK) >> FSC20_START_BIT )

#define WHEN_FSC20_HIGH(base) \
     if ( READ_FSC20(base) )


#define UNLESS_FSC20_HIGH(base) \
     if (! READ_FSC20(base) )


#define WAIT_FSC20_LOW(base) \
    while ( READ_FSC20(base) );


#define WAIT_FSC20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC20(base) && (--timeout > 0) );


#define WAIT_FSC20_HIGH(base) \
    while (! READ_FSC20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC19_MASK 0x80000U
#define FSC19_OFFSET 19
#define FSC19_START_BIT 19
#define FSC19_WIDTH 1



typedef enum fsc19 {
    FSC_1_9_0,
    FSC_1_9_1
} FSC_19_T ;
#define WRITE_FSC19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC19_MASK) | ((val << FSC19_START_BIT) & FSC19_MASK )); \
   } 

#define ENABLE_FSC19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC19_MASK ); \
   } 

#define DISABLE_FSC19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC19_MASK ); \
   } 

#define READ_FSC19(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC19_MASK) >> FSC19_START_BIT )

#define WHEN_FSC19_HIGH(base) \
     if ( READ_FSC19(base) )


#define UNLESS_FSC19_HIGH(base) \
     if (! READ_FSC19(base) )


#define WAIT_FSC19_LOW(base) \
    while ( READ_FSC19(base) );


#define WAIT_FSC19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC19(base) && (--timeout > 0) );


#define WAIT_FSC19_HIGH(base) \
    while (! READ_FSC19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC18_MASK 0x40000U
#define FSC18_OFFSET 18
#define FSC18_START_BIT 18
#define FSC18_WIDTH 1



typedef enum fsc18 {
    FSC_1_8_0,
    FSC_1_8_1
} FSC_18_T ;
#define WRITE_FSC18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC18_MASK) | ((val << FSC18_START_BIT) & FSC18_MASK )); \
   } 

#define ENABLE_FSC18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC18_MASK ); \
   } 

#define DISABLE_FSC18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC18_MASK ); \
   } 

#define READ_FSC18(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC18_MASK) >> FSC18_START_BIT )

#define WHEN_FSC18_HIGH(base) \
     if ( READ_FSC18(base) )


#define UNLESS_FSC18_HIGH(base) \
     if (! READ_FSC18(base) )


#define WAIT_FSC18_LOW(base) \
    while ( READ_FSC18(base) );


#define WAIT_FSC18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC18(base) && (--timeout > 0) );


#define WAIT_FSC18_HIGH(base) \
    while (! READ_FSC18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC17_MASK 0x20000U
#define FSC17_OFFSET 17
#define FSC17_START_BIT 17
#define FSC17_WIDTH 1



typedef enum fsc17 {
    FSC_1_7_0,
    FSC_1_7_1
} FSC_17_T ;
#define WRITE_FSC17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC17_MASK) | ((val << FSC17_START_BIT) & FSC17_MASK )); \
   } 

#define ENABLE_FSC17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC17_MASK ); \
   } 

#define DISABLE_FSC17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC17_MASK ); \
   } 

#define READ_FSC17(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC17_MASK) >> FSC17_START_BIT )

#define WHEN_FSC17_HIGH(base) \
     if ( READ_FSC17(base) )


#define UNLESS_FSC17_HIGH(base) \
     if (! READ_FSC17(base) )


#define WAIT_FSC17_LOW(base) \
    while ( READ_FSC17(base) );


#define WAIT_FSC17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC17(base) && (--timeout > 0) );


#define WAIT_FSC17_HIGH(base) \
    while (! READ_FSC17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC16_MASK 0x10000U
#define FSC16_OFFSET 16
#define FSC16_START_BIT 16
#define FSC16_WIDTH 1



typedef enum fsc16 {
    FSC_1_6_0,
    FSC_1_6_1
} FSC_16_T ;
#define WRITE_FSC16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC16_MASK) | ((val << FSC16_START_BIT) & FSC16_MASK )); \
   } 

#define ENABLE_FSC16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC16_MASK ); \
   } 

#define DISABLE_FSC16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC16_MASK ); \
   } 

#define READ_FSC16(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC16_MASK) >> FSC16_START_BIT )

#define WHEN_FSC16_HIGH(base) \
     if ( READ_FSC16(base) )


#define UNLESS_FSC16_HIGH(base) \
     if (! READ_FSC16(base) )


#define WAIT_FSC16_LOW(base) \
    while ( READ_FSC16(base) );


#define WAIT_FSC16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC16(base) && (--timeout > 0) );


#define WAIT_FSC16_HIGH(base) \
    while (! READ_FSC16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC15_MASK 0x8000U
#define FSC15_OFFSET 15
#define FSC15_START_BIT 15
#define FSC15_WIDTH 1



typedef enum fsc15 {
    FSC_1_5_0,
    FSC_1_5_1
} FSC_15_T ;
#define WRITE_FSC15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC15_MASK) | ((val << FSC15_START_BIT) & FSC15_MASK )); \
   } 

#define ENABLE_FSC15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC15_MASK ); \
   } 

#define DISABLE_FSC15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC15_MASK ); \
   } 

#define READ_FSC15(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC15_MASK) >> FSC15_START_BIT )

#define WHEN_FSC15_HIGH(base) \
     if ( READ_FSC15(base) )


#define UNLESS_FSC15_HIGH(base) \
     if (! READ_FSC15(base) )


#define WAIT_FSC15_LOW(base) \
    while ( READ_FSC15(base) );


#define WAIT_FSC15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC15(base) && (--timeout > 0) );


#define WAIT_FSC15_HIGH(base) \
    while (! READ_FSC15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC14_MASK 0x4000U
#define FSC14_OFFSET 14
#define FSC14_START_BIT 14
#define FSC14_WIDTH 1



typedef enum fsc14 {
    FSC_1_4_0,
    FSC_1_4_1
} FSC_14_T ;
#define WRITE_FSC14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC14_MASK) | ((val << FSC14_START_BIT) & FSC14_MASK )); \
   } 

#define ENABLE_FSC14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC14_MASK ); \
   } 

#define DISABLE_FSC14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC14_MASK ); \
   } 

#define READ_FSC14(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC14_MASK) >> FSC14_START_BIT )

#define WHEN_FSC14_HIGH(base) \
     if ( READ_FSC14(base) )


#define UNLESS_FSC14_HIGH(base) \
     if (! READ_FSC14(base) )


#define WAIT_FSC14_LOW(base) \
    while ( READ_FSC14(base) );


#define WAIT_FSC14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC14(base) && (--timeout > 0) );


#define WAIT_FSC14_HIGH(base) \
    while (! READ_FSC14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC13_MASK 0x2000U
#define FSC13_OFFSET 13
#define FSC13_START_BIT 13
#define FSC13_WIDTH 1



typedef enum fsc13 {
    FSC_1_3_0,
    FSC_1_3_1
} FSC_13_T ;
#define WRITE_FSC13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC13_MASK) | ((val << FSC13_START_BIT) & FSC13_MASK )); \
   } 

#define ENABLE_FSC13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC13_MASK ); \
   } 

#define DISABLE_FSC13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC13_MASK ); \
   } 

#define READ_FSC13(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC13_MASK) >> FSC13_START_BIT )

#define WHEN_FSC13_HIGH(base) \
     if ( READ_FSC13(base) )


#define UNLESS_FSC13_HIGH(base) \
     if (! READ_FSC13(base) )


#define WAIT_FSC13_LOW(base) \
    while ( READ_FSC13(base) );


#define WAIT_FSC13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC13(base) && (--timeout > 0) );


#define WAIT_FSC13_HIGH(base) \
    while (! READ_FSC13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC12_MASK 0x1000U
#define FSC12_OFFSET 12
#define FSC12_START_BIT 12
#define FSC12_WIDTH 1



typedef enum fsc12 {
    FSC_1_2_0,
    FSC_1_2_1
} FSC_12_T ;
#define WRITE_FSC12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC12_MASK) | ((val << FSC12_START_BIT) & FSC12_MASK )); \
   } 

#define ENABLE_FSC12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC12_MASK ); \
   } 

#define DISABLE_FSC12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC12_MASK ); \
   } 

#define READ_FSC12(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC12_MASK) >> FSC12_START_BIT )

#define WHEN_FSC12_HIGH(base) \
     if ( READ_FSC12(base) )


#define UNLESS_FSC12_HIGH(base) \
     if (! READ_FSC12(base) )


#define WAIT_FSC12_LOW(base) \
    while ( READ_FSC12(base) );


#define WAIT_FSC12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC12(base) && (--timeout > 0) );


#define WAIT_FSC12_HIGH(base) \
    while (! READ_FSC12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC11_MASK 0x800U
#define FSC11_OFFSET 11
#define FSC11_START_BIT 11
#define FSC11_WIDTH 1



typedef enum fsc11 {
    FSC_1_1_0,
    FSC_1_1_1
} FSC_11_T ;
#define WRITE_FSC11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC11_MASK) | ((val << FSC11_START_BIT) & FSC11_MASK )); \
   } 

#define ENABLE_FSC11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC11_MASK ); \
   } 

#define DISABLE_FSC11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC11_MASK ); \
   } 

#define READ_FSC11(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC11_MASK) >> FSC11_START_BIT )

#define WHEN_FSC11_HIGH(base) \
     if ( READ_FSC11(base) )


#define UNLESS_FSC11_HIGH(base) \
     if (! READ_FSC11(base) )


#define WAIT_FSC11_LOW(base) \
    while ( READ_FSC11(base) );


#define WAIT_FSC11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC11(base) && (--timeout > 0) );


#define WAIT_FSC11_HIGH(base) \
    while (! READ_FSC11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC10_MASK 0x400U
#define FSC10_OFFSET 10
#define FSC10_START_BIT 10
#define FSC10_WIDTH 1



typedef enum fsc10 {
    FSC_1_0_0,
    FSC_1_0_1
} FSC_10_T ;
#define WRITE_FSC10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC10_MASK) | ((val << FSC10_START_BIT) & FSC10_MASK )); \
   } 

#define ENABLE_FSC10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC10_MASK ); \
   } 

#define DISABLE_FSC10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC10_MASK ); \
   } 

#define READ_FSC10(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC10_MASK) >> FSC10_START_BIT )

#define WHEN_FSC10_HIGH(base) \
     if ( READ_FSC10(base) )


#define UNLESS_FSC10_HIGH(base) \
     if (! READ_FSC10(base) )


#define WAIT_FSC10_LOW(base) \
    while ( READ_FSC10(base) );


#define WAIT_FSC10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC10(base) && (--timeout > 0) );


#define WAIT_FSC10_HIGH(base) \
    while (! READ_FSC10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC9_MASK 0x200U
#define FSC9_OFFSET 9
#define FSC9_START_BIT 9
#define FSC9_WIDTH 1



typedef enum fsc9 {
    FSC_9_0,
    FSC_9_1
} FSC_9_T ;
#define WRITE_FSC9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC9_MASK) | ((val << FSC9_START_BIT) & FSC9_MASK )); \
   } 

#define ENABLE_FSC9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC9_MASK ); \
   } 

#define DISABLE_FSC9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC9_MASK ); \
   } 

#define READ_FSC9(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC9_MASK) >> FSC9_START_BIT )

#define WHEN_FSC9_HIGH(base) \
     if ( READ_FSC9(base) )


#define UNLESS_FSC9_HIGH(base) \
     if (! READ_FSC9(base) )


#define WAIT_FSC9_LOW(base) \
    while ( READ_FSC9(base) );


#define WAIT_FSC9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC9(base) && (--timeout > 0) );


#define WAIT_FSC9_HIGH(base) \
    while (! READ_FSC9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC8_MASK 0x100U
#define FSC8_OFFSET 8
#define FSC8_START_BIT 8
#define FSC8_WIDTH 1



typedef enum fsc8 {
    FSC_8_0,
    FSC_8_1
} FSC_8_T ;
#define WRITE_FSC8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC8_MASK) | ((val << FSC8_START_BIT) & FSC8_MASK )); \
   } 

#define ENABLE_FSC8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC8_MASK ); \
   } 

#define DISABLE_FSC8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC8_MASK ); \
   } 

#define READ_FSC8(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC8_MASK) >> FSC8_START_BIT )

#define WHEN_FSC8_HIGH(base) \
     if ( READ_FSC8(base) )


#define UNLESS_FSC8_HIGH(base) \
     if (! READ_FSC8(base) )


#define WAIT_FSC8_LOW(base) \
    while ( READ_FSC8(base) );


#define WAIT_FSC8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC8(base) && (--timeout > 0) );


#define WAIT_FSC8_HIGH(base) \
    while (! READ_FSC8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC7_MASK 0x80U
#define FSC7_OFFSET 7
#define FSC7_START_BIT 7
#define FSC7_WIDTH 1



typedef enum fsc7 {
    FSC_7_0,
    FSC_7_1
} FSC_7_T ;
#define WRITE_FSC7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC7_MASK) | ((val << FSC7_START_BIT) & FSC7_MASK )); \
   } 

#define ENABLE_FSC7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC7_MASK ); \
   } 

#define DISABLE_FSC7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC7_MASK ); \
   } 

#define READ_FSC7(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC7_MASK) >> FSC7_START_BIT )

#define WHEN_FSC7_HIGH(base) \
     if ( READ_FSC7(base) )


#define UNLESS_FSC7_HIGH(base) \
     if (! READ_FSC7(base) )


#define WAIT_FSC7_LOW(base) \
    while ( READ_FSC7(base) );


#define WAIT_FSC7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC7(base) && (--timeout > 0) );


#define WAIT_FSC7_HIGH(base) \
    while (! READ_FSC7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC6_MASK 0x40U
#define FSC6_OFFSET 6
#define FSC6_START_BIT 6
#define FSC6_WIDTH 1



typedef enum fsc6 {
    FSC_6_0,
    FSC_6_1
} FSC_6_T ;
#define WRITE_FSC6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC6_MASK) | ((val << FSC6_START_BIT) & FSC6_MASK )); \
   } 

#define ENABLE_FSC6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC6_MASK ); \
   } 

#define DISABLE_FSC6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC6_MASK ); \
   } 

#define READ_FSC6(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC6_MASK) >> FSC6_START_BIT )

#define WHEN_FSC6_HIGH(base) \
     if ( READ_FSC6(base) )


#define UNLESS_FSC6_HIGH(base) \
     if (! READ_FSC6(base) )


#define WAIT_FSC6_LOW(base) \
    while ( READ_FSC6(base) );


#define WAIT_FSC6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC6(base) && (--timeout > 0) );


#define WAIT_FSC6_HIGH(base) \
    while (! READ_FSC6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC5_MASK 0x20U
#define FSC5_OFFSET 5
#define FSC5_START_BIT 5
#define FSC5_WIDTH 1



typedef enum fsc5 {
    FSC_5_0,
    FSC_5_1
} FSC_5_T ;
#define WRITE_FSC5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC5_MASK) | ((val << FSC5_START_BIT) & FSC5_MASK )); \
   } 

#define ENABLE_FSC5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC5_MASK ); \
   } 

#define DISABLE_FSC5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC5_MASK ); \
   } 

#define READ_FSC5(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC5_MASK) >> FSC5_START_BIT )

#define WHEN_FSC5_HIGH(base) \
     if ( READ_FSC5(base) )


#define UNLESS_FSC5_HIGH(base) \
     if (! READ_FSC5(base) )


#define WAIT_FSC5_LOW(base) \
    while ( READ_FSC5(base) );


#define WAIT_FSC5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC5(base) && (--timeout > 0) );


#define WAIT_FSC5_HIGH(base) \
    while (! READ_FSC5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC4_MASK 0x10U
#define FSC4_OFFSET 4
#define FSC4_START_BIT 4
#define FSC4_WIDTH 1



typedef enum fsc4 {
    FSC_4_0,
    FSC_4_1
} FSC_4_T ;
#define WRITE_FSC4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC4_MASK) | ((val << FSC4_START_BIT) & FSC4_MASK )); \
   } 

#define ENABLE_FSC4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC4_MASK ); \
   } 

#define DISABLE_FSC4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC4_MASK ); \
   } 

#define READ_FSC4(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC4_MASK) >> FSC4_START_BIT )

#define WHEN_FSC4_HIGH(base) \
     if ( READ_FSC4(base) )


#define UNLESS_FSC4_HIGH(base) \
     if (! READ_FSC4(base) )


#define WAIT_FSC4_LOW(base) \
    while ( READ_FSC4(base) );


#define WAIT_FSC4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC4(base) && (--timeout > 0) );


#define WAIT_FSC4_HIGH(base) \
    while (! READ_FSC4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC3_MASK 0x8U
#define FSC3_OFFSET 3
#define FSC3_START_BIT 3
#define FSC3_WIDTH 1



typedef enum fsc3 {
    FSC_3_0,
    FSC_3_1
} FSC_3_T ;
#define WRITE_FSC3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC3_MASK) | ((val << FSC3_START_BIT) & FSC3_MASK )); \
   } 

#define ENABLE_FSC3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC3_MASK ); \
   } 

#define DISABLE_FSC3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC3_MASK ); \
   } 

#define READ_FSC3(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC3_MASK) >> FSC3_START_BIT )

#define WHEN_FSC3_HIGH(base) \
     if ( READ_FSC3(base) )


#define UNLESS_FSC3_HIGH(base) \
     if (! READ_FSC3(base) )


#define WAIT_FSC3_LOW(base) \
    while ( READ_FSC3(base) );


#define WAIT_FSC3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC3(base) && (--timeout > 0) );


#define WAIT_FSC3_HIGH(base) \
    while (! READ_FSC3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC2_MASK 0x4U
#define FSC2_OFFSET 2
#define FSC2_START_BIT 2
#define FSC2_WIDTH 1



typedef enum fsc2 {
    FSC_2_0,
    FSC_2_1
} FSC_2_T ;
#define WRITE_FSC2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC2_MASK) | ((val << FSC2_START_BIT) & FSC2_MASK )); \
   } 

#define ENABLE_FSC2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC2_MASK ); \
   } 

#define DISABLE_FSC2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC2_MASK ); \
   } 

#define READ_FSC2(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC2_MASK) >> FSC2_START_BIT )

#define WHEN_FSC2_HIGH(base) \
     if ( READ_FSC2(base) )


#define UNLESS_FSC2_HIGH(base) \
     if (! READ_FSC2(base) )


#define WAIT_FSC2_LOW(base) \
    while ( READ_FSC2(base) );


#define WAIT_FSC2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC2(base) && (--timeout > 0) );


#define WAIT_FSC2_HIGH(base) \
    while (! READ_FSC2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC1_MASK 0x2U
#define FSC1_OFFSET 1
#define FSC1_START_BIT 1
#define FSC1_WIDTH 1



typedef enum fsc1 {
    FSC_1_0,
    FSC_1_1
} FSC_1_T ;
#define WRITE_FSC1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC1_MASK) | ((val << FSC1_START_BIT) & FSC1_MASK )); \
   } 

#define ENABLE_FSC1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC1_MASK ); \
   } 

#define DISABLE_FSC1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC1_MASK ); \
   } 

#define READ_FSC1(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC1_MASK) >> FSC1_START_BIT )

#define WHEN_FSC1_HIGH(base) \
     if ( READ_FSC1(base) )


#define UNLESS_FSC1_HIGH(base) \
     if (! READ_FSC1(base) )


#define WAIT_FSC1_LOW(base) \
    while ( READ_FSC1(base) );


#define WAIT_FSC1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC1(base) && (--timeout > 0) );


#define WAIT_FSC1_HIGH(base) \
    while (! READ_FSC1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fs1r
//
// Return the value of register FS_1R
//
// Notes : Register filter scale register (FS1R) at the offset 0x20C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter scale configuration 
    // 
#define FSC0_MASK 0x1U
#define FSC0_OFFSET 0
#define FSC0_START_BIT 0
#define FSC0_WIDTH 1



typedef enum fsc0 {
    FSC_0_0,
    FSC_0_1
} FSC_0_T ;
#define WRITE_FSC0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, (OldValue & ~FSC0_MASK) | ((val << FSC0_START_BIT) & FSC0_MASK )); \
   } 

#define ENABLE_FSC0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x20C); \
     WRITE_REGISTER_ULONG( base + 0x20C, val |  FSC0_MASK ); \
   } 

#define DISABLE_FSC0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x20C ); \
     WRITE_REGISTER_ULONG( base + 0x20C, val & ~FSC0_MASK ); \
   } 

#define READ_FSC0(base) \
    ((READ_REGISTER_ULONG(base + 0x20C) & FSC0_MASK) >> FSC0_START_BIT )

#define WHEN_FSC0_HIGH(base) \
     if ( READ_FSC0(base) )


#define UNLESS_FSC0_HIGH(base) \
     if (! READ_FSC0(base) )


#define WAIT_FSC0_LOW(base) \
    while ( READ_FSC0(base) );


#define WAIT_FSC0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FSC0(base) && (--timeout > 0) );


#define WAIT_FSC0_HIGH(base) \
    while (! READ_FSC0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA1R
//
// Notes : Register Ffa1r at offset 0x214
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_FFA_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x214, val)

#define SET_BITS_FFA_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  mask ); \
   } 

#define CLEAR_BITS_FFA_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214,  val & ~mask ); \
   } 

#define READ_REGISTER_FFA_1R( base ) \
     READ_REGISTER_ULONG( base + 0x214) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 27 
    // 
#define FFA27_MASK 0x8000000U
#define FFA27_OFFSET 27
#define FFA27_START_BIT 27
#define FFA27_WIDTH 1


#define FFA_1R_REG 0x214

typedef enum ffa27 {
    FFA_2_7_0,
    FFA_2_7_1
} FFA_27_T ;
#define WRITE_FFA27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA27_MASK) | ((val << FFA27_START_BIT) & FFA27_MASK )); \
   } 

#define ENABLE_FFA27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA27_MASK ); \
   } 

#define DISABLE_FFA27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA27_MASK ); \
   } 

#define READ_FFA27(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA27_MASK) >> FFA27_START_BIT )

#define WHEN_FFA27_HIGH(base) \
     if ( READ_FFA27(base) )


#define UNLESS_FFA27_HIGH(base) \
     if (! READ_FFA27(base) )


#define WAIT_FFA27_LOW(base) \
    while ( READ_FFA27(base) );


#define WAIT_FFA27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA27(base) && (--timeout > 0) );


#define WAIT_FFA27_HIGH(base) \
    while (! READ_FFA27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 26 
    // 
#define FFA26_MASK 0x4000000U
#define FFA26_OFFSET 26
#define FFA26_START_BIT 26
#define FFA26_WIDTH 1



typedef enum ffa26 {
    FFA_2_6_0,
    FFA_2_6_1
} FFA_26_T ;
#define WRITE_FFA26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA26_MASK) | ((val << FFA26_START_BIT) & FFA26_MASK )); \
   } 

#define ENABLE_FFA26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA26_MASK ); \
   } 

#define DISABLE_FFA26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA26_MASK ); \
   } 

#define READ_FFA26(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA26_MASK) >> FFA26_START_BIT )

#define WHEN_FFA26_HIGH(base) \
     if ( READ_FFA26(base) )


#define UNLESS_FFA26_HIGH(base) \
     if (! READ_FFA26(base) )


#define WAIT_FFA26_LOW(base) \
    while ( READ_FFA26(base) );


#define WAIT_FFA26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA26(base) && (--timeout > 0) );


#define WAIT_FFA26_HIGH(base) \
    while (! READ_FFA26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 25 
    // 
#define FFA25_MASK 0x2000000U
#define FFA25_OFFSET 25
#define FFA25_START_BIT 25
#define FFA25_WIDTH 1



typedef enum ffa25 {
    FFA_2_5_0,
    FFA_2_5_1
} FFA_25_T ;
#define WRITE_FFA25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA25_MASK) | ((val << FFA25_START_BIT) & FFA25_MASK )); \
   } 

#define ENABLE_FFA25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA25_MASK ); \
   } 

#define DISABLE_FFA25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA25_MASK ); \
   } 

#define READ_FFA25(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA25_MASK) >> FFA25_START_BIT )

#define WHEN_FFA25_HIGH(base) \
     if ( READ_FFA25(base) )


#define UNLESS_FFA25_HIGH(base) \
     if (! READ_FFA25(base) )


#define WAIT_FFA25_LOW(base) \
    while ( READ_FFA25(base) );


#define WAIT_FFA25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA25(base) && (--timeout > 0) );


#define WAIT_FFA25_HIGH(base) \
    while (! READ_FFA25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 24 
    // 
#define FFA24_MASK 0x1000000U
#define FFA24_OFFSET 24
#define FFA24_START_BIT 24
#define FFA24_WIDTH 1



typedef enum ffa24 {
    FFA_2_4_0,
    FFA_2_4_1
} FFA_24_T ;
#define WRITE_FFA24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA24_MASK) | ((val << FFA24_START_BIT) & FFA24_MASK )); \
   } 

#define ENABLE_FFA24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA24_MASK ); \
   } 

#define DISABLE_FFA24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA24_MASK ); \
   } 

#define READ_FFA24(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA24_MASK) >> FFA24_START_BIT )

#define WHEN_FFA24_HIGH(base) \
     if ( READ_FFA24(base) )


#define UNLESS_FFA24_HIGH(base) \
     if (! READ_FFA24(base) )


#define WAIT_FFA24_LOW(base) \
    while ( READ_FFA24(base) );


#define WAIT_FFA24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA24(base) && (--timeout > 0) );


#define WAIT_FFA24_HIGH(base) \
    while (! READ_FFA24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 23 
    // 
#define FFA23_MASK 0x800000U
#define FFA23_OFFSET 23
#define FFA23_START_BIT 23
#define FFA23_WIDTH 1



typedef enum ffa23 {
    FFA_2_3_0,
    FFA_2_3_1
} FFA_23_T ;
#define WRITE_FFA23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA23_MASK) | ((val << FFA23_START_BIT) & FFA23_MASK )); \
   } 

#define ENABLE_FFA23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA23_MASK ); \
   } 

#define DISABLE_FFA23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA23_MASK ); \
   } 

#define READ_FFA23(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA23_MASK) >> FFA23_START_BIT )

#define WHEN_FFA23_HIGH(base) \
     if ( READ_FFA23(base) )


#define UNLESS_FFA23_HIGH(base) \
     if (! READ_FFA23(base) )


#define WAIT_FFA23_LOW(base) \
    while ( READ_FFA23(base) );


#define WAIT_FFA23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA23(base) && (--timeout > 0) );


#define WAIT_FFA23_HIGH(base) \
    while (! READ_FFA23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 22 
    // 
#define FFA22_MASK 0x400000U
#define FFA22_OFFSET 22
#define FFA22_START_BIT 22
#define FFA22_WIDTH 1



typedef enum ffa22 {
    FFA_2_2_0,
    FFA_2_2_1
} FFA_22_T ;
#define WRITE_FFA22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA22_MASK) | ((val << FFA22_START_BIT) & FFA22_MASK )); \
   } 

#define ENABLE_FFA22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA22_MASK ); \
   } 

#define DISABLE_FFA22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA22_MASK ); \
   } 

#define READ_FFA22(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA22_MASK) >> FFA22_START_BIT )

#define WHEN_FFA22_HIGH(base) \
     if ( READ_FFA22(base) )


#define UNLESS_FFA22_HIGH(base) \
     if (! READ_FFA22(base) )


#define WAIT_FFA22_LOW(base) \
    while ( READ_FFA22(base) );


#define WAIT_FFA22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA22(base) && (--timeout > 0) );


#define WAIT_FFA22_HIGH(base) \
    while (! READ_FFA22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 21 
    // 
#define FFA21_MASK 0x200000U
#define FFA21_OFFSET 21
#define FFA21_START_BIT 21
#define FFA21_WIDTH 1



typedef enum ffa21 {
    FFA_2_1_0,
    FFA_2_1_1
} FFA_21_T ;
#define WRITE_FFA21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA21_MASK) | ((val << FFA21_START_BIT) & FFA21_MASK )); \
   } 

#define ENABLE_FFA21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA21_MASK ); \
   } 

#define DISABLE_FFA21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA21_MASK ); \
   } 

#define READ_FFA21(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA21_MASK) >> FFA21_START_BIT )

#define WHEN_FFA21_HIGH(base) \
     if ( READ_FFA21(base) )


#define UNLESS_FFA21_HIGH(base) \
     if (! READ_FFA21(base) )


#define WAIT_FFA21_LOW(base) \
    while ( READ_FFA21(base) );


#define WAIT_FFA21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA21(base) && (--timeout > 0) );


#define WAIT_FFA21_HIGH(base) \
    while (! READ_FFA21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 20 
    // 
#define FFA20_MASK 0x100000U
#define FFA20_OFFSET 20
#define FFA20_START_BIT 20
#define FFA20_WIDTH 1



typedef enum ffa20 {
    FFA_2_0_0,
    FFA_2_0_1
} FFA_20_T ;
#define WRITE_FFA20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA20_MASK) | ((val << FFA20_START_BIT) & FFA20_MASK )); \
   } 

#define ENABLE_FFA20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA20_MASK ); \
   } 

#define DISABLE_FFA20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA20_MASK ); \
   } 

#define READ_FFA20(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA20_MASK) >> FFA20_START_BIT )

#define WHEN_FFA20_HIGH(base) \
     if ( READ_FFA20(base) )


#define UNLESS_FFA20_HIGH(base) \
     if (! READ_FFA20(base) )


#define WAIT_FFA20_LOW(base) \
    while ( READ_FFA20(base) );


#define WAIT_FFA20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA20(base) && (--timeout > 0) );


#define WAIT_FFA20_HIGH(base) \
    while (! READ_FFA20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 19 
    // 
#define FFA19_MASK 0x80000U
#define FFA19_OFFSET 19
#define FFA19_START_BIT 19
#define FFA19_WIDTH 1



typedef enum ffa19 {
    FFA_1_9_0,
    FFA_1_9_1
} FFA_19_T ;
#define WRITE_FFA19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA19_MASK) | ((val << FFA19_START_BIT) & FFA19_MASK )); \
   } 

#define ENABLE_FFA19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA19_MASK ); \
   } 

#define DISABLE_FFA19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA19_MASK ); \
   } 

#define READ_FFA19(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA19_MASK) >> FFA19_START_BIT )

#define WHEN_FFA19_HIGH(base) \
     if ( READ_FFA19(base) )


#define UNLESS_FFA19_HIGH(base) \
     if (! READ_FFA19(base) )


#define WAIT_FFA19_LOW(base) \
    while ( READ_FFA19(base) );


#define WAIT_FFA19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA19(base) && (--timeout > 0) );


#define WAIT_FFA19_HIGH(base) \
    while (! READ_FFA19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 18 
    // 
#define FFA18_MASK 0x40000U
#define FFA18_OFFSET 18
#define FFA18_START_BIT 18
#define FFA18_WIDTH 1



typedef enum ffa18 {
    FFA_1_8_0,
    FFA_1_8_1
} FFA_18_T ;
#define WRITE_FFA18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA18_MASK) | ((val << FFA18_START_BIT) & FFA18_MASK )); \
   } 

#define ENABLE_FFA18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA18_MASK ); \
   } 

#define DISABLE_FFA18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA18_MASK ); \
   } 

#define READ_FFA18(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA18_MASK) >> FFA18_START_BIT )

#define WHEN_FFA18_HIGH(base) \
     if ( READ_FFA18(base) )


#define UNLESS_FFA18_HIGH(base) \
     if (! READ_FFA18(base) )


#define WAIT_FFA18_LOW(base) \
    while ( READ_FFA18(base) );


#define WAIT_FFA18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA18(base) && (--timeout > 0) );


#define WAIT_FFA18_HIGH(base) \
    while (! READ_FFA18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 17 
    // 
#define FFA17_MASK 0x20000U
#define FFA17_OFFSET 17
#define FFA17_START_BIT 17
#define FFA17_WIDTH 1



typedef enum ffa17 {
    FFA_1_7_0,
    FFA_1_7_1
} FFA_17_T ;
#define WRITE_FFA17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA17_MASK) | ((val << FFA17_START_BIT) & FFA17_MASK )); \
   } 

#define ENABLE_FFA17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA17_MASK ); \
   } 

#define DISABLE_FFA17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA17_MASK ); \
   } 

#define READ_FFA17(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA17_MASK) >> FFA17_START_BIT )

#define WHEN_FFA17_HIGH(base) \
     if ( READ_FFA17(base) )


#define UNLESS_FFA17_HIGH(base) \
     if (! READ_FFA17(base) )


#define WAIT_FFA17_LOW(base) \
    while ( READ_FFA17(base) );


#define WAIT_FFA17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA17(base) && (--timeout > 0) );


#define WAIT_FFA17_HIGH(base) \
    while (! READ_FFA17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 16 
    // 
#define FFA16_MASK 0x10000U
#define FFA16_OFFSET 16
#define FFA16_START_BIT 16
#define FFA16_WIDTH 1



typedef enum ffa16 {
    FFA_1_6_0,
    FFA_1_6_1
} FFA_16_T ;
#define WRITE_FFA16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA16_MASK) | ((val << FFA16_START_BIT) & FFA16_MASK )); \
   } 

#define ENABLE_FFA16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA16_MASK ); \
   } 

#define DISABLE_FFA16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA16_MASK ); \
   } 

#define READ_FFA16(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA16_MASK) >> FFA16_START_BIT )

#define WHEN_FFA16_HIGH(base) \
     if ( READ_FFA16(base) )


#define UNLESS_FFA16_HIGH(base) \
     if (! READ_FFA16(base) )


#define WAIT_FFA16_LOW(base) \
    while ( READ_FFA16(base) );


#define WAIT_FFA16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA16(base) && (--timeout > 0) );


#define WAIT_FFA16_HIGH(base) \
    while (! READ_FFA16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 15 
    // 
#define FFA15_MASK 0x8000U
#define FFA15_OFFSET 15
#define FFA15_START_BIT 15
#define FFA15_WIDTH 1



typedef enum ffa15 {
    FFA_1_5_0,
    FFA_1_5_1
} FFA_15_T ;
#define WRITE_FFA15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA15_MASK) | ((val << FFA15_START_BIT) & FFA15_MASK )); \
   } 

#define ENABLE_FFA15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA15_MASK ); \
   } 

#define DISABLE_FFA15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA15_MASK ); \
   } 

#define READ_FFA15(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA15_MASK) >> FFA15_START_BIT )

#define WHEN_FFA15_HIGH(base) \
     if ( READ_FFA15(base) )


#define UNLESS_FFA15_HIGH(base) \
     if (! READ_FFA15(base) )


#define WAIT_FFA15_LOW(base) \
    while ( READ_FFA15(base) );


#define WAIT_FFA15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA15(base) && (--timeout > 0) );


#define WAIT_FFA15_HIGH(base) \
    while (! READ_FFA15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 14 
    // 
#define FFA14_MASK 0x4000U
#define FFA14_OFFSET 14
#define FFA14_START_BIT 14
#define FFA14_WIDTH 1



typedef enum ffa14 {
    FFA_1_4_0,
    FFA_1_4_1
} FFA_14_T ;
#define WRITE_FFA14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA14_MASK) | ((val << FFA14_START_BIT) & FFA14_MASK )); \
   } 

#define ENABLE_FFA14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA14_MASK ); \
   } 

#define DISABLE_FFA14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA14_MASK ); \
   } 

#define READ_FFA14(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA14_MASK) >> FFA14_START_BIT )

#define WHEN_FFA14_HIGH(base) \
     if ( READ_FFA14(base) )


#define UNLESS_FFA14_HIGH(base) \
     if (! READ_FFA14(base) )


#define WAIT_FFA14_LOW(base) \
    while ( READ_FFA14(base) );


#define WAIT_FFA14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA14(base) && (--timeout > 0) );


#define WAIT_FFA14_HIGH(base) \
    while (! READ_FFA14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 13 
    // 
#define FFA13_MASK 0x2000U
#define FFA13_OFFSET 13
#define FFA13_START_BIT 13
#define FFA13_WIDTH 1



typedef enum ffa13 {
    FFA_1_3_0,
    FFA_1_3_1
} FFA_13_T ;
#define WRITE_FFA13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA13_MASK) | ((val << FFA13_START_BIT) & FFA13_MASK )); \
   } 

#define ENABLE_FFA13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA13_MASK ); \
   } 

#define DISABLE_FFA13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA13_MASK ); \
   } 

#define READ_FFA13(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA13_MASK) >> FFA13_START_BIT )

#define WHEN_FFA13_HIGH(base) \
     if ( READ_FFA13(base) )


#define UNLESS_FFA13_HIGH(base) \
     if (! READ_FFA13(base) )


#define WAIT_FFA13_LOW(base) \
    while ( READ_FFA13(base) );


#define WAIT_FFA13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA13(base) && (--timeout > 0) );


#define WAIT_FFA13_HIGH(base) \
    while (! READ_FFA13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 12 
    // 
#define FFA12_MASK 0x1000U
#define FFA12_OFFSET 12
#define FFA12_START_BIT 12
#define FFA12_WIDTH 1



typedef enum ffa12 {
    FFA_1_2_0,
    FFA_1_2_1
} FFA_12_T ;
#define WRITE_FFA12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA12_MASK) | ((val << FFA12_START_BIT) & FFA12_MASK )); \
   } 

#define ENABLE_FFA12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA12_MASK ); \
   } 

#define DISABLE_FFA12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA12_MASK ); \
   } 

#define READ_FFA12(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA12_MASK) >> FFA12_START_BIT )

#define WHEN_FFA12_HIGH(base) \
     if ( READ_FFA12(base) )


#define UNLESS_FFA12_HIGH(base) \
     if (! READ_FFA12(base) )


#define WAIT_FFA12_LOW(base) \
    while ( READ_FFA12(base) );


#define WAIT_FFA12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA12(base) && (--timeout > 0) );


#define WAIT_FFA12_HIGH(base) \
    while (! READ_FFA12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 11 
    // 
#define FFA11_MASK 0x800U
#define FFA11_OFFSET 11
#define FFA11_START_BIT 11
#define FFA11_WIDTH 1



typedef enum ffa11 {
    FFA_1_1_0,
    FFA_1_1_1
} FFA_11_T ;
#define WRITE_FFA11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA11_MASK) | ((val << FFA11_START_BIT) & FFA11_MASK )); \
   } 

#define ENABLE_FFA11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA11_MASK ); \
   } 

#define DISABLE_FFA11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA11_MASK ); \
   } 

#define READ_FFA11(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA11_MASK) >> FFA11_START_BIT )

#define WHEN_FFA11_HIGH(base) \
     if ( READ_FFA11(base) )


#define UNLESS_FFA11_HIGH(base) \
     if (! READ_FFA11(base) )


#define WAIT_FFA11_LOW(base) \
    while ( READ_FFA11(base) );


#define WAIT_FFA11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA11(base) && (--timeout > 0) );


#define WAIT_FFA11_HIGH(base) \
    while (! READ_FFA11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 10 
    // 
#define FFA10_MASK 0x400U
#define FFA10_OFFSET 10
#define FFA10_START_BIT 10
#define FFA10_WIDTH 1



typedef enum ffa10 {
    FFA_1_0_0,
    FFA_1_0_1
} FFA_10_T ;
#define WRITE_FFA10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA10_MASK) | ((val << FFA10_START_BIT) & FFA10_MASK )); \
   } 

#define ENABLE_FFA10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA10_MASK ); \
   } 

#define DISABLE_FFA10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA10_MASK ); \
   } 

#define READ_FFA10(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA10_MASK) >> FFA10_START_BIT )

#define WHEN_FFA10_HIGH(base) \
     if ( READ_FFA10(base) )


#define UNLESS_FFA10_HIGH(base) \
     if (! READ_FFA10(base) )


#define WAIT_FFA10_LOW(base) \
    while ( READ_FFA10(base) );


#define WAIT_FFA10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA10(base) && (--timeout > 0) );


#define WAIT_FFA10_HIGH(base) \
    while (! READ_FFA10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 9 
    // 
#define FFA9_MASK 0x200U
#define FFA9_OFFSET 9
#define FFA9_START_BIT 9
#define FFA9_WIDTH 1



typedef enum ffa9 {
    FFA_9_0,
    FFA_9_1
} FFA_9_T ;
#define WRITE_FFA9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA9_MASK) | ((val << FFA9_START_BIT) & FFA9_MASK )); \
   } 

#define ENABLE_FFA9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA9_MASK ); \
   } 

#define DISABLE_FFA9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA9_MASK ); \
   } 

#define READ_FFA9(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA9_MASK) >> FFA9_START_BIT )

#define WHEN_FFA9_HIGH(base) \
     if ( READ_FFA9(base) )


#define UNLESS_FFA9_HIGH(base) \
     if (! READ_FFA9(base) )


#define WAIT_FFA9_LOW(base) \
    while ( READ_FFA9(base) );


#define WAIT_FFA9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA9(base) && (--timeout > 0) );


#define WAIT_FFA9_HIGH(base) \
    while (! READ_FFA9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 8 
    // 
#define FFA8_MASK 0x100U
#define FFA8_OFFSET 8
#define FFA8_START_BIT 8
#define FFA8_WIDTH 1



typedef enum ffa8 {
    FFA_8_0,
    FFA_8_1
} FFA_8_T ;
#define WRITE_FFA8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA8_MASK) | ((val << FFA8_START_BIT) & FFA8_MASK )); \
   } 

#define ENABLE_FFA8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA8_MASK ); \
   } 

#define DISABLE_FFA8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA8_MASK ); \
   } 

#define READ_FFA8(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA8_MASK) >> FFA8_START_BIT )

#define WHEN_FFA8_HIGH(base) \
     if ( READ_FFA8(base) )


#define UNLESS_FFA8_HIGH(base) \
     if (! READ_FFA8(base) )


#define WAIT_FFA8_LOW(base) \
    while ( READ_FFA8(base) );


#define WAIT_FFA8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA8(base) && (--timeout > 0) );


#define WAIT_FFA8_HIGH(base) \
    while (! READ_FFA8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 7 
    // 
#define FFA7_MASK 0x80U
#define FFA7_OFFSET 7
#define FFA7_START_BIT 7
#define FFA7_WIDTH 1



typedef enum ffa7 {
    FFA_7_0,
    FFA_7_1
} FFA_7_T ;
#define WRITE_FFA7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA7_MASK) | ((val << FFA7_START_BIT) & FFA7_MASK )); \
   } 

#define ENABLE_FFA7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA7_MASK ); \
   } 

#define DISABLE_FFA7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA7_MASK ); \
   } 

#define READ_FFA7(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA7_MASK) >> FFA7_START_BIT )

#define WHEN_FFA7_HIGH(base) \
     if ( READ_FFA7(base) )


#define UNLESS_FFA7_HIGH(base) \
     if (! READ_FFA7(base) )


#define WAIT_FFA7_LOW(base) \
    while ( READ_FFA7(base) );


#define WAIT_FFA7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA7(base) && (--timeout > 0) );


#define WAIT_FFA7_HIGH(base) \
    while (! READ_FFA7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 6 
    // 
#define FFA6_MASK 0x40U
#define FFA6_OFFSET 6
#define FFA6_START_BIT 6
#define FFA6_WIDTH 1



typedef enum ffa6 {
    FFA_6_0,
    FFA_6_1
} FFA_6_T ;
#define WRITE_FFA6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA6_MASK) | ((val << FFA6_START_BIT) & FFA6_MASK )); \
   } 

#define ENABLE_FFA6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA6_MASK ); \
   } 

#define DISABLE_FFA6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA6_MASK ); \
   } 

#define READ_FFA6(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA6_MASK) >> FFA6_START_BIT )

#define WHEN_FFA6_HIGH(base) \
     if ( READ_FFA6(base) )


#define UNLESS_FFA6_HIGH(base) \
     if (! READ_FFA6(base) )


#define WAIT_FFA6_LOW(base) \
    while ( READ_FFA6(base) );


#define WAIT_FFA6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA6(base) && (--timeout > 0) );


#define WAIT_FFA6_HIGH(base) \
    while (! READ_FFA6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 5 
    // 
#define FFA5_MASK 0x20U
#define FFA5_OFFSET 5
#define FFA5_START_BIT 5
#define FFA5_WIDTH 1



typedef enum ffa5 {
    FFA_5_0,
    FFA_5_1
} FFA_5_T ;
#define WRITE_FFA5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA5_MASK) | ((val << FFA5_START_BIT) & FFA5_MASK )); \
   } 

#define ENABLE_FFA5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA5_MASK ); \
   } 

#define DISABLE_FFA5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA5_MASK ); \
   } 

#define READ_FFA5(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA5_MASK) >> FFA5_START_BIT )

#define WHEN_FFA5_HIGH(base) \
     if ( READ_FFA5(base) )


#define UNLESS_FFA5_HIGH(base) \
     if (! READ_FFA5(base) )


#define WAIT_FFA5_LOW(base) \
    while ( READ_FFA5(base) );


#define WAIT_FFA5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA5(base) && (--timeout > 0) );


#define WAIT_FFA5_HIGH(base) \
    while (! READ_FFA5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 4 
    // 
#define FFA4_MASK 0x10U
#define FFA4_OFFSET 4
#define FFA4_START_BIT 4
#define FFA4_WIDTH 1



typedef enum ffa4 {
    FFA_4_0,
    FFA_4_1
} FFA_4_T ;
#define WRITE_FFA4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA4_MASK) | ((val << FFA4_START_BIT) & FFA4_MASK )); \
   } 

#define ENABLE_FFA4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA4_MASK ); \
   } 

#define DISABLE_FFA4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA4_MASK ); \
   } 

#define READ_FFA4(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA4_MASK) >> FFA4_START_BIT )

#define WHEN_FFA4_HIGH(base) \
     if ( READ_FFA4(base) )


#define UNLESS_FFA4_HIGH(base) \
     if (! READ_FFA4(base) )


#define WAIT_FFA4_LOW(base) \
    while ( READ_FFA4(base) );


#define WAIT_FFA4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA4(base) && (--timeout > 0) );


#define WAIT_FFA4_HIGH(base) \
    while (! READ_FFA4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 3 
    // 
#define FFA3_MASK 0x8U
#define FFA3_OFFSET 3
#define FFA3_START_BIT 3
#define FFA3_WIDTH 1



typedef enum ffa3 {
    FFA_3_0,
    FFA_3_1
} FFA_3_T ;
#define WRITE_FFA3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA3_MASK) | ((val << FFA3_START_BIT) & FFA3_MASK )); \
   } 

#define ENABLE_FFA3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA3_MASK ); \
   } 

#define DISABLE_FFA3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA3_MASK ); \
   } 

#define READ_FFA3(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA3_MASK) >> FFA3_START_BIT )

#define WHEN_FFA3_HIGH(base) \
     if ( READ_FFA3(base) )


#define UNLESS_FFA3_HIGH(base) \
     if (! READ_FFA3(base) )


#define WAIT_FFA3_LOW(base) \
    while ( READ_FFA3(base) );


#define WAIT_FFA3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA3(base) && (--timeout > 0) );


#define WAIT_FFA3_HIGH(base) \
    while (! READ_FFA3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 2 
    // 
#define FFA2_MASK 0x4U
#define FFA2_OFFSET 2
#define FFA2_START_BIT 2
#define FFA2_WIDTH 1



typedef enum ffa2 {
    FFA_2_0,
    FFA_2_1
} FFA_2_T ;
#define WRITE_FFA2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA2_MASK) | ((val << FFA2_START_BIT) & FFA2_MASK )); \
   } 

#define ENABLE_FFA2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA2_MASK ); \
   } 

#define DISABLE_FFA2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA2_MASK ); \
   } 

#define READ_FFA2(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA2_MASK) >> FFA2_START_BIT )

#define WHEN_FFA2_HIGH(base) \
     if ( READ_FFA2(base) )


#define UNLESS_FFA2_HIGH(base) \
     if (! READ_FFA2(base) )


#define WAIT_FFA2_LOW(base) \
    while ( READ_FFA2(base) );


#define WAIT_FFA2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA2(base) && (--timeout > 0) );


#define WAIT_FFA2_HIGH(base) \
    while (! READ_FFA2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 1 
    // 
#define FFA1_MASK 0x2U
#define FFA1_OFFSET 1
#define FFA1_START_BIT 1
#define FFA1_WIDTH 1



typedef enum ffa1 {
    FFA_1_0,
    FFA_1_1
} FFA_1_T ;
#define WRITE_FFA1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA1_MASK) | ((val << FFA1_START_BIT) & FFA1_MASK )); \
   } 

#define ENABLE_FFA1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA1_MASK ); \
   } 

#define DISABLE_FFA1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA1_MASK ); \
   } 

#define READ_FFA1(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA1_MASK) >> FFA1_START_BIT )

#define WHEN_FFA1_HIGH(base) \
     if ( READ_FFA1(base) )


#define UNLESS_FFA1_HIGH(base) \
     if (! READ_FFA1(base) )


#define WAIT_FFA1_LOW(base) \
    while ( READ_FFA1(base) );


#define WAIT_FFA1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA1(base) && (--timeout > 0) );


#define WAIT_FFA1_HIGH(base) \
    while (! READ_FFA1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Ffa1r
//
// Return the value of register FFA_1R
//
// Notes : Register filter FIFO assignment register (FFA1R) at the offset 0x214, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter FIFO assignment for filter 0 
    // 
#define FFA0_MASK 0x1U
#define FFA0_OFFSET 0
#define FFA0_START_BIT 0
#define FFA0_WIDTH 1



typedef enum ffa0 {
    FFA_0_0,
    FFA_0_1
} FFA_0_T ;
#define WRITE_FFA0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, (OldValue & ~FFA0_MASK) | ((val << FFA0_START_BIT) & FFA0_MASK )); \
   } 

#define ENABLE_FFA0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x214); \
     WRITE_REGISTER_ULONG( base + 0x214, val |  FFA0_MASK ); \
   } 

#define DISABLE_FFA0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x214 ); \
     WRITE_REGISTER_ULONG( base + 0x214, val & ~FFA0_MASK ); \
   } 

#define READ_FFA0(base) \
    ((READ_REGISTER_ULONG(base + 0x214) & FFA0_MASK) >> FFA0_START_BIT )

#define WHEN_FFA0_HIGH(base) \
     if ( READ_FFA0(base) )


#define UNLESS_FFA0_HIGH(base) \
     if (! READ_FFA0(base) )


#define WAIT_FFA0_LOW(base) \
    while ( READ_FFA0(base) );


#define WAIT_FFA0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FFA0(base) && (--timeout > 0) );


#define WAIT_FFA0_HIGH(base) \
    while (! READ_FFA0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA1R
//
// Notes : Register Fa1r at offset 0x21C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_FA_1R( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x21C, val)

#define SET_BITS_FA_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  mask ); \
   } 

#define CLEAR_BITS_FA_1R(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C,  val & ~mask ); \
   } 

#define READ_REGISTER_FA_1R( base ) \
     READ_REGISTER_ULONG( base + 0x21C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT27_MASK 0x8000000U
#define FACT27_OFFSET 27
#define FACT27_START_BIT 27
#define FACT27_WIDTH 1


#define FA_1R_REG 0x21C

typedef enum fact27 {
    FACT_2_7_0,
    FACT_2_7_1
} FACT_27_T ;
#define WRITE_FACT27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT27_MASK) | ((val << FACT27_START_BIT) & FACT27_MASK )); \
   } 

#define ENABLE_FACT27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT27_MASK ); \
   } 

#define DISABLE_FACT27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT27_MASK ); \
   } 

#define READ_FACT27(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT27_MASK) >> FACT27_START_BIT )

#define WHEN_FACT27_HIGH(base) \
     if ( READ_FACT27(base) )


#define UNLESS_FACT27_HIGH(base) \
     if (! READ_FACT27(base) )


#define WAIT_FACT27_LOW(base) \
    while ( READ_FACT27(base) );


#define WAIT_FACT27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT27(base) && (--timeout > 0) );


#define WAIT_FACT27_HIGH(base) \
    while (! READ_FACT27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT26_MASK 0x4000000U
#define FACT26_OFFSET 26
#define FACT26_START_BIT 26
#define FACT26_WIDTH 1



typedef enum fact26 {
    FACT_2_6_0,
    FACT_2_6_1
} FACT_26_T ;
#define WRITE_FACT26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT26_MASK) | ((val << FACT26_START_BIT) & FACT26_MASK )); \
   } 

#define ENABLE_FACT26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT26_MASK ); \
   } 

#define DISABLE_FACT26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT26_MASK ); \
   } 

#define READ_FACT26(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT26_MASK) >> FACT26_START_BIT )

#define WHEN_FACT26_HIGH(base) \
     if ( READ_FACT26(base) )


#define UNLESS_FACT26_HIGH(base) \
     if (! READ_FACT26(base) )


#define WAIT_FACT26_LOW(base) \
    while ( READ_FACT26(base) );


#define WAIT_FACT26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT26(base) && (--timeout > 0) );


#define WAIT_FACT26_HIGH(base) \
    while (! READ_FACT26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT25_MASK 0x2000000U
#define FACT25_OFFSET 25
#define FACT25_START_BIT 25
#define FACT25_WIDTH 1



typedef enum fact25 {
    FACT_2_5_0,
    FACT_2_5_1
} FACT_25_T ;
#define WRITE_FACT25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT25_MASK) | ((val << FACT25_START_BIT) & FACT25_MASK )); \
   } 

#define ENABLE_FACT25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT25_MASK ); \
   } 

#define DISABLE_FACT25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT25_MASK ); \
   } 

#define READ_FACT25(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT25_MASK) >> FACT25_START_BIT )

#define WHEN_FACT25_HIGH(base) \
     if ( READ_FACT25(base) )


#define UNLESS_FACT25_HIGH(base) \
     if (! READ_FACT25(base) )


#define WAIT_FACT25_LOW(base) \
    while ( READ_FACT25(base) );


#define WAIT_FACT25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT25(base) && (--timeout > 0) );


#define WAIT_FACT25_HIGH(base) \
    while (! READ_FACT25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT24_MASK 0x1000000U
#define FACT24_OFFSET 24
#define FACT24_START_BIT 24
#define FACT24_WIDTH 1



typedef enum fact24 {
    FACT_2_4_0,
    FACT_2_4_1
} FACT_24_T ;
#define WRITE_FACT24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT24_MASK) | ((val << FACT24_START_BIT) & FACT24_MASK )); \
   } 

#define ENABLE_FACT24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT24_MASK ); \
   } 

#define DISABLE_FACT24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT24_MASK ); \
   } 

#define READ_FACT24(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT24_MASK) >> FACT24_START_BIT )

#define WHEN_FACT24_HIGH(base) \
     if ( READ_FACT24(base) )


#define UNLESS_FACT24_HIGH(base) \
     if (! READ_FACT24(base) )


#define WAIT_FACT24_LOW(base) \
    while ( READ_FACT24(base) );


#define WAIT_FACT24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT24(base) && (--timeout > 0) );


#define WAIT_FACT24_HIGH(base) \
    while (! READ_FACT24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT23_MASK 0x800000U
#define FACT23_OFFSET 23
#define FACT23_START_BIT 23
#define FACT23_WIDTH 1



typedef enum fact23 {
    FACT_2_3_0,
    FACT_2_3_1
} FACT_23_T ;
#define WRITE_FACT23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT23_MASK) | ((val << FACT23_START_BIT) & FACT23_MASK )); \
   } 

#define ENABLE_FACT23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT23_MASK ); \
   } 

#define DISABLE_FACT23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT23_MASK ); \
   } 

#define READ_FACT23(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT23_MASK) >> FACT23_START_BIT )

#define WHEN_FACT23_HIGH(base) \
     if ( READ_FACT23(base) )


#define UNLESS_FACT23_HIGH(base) \
     if (! READ_FACT23(base) )


#define WAIT_FACT23_LOW(base) \
    while ( READ_FACT23(base) );


#define WAIT_FACT23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT23(base) && (--timeout > 0) );


#define WAIT_FACT23_HIGH(base) \
    while (! READ_FACT23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT22_MASK 0x400000U
#define FACT22_OFFSET 22
#define FACT22_START_BIT 22
#define FACT22_WIDTH 1



typedef enum fact22 {
    FACT_2_2_0,
    FACT_2_2_1
} FACT_22_T ;
#define WRITE_FACT22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT22_MASK) | ((val << FACT22_START_BIT) & FACT22_MASK )); \
   } 

#define ENABLE_FACT22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT22_MASK ); \
   } 

#define DISABLE_FACT22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT22_MASK ); \
   } 

#define READ_FACT22(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT22_MASK) >> FACT22_START_BIT )

#define WHEN_FACT22_HIGH(base) \
     if ( READ_FACT22(base) )


#define UNLESS_FACT22_HIGH(base) \
     if (! READ_FACT22(base) )


#define WAIT_FACT22_LOW(base) \
    while ( READ_FACT22(base) );


#define WAIT_FACT22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT22(base) && (--timeout > 0) );


#define WAIT_FACT22_HIGH(base) \
    while (! READ_FACT22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT21_MASK 0x200000U
#define FACT21_OFFSET 21
#define FACT21_START_BIT 21
#define FACT21_WIDTH 1



typedef enum fact21 {
    FACT_2_1_0,
    FACT_2_1_1
} FACT_21_T ;
#define WRITE_FACT21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT21_MASK) | ((val << FACT21_START_BIT) & FACT21_MASK )); \
   } 

#define ENABLE_FACT21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT21_MASK ); \
   } 

#define DISABLE_FACT21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT21_MASK ); \
   } 

#define READ_FACT21(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT21_MASK) >> FACT21_START_BIT )

#define WHEN_FACT21_HIGH(base) \
     if ( READ_FACT21(base) )


#define UNLESS_FACT21_HIGH(base) \
     if (! READ_FACT21(base) )


#define WAIT_FACT21_LOW(base) \
    while ( READ_FACT21(base) );


#define WAIT_FACT21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT21(base) && (--timeout > 0) );


#define WAIT_FACT21_HIGH(base) \
    while (! READ_FACT21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT20_MASK 0x100000U
#define FACT20_OFFSET 20
#define FACT20_START_BIT 20
#define FACT20_WIDTH 1



typedef enum fact20 {
    FACT_2_0_0,
    FACT_2_0_1
} FACT_20_T ;
#define WRITE_FACT20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT20_MASK) | ((val << FACT20_START_BIT) & FACT20_MASK )); \
   } 

#define ENABLE_FACT20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT20_MASK ); \
   } 

#define DISABLE_FACT20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT20_MASK ); \
   } 

#define READ_FACT20(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT20_MASK) >> FACT20_START_BIT )

#define WHEN_FACT20_HIGH(base) \
     if ( READ_FACT20(base) )


#define UNLESS_FACT20_HIGH(base) \
     if (! READ_FACT20(base) )


#define WAIT_FACT20_LOW(base) \
    while ( READ_FACT20(base) );


#define WAIT_FACT20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT20(base) && (--timeout > 0) );


#define WAIT_FACT20_HIGH(base) \
    while (! READ_FACT20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT19_MASK 0x80000U
#define FACT19_OFFSET 19
#define FACT19_START_BIT 19
#define FACT19_WIDTH 1



typedef enum fact19 {
    FACT_1_9_0,
    FACT_1_9_1
} FACT_19_T ;
#define WRITE_FACT19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT19_MASK) | ((val << FACT19_START_BIT) & FACT19_MASK )); \
   } 

#define ENABLE_FACT19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT19_MASK ); \
   } 

#define DISABLE_FACT19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT19_MASK ); \
   } 

#define READ_FACT19(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT19_MASK) >> FACT19_START_BIT )

#define WHEN_FACT19_HIGH(base) \
     if ( READ_FACT19(base) )


#define UNLESS_FACT19_HIGH(base) \
     if (! READ_FACT19(base) )


#define WAIT_FACT19_LOW(base) \
    while ( READ_FACT19(base) );


#define WAIT_FACT19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT19(base) && (--timeout > 0) );


#define WAIT_FACT19_HIGH(base) \
    while (! READ_FACT19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT18_MASK 0x40000U
#define FACT18_OFFSET 18
#define FACT18_START_BIT 18
#define FACT18_WIDTH 1



typedef enum fact18 {
    FACT_1_8_0,
    FACT_1_8_1
} FACT_18_T ;
#define WRITE_FACT18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT18_MASK) | ((val << FACT18_START_BIT) & FACT18_MASK )); \
   } 

#define ENABLE_FACT18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT18_MASK ); \
   } 

#define DISABLE_FACT18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT18_MASK ); \
   } 

#define READ_FACT18(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT18_MASK) >> FACT18_START_BIT )

#define WHEN_FACT18_HIGH(base) \
     if ( READ_FACT18(base) )


#define UNLESS_FACT18_HIGH(base) \
     if (! READ_FACT18(base) )


#define WAIT_FACT18_LOW(base) \
    while ( READ_FACT18(base) );


#define WAIT_FACT18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT18(base) && (--timeout > 0) );


#define WAIT_FACT18_HIGH(base) \
    while (! READ_FACT18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT17_MASK 0x20000U
#define FACT17_OFFSET 17
#define FACT17_START_BIT 17
#define FACT17_WIDTH 1



typedef enum fact17 {
    FACT_1_7_0,
    FACT_1_7_1
} FACT_17_T ;
#define WRITE_FACT17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT17_MASK) | ((val << FACT17_START_BIT) & FACT17_MASK )); \
   } 

#define ENABLE_FACT17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT17_MASK ); \
   } 

#define DISABLE_FACT17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT17_MASK ); \
   } 

#define READ_FACT17(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT17_MASK) >> FACT17_START_BIT )

#define WHEN_FACT17_HIGH(base) \
     if ( READ_FACT17(base) )


#define UNLESS_FACT17_HIGH(base) \
     if (! READ_FACT17(base) )


#define WAIT_FACT17_LOW(base) \
    while ( READ_FACT17(base) );


#define WAIT_FACT17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT17(base) && (--timeout > 0) );


#define WAIT_FACT17_HIGH(base) \
    while (! READ_FACT17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT16_MASK 0x10000U
#define FACT16_OFFSET 16
#define FACT16_START_BIT 16
#define FACT16_WIDTH 1



typedef enum fact16 {
    FACT_1_6_0,
    FACT_1_6_1
} FACT_16_T ;
#define WRITE_FACT16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT16_MASK) | ((val << FACT16_START_BIT) & FACT16_MASK )); \
   } 

#define ENABLE_FACT16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT16_MASK ); \
   } 

#define DISABLE_FACT16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT16_MASK ); \
   } 

#define READ_FACT16(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT16_MASK) >> FACT16_START_BIT )

#define WHEN_FACT16_HIGH(base) \
     if ( READ_FACT16(base) )


#define UNLESS_FACT16_HIGH(base) \
     if (! READ_FACT16(base) )


#define WAIT_FACT16_LOW(base) \
    while ( READ_FACT16(base) );


#define WAIT_FACT16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT16(base) && (--timeout > 0) );


#define WAIT_FACT16_HIGH(base) \
    while (! READ_FACT16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT15_MASK 0x8000U
#define FACT15_OFFSET 15
#define FACT15_START_BIT 15
#define FACT15_WIDTH 1



typedef enum fact15 {
    FACT_1_5_0,
    FACT_1_5_1
} FACT_15_T ;
#define WRITE_FACT15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT15_MASK) | ((val << FACT15_START_BIT) & FACT15_MASK )); \
   } 

#define ENABLE_FACT15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT15_MASK ); \
   } 

#define DISABLE_FACT15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT15_MASK ); \
   } 

#define READ_FACT15(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT15_MASK) >> FACT15_START_BIT )

#define WHEN_FACT15_HIGH(base) \
     if ( READ_FACT15(base) )


#define UNLESS_FACT15_HIGH(base) \
     if (! READ_FACT15(base) )


#define WAIT_FACT15_LOW(base) \
    while ( READ_FACT15(base) );


#define WAIT_FACT15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT15(base) && (--timeout > 0) );


#define WAIT_FACT15_HIGH(base) \
    while (! READ_FACT15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT14_MASK 0x4000U
#define FACT14_OFFSET 14
#define FACT14_START_BIT 14
#define FACT14_WIDTH 1



typedef enum fact14 {
    FACT_1_4_0,
    FACT_1_4_1
} FACT_14_T ;
#define WRITE_FACT14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT14_MASK) | ((val << FACT14_START_BIT) & FACT14_MASK )); \
   } 

#define ENABLE_FACT14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT14_MASK ); \
   } 

#define DISABLE_FACT14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT14_MASK ); \
   } 

#define READ_FACT14(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT14_MASK) >> FACT14_START_BIT )

#define WHEN_FACT14_HIGH(base) \
     if ( READ_FACT14(base) )


#define UNLESS_FACT14_HIGH(base) \
     if (! READ_FACT14(base) )


#define WAIT_FACT14_LOW(base) \
    while ( READ_FACT14(base) );


#define WAIT_FACT14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT14(base) && (--timeout > 0) );


#define WAIT_FACT14_HIGH(base) \
    while (! READ_FACT14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT13_MASK 0x2000U
#define FACT13_OFFSET 13
#define FACT13_START_BIT 13
#define FACT13_WIDTH 1



typedef enum fact13 {
    FACT_1_3_0,
    FACT_1_3_1
} FACT_13_T ;
#define WRITE_FACT13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT13_MASK) | ((val << FACT13_START_BIT) & FACT13_MASK )); \
   } 

#define ENABLE_FACT13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT13_MASK ); \
   } 

#define DISABLE_FACT13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT13_MASK ); \
   } 

#define READ_FACT13(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT13_MASK) >> FACT13_START_BIT )

#define WHEN_FACT13_HIGH(base) \
     if ( READ_FACT13(base) )


#define UNLESS_FACT13_HIGH(base) \
     if (! READ_FACT13(base) )


#define WAIT_FACT13_LOW(base) \
    while ( READ_FACT13(base) );


#define WAIT_FACT13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT13(base) && (--timeout > 0) );


#define WAIT_FACT13_HIGH(base) \
    while (! READ_FACT13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT12_MASK 0x1000U
#define FACT12_OFFSET 12
#define FACT12_START_BIT 12
#define FACT12_WIDTH 1



typedef enum fact12 {
    FACT_1_2_0,
    FACT_1_2_1
} FACT_12_T ;
#define WRITE_FACT12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT12_MASK) | ((val << FACT12_START_BIT) & FACT12_MASK )); \
   } 

#define ENABLE_FACT12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT12_MASK ); \
   } 

#define DISABLE_FACT12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT12_MASK ); \
   } 

#define READ_FACT12(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT12_MASK) >> FACT12_START_BIT )

#define WHEN_FACT12_HIGH(base) \
     if ( READ_FACT12(base) )


#define UNLESS_FACT12_HIGH(base) \
     if (! READ_FACT12(base) )


#define WAIT_FACT12_LOW(base) \
    while ( READ_FACT12(base) );


#define WAIT_FACT12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT12(base) && (--timeout > 0) );


#define WAIT_FACT12_HIGH(base) \
    while (! READ_FACT12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT11_MASK 0x800U
#define FACT11_OFFSET 11
#define FACT11_START_BIT 11
#define FACT11_WIDTH 1



typedef enum fact11 {
    FACT_1_1_0,
    FACT_1_1_1
} FACT_11_T ;
#define WRITE_FACT11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT11_MASK) | ((val << FACT11_START_BIT) & FACT11_MASK )); \
   } 

#define ENABLE_FACT11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT11_MASK ); \
   } 

#define DISABLE_FACT11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT11_MASK ); \
   } 

#define READ_FACT11(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT11_MASK) >> FACT11_START_BIT )

#define WHEN_FACT11_HIGH(base) \
     if ( READ_FACT11(base) )


#define UNLESS_FACT11_HIGH(base) \
     if (! READ_FACT11(base) )


#define WAIT_FACT11_LOW(base) \
    while ( READ_FACT11(base) );


#define WAIT_FACT11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT11(base) && (--timeout > 0) );


#define WAIT_FACT11_HIGH(base) \
    while (! READ_FACT11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT10_MASK 0x400U
#define FACT10_OFFSET 10
#define FACT10_START_BIT 10
#define FACT10_WIDTH 1



typedef enum fact10 {
    FACT_1_0_0,
    FACT_1_0_1
} FACT_10_T ;
#define WRITE_FACT10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT10_MASK) | ((val << FACT10_START_BIT) & FACT10_MASK )); \
   } 

#define ENABLE_FACT10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT10_MASK ); \
   } 

#define DISABLE_FACT10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT10_MASK ); \
   } 

#define READ_FACT10(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT10_MASK) >> FACT10_START_BIT )

#define WHEN_FACT10_HIGH(base) \
     if ( READ_FACT10(base) )


#define UNLESS_FACT10_HIGH(base) \
     if (! READ_FACT10(base) )


#define WAIT_FACT10_LOW(base) \
    while ( READ_FACT10(base) );


#define WAIT_FACT10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT10(base) && (--timeout > 0) );


#define WAIT_FACT10_HIGH(base) \
    while (! READ_FACT10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT9_MASK 0x200U
#define FACT9_OFFSET 9
#define FACT9_START_BIT 9
#define FACT9_WIDTH 1



typedef enum fact9 {
    FACT_9_0,
    FACT_9_1
} FACT_9_T ;
#define WRITE_FACT9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT9_MASK) | ((val << FACT9_START_BIT) & FACT9_MASK )); \
   } 

#define ENABLE_FACT9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT9_MASK ); \
   } 

#define DISABLE_FACT9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT9_MASK ); \
   } 

#define READ_FACT9(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT9_MASK) >> FACT9_START_BIT )

#define WHEN_FACT9_HIGH(base) \
     if ( READ_FACT9(base) )


#define UNLESS_FACT9_HIGH(base) \
     if (! READ_FACT9(base) )


#define WAIT_FACT9_LOW(base) \
    while ( READ_FACT9(base) );


#define WAIT_FACT9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT9(base) && (--timeout > 0) );


#define WAIT_FACT9_HIGH(base) \
    while (! READ_FACT9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT8_MASK 0x100U
#define FACT8_OFFSET 8
#define FACT8_START_BIT 8
#define FACT8_WIDTH 1



typedef enum fact8 {
    FACT_8_0,
    FACT_8_1
} FACT_8_T ;
#define WRITE_FACT8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT8_MASK) | ((val << FACT8_START_BIT) & FACT8_MASK )); \
   } 

#define ENABLE_FACT8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT8_MASK ); \
   } 

#define DISABLE_FACT8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT8_MASK ); \
   } 

#define READ_FACT8(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT8_MASK) >> FACT8_START_BIT )

#define WHEN_FACT8_HIGH(base) \
     if ( READ_FACT8(base) )


#define UNLESS_FACT8_HIGH(base) \
     if (! READ_FACT8(base) )


#define WAIT_FACT8_LOW(base) \
    while ( READ_FACT8(base) );


#define WAIT_FACT8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT8(base) && (--timeout > 0) );


#define WAIT_FACT8_HIGH(base) \
    while (! READ_FACT8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT7_MASK 0x80U
#define FACT7_OFFSET 7
#define FACT7_START_BIT 7
#define FACT7_WIDTH 1



typedef enum fact7 {
    FACT_7_0,
    FACT_7_1
} FACT_7_T ;
#define WRITE_FACT7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT7_MASK) | ((val << FACT7_START_BIT) & FACT7_MASK )); \
   } 

#define ENABLE_FACT7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT7_MASK ); \
   } 

#define DISABLE_FACT7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT7_MASK ); \
   } 

#define READ_FACT7(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT7_MASK) >> FACT7_START_BIT )

#define WHEN_FACT7_HIGH(base) \
     if ( READ_FACT7(base) )


#define UNLESS_FACT7_HIGH(base) \
     if (! READ_FACT7(base) )


#define WAIT_FACT7_LOW(base) \
    while ( READ_FACT7(base) );


#define WAIT_FACT7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT7(base) && (--timeout > 0) );


#define WAIT_FACT7_HIGH(base) \
    while (! READ_FACT7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT6_MASK 0x40U
#define FACT6_OFFSET 6
#define FACT6_START_BIT 6
#define FACT6_WIDTH 1



typedef enum fact6 {
    FACT_6_0,
    FACT_6_1
} FACT_6_T ;
#define WRITE_FACT6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT6_MASK) | ((val << FACT6_START_BIT) & FACT6_MASK )); \
   } 

#define ENABLE_FACT6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT6_MASK ); \
   } 

#define DISABLE_FACT6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT6_MASK ); \
   } 

#define READ_FACT6(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT6_MASK) >> FACT6_START_BIT )

#define WHEN_FACT6_HIGH(base) \
     if ( READ_FACT6(base) )


#define UNLESS_FACT6_HIGH(base) \
     if (! READ_FACT6(base) )


#define WAIT_FACT6_LOW(base) \
    while ( READ_FACT6(base) );


#define WAIT_FACT6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT6(base) && (--timeout > 0) );


#define WAIT_FACT6_HIGH(base) \
    while (! READ_FACT6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT5_MASK 0x20U
#define FACT5_OFFSET 5
#define FACT5_START_BIT 5
#define FACT5_WIDTH 1



typedef enum fact5 {
    FACT_5_0,
    FACT_5_1
} FACT_5_T ;
#define WRITE_FACT5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT5_MASK) | ((val << FACT5_START_BIT) & FACT5_MASK )); \
   } 

#define ENABLE_FACT5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT5_MASK ); \
   } 

#define DISABLE_FACT5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT5_MASK ); \
   } 

#define READ_FACT5(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT5_MASK) >> FACT5_START_BIT )

#define WHEN_FACT5_HIGH(base) \
     if ( READ_FACT5(base) )


#define UNLESS_FACT5_HIGH(base) \
     if (! READ_FACT5(base) )


#define WAIT_FACT5_LOW(base) \
    while ( READ_FACT5(base) );


#define WAIT_FACT5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT5(base) && (--timeout > 0) );


#define WAIT_FACT5_HIGH(base) \
    while (! READ_FACT5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT4_MASK 0x10U
#define FACT4_OFFSET 4
#define FACT4_START_BIT 4
#define FACT4_WIDTH 1



typedef enum fact4 {
    FACT_4_0,
    FACT_4_1
} FACT_4_T ;
#define WRITE_FACT4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT4_MASK) | ((val << FACT4_START_BIT) & FACT4_MASK )); \
   } 

#define ENABLE_FACT4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT4_MASK ); \
   } 

#define DISABLE_FACT4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT4_MASK ); \
   } 

#define READ_FACT4(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT4_MASK) >> FACT4_START_BIT )

#define WHEN_FACT4_HIGH(base) \
     if ( READ_FACT4(base) )


#define UNLESS_FACT4_HIGH(base) \
     if (! READ_FACT4(base) )


#define WAIT_FACT4_LOW(base) \
    while ( READ_FACT4(base) );


#define WAIT_FACT4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT4(base) && (--timeout > 0) );


#define WAIT_FACT4_HIGH(base) \
    while (! READ_FACT4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT3_MASK 0x8U
#define FACT3_OFFSET 3
#define FACT3_START_BIT 3
#define FACT3_WIDTH 1



typedef enum fact3 {
    FACT_3_0,
    FACT_3_1
} FACT_3_T ;
#define WRITE_FACT3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT3_MASK) | ((val << FACT3_START_BIT) & FACT3_MASK )); \
   } 

#define ENABLE_FACT3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT3_MASK ); \
   } 

#define DISABLE_FACT3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT3_MASK ); \
   } 

#define READ_FACT3(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT3_MASK) >> FACT3_START_BIT )

#define WHEN_FACT3_HIGH(base) \
     if ( READ_FACT3(base) )


#define UNLESS_FACT3_HIGH(base) \
     if (! READ_FACT3(base) )


#define WAIT_FACT3_LOW(base) \
    while ( READ_FACT3(base) );


#define WAIT_FACT3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT3(base) && (--timeout > 0) );


#define WAIT_FACT3_HIGH(base) \
    while (! READ_FACT3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT2_MASK 0x4U
#define FACT2_OFFSET 2
#define FACT2_START_BIT 2
#define FACT2_WIDTH 1



typedef enum fact2 {
    FACT_2_0,
    FACT_2_1
} FACT_2_T ;
#define WRITE_FACT2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT2_MASK) | ((val << FACT2_START_BIT) & FACT2_MASK )); \
   } 

#define ENABLE_FACT2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT2_MASK ); \
   } 

#define DISABLE_FACT2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT2_MASK ); \
   } 

#define READ_FACT2(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT2_MASK) >> FACT2_START_BIT )

#define WHEN_FACT2_HIGH(base) \
     if ( READ_FACT2(base) )


#define UNLESS_FACT2_HIGH(base) \
     if (! READ_FACT2(base) )


#define WAIT_FACT2_LOW(base) \
    while ( READ_FACT2(base) );


#define WAIT_FACT2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT2(base) && (--timeout > 0) );


#define WAIT_FACT2_HIGH(base) \
    while (! READ_FACT2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT1_MASK 0x2U
#define FACT1_OFFSET 1
#define FACT1_START_BIT 1
#define FACT1_WIDTH 1



typedef enum fact1 {
    FACT_1_0,
    FACT_1_1
} FACT_1_T ;
#define WRITE_FACT1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT1_MASK) | ((val << FACT1_START_BIT) & FACT1_MASK )); \
   } 

#define ENABLE_FACT1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT1_MASK ); \
   } 

#define DISABLE_FACT1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT1_MASK ); \
   } 

#define READ_FACT1(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT1_MASK) >> FACT1_START_BIT )

#define WHEN_FACT1_HIGH(base) \
     if ( READ_FACT1(base) )


#define UNLESS_FACT1_HIGH(base) \
     if (! READ_FACT1(base) )


#define WAIT_FACT1_LOW(base) \
    while ( READ_FACT1(base) );


#define WAIT_FACT1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT1(base) && (--timeout > 0) );


#define WAIT_FACT1_HIGH(base) \
    while (! READ_FACT1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : Fa1r
//
// Return the value of register FA_1R
//
// Notes : Register filter activation register (FA1R) at the offset 0x21C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter active 
    // 
#define FACT0_MASK 0x1U
#define FACT0_OFFSET 0
#define FACT0_START_BIT 0
#define FACT0_WIDTH 1



typedef enum fact0 {
    FACT_0_0,
    FACT_0_1
} FACT_0_T ;
#define WRITE_FACT0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, (OldValue & ~FACT0_MASK) | ((val << FACT0_START_BIT) & FACT0_MASK )); \
   } 

#define ENABLE_FACT0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x21C); \
     WRITE_REGISTER_ULONG( base + 0x21C, val |  FACT0_MASK ); \
   } 

#define DISABLE_FACT0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x21C ); \
     WRITE_REGISTER_ULONG( base + 0x21C, val & ~FACT0_MASK ); \
   } 

#define READ_FACT0(base) \
    ((READ_REGISTER_ULONG(base + 0x21C) & FACT0_MASK) >> FACT0_START_BIT )

#define WHEN_FACT0_HIGH(base) \
     if ( READ_FACT0(base) )


#define UNLESS_FACT0_HIGH(base) \
     if (! READ_FACT0(base) )


#define WAIT_FACT0_LOW(base) \
    while ( READ_FACT0(base) );


#define WAIT_FACT0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FACT0(base) && (--timeout > 0) );


#define WAIT_FACT0_HIGH(base) \
    while (! READ_FACT0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F0_R1
//
// Notes : Register F0R1 at offset 0x240
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_0_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x240, val)

#define SET_BITS_F_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  mask ); \
   } 

#define CLEAR_BITS_F_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240,  val & ~mask ); \
   } 

#define READ_REGISTER_F_0_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x240) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F0R1_REG 0x240

typedef enum fb31 {
    FB_3_1_0,
    FB_3_1_1
} FB_31_T ;
#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



typedef enum fb30 {
    FB_3_0_0,
    FB_3_0_1
} FB_30_T ;
#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



typedef enum fb29 {
    FB_2_9_0,
    FB_2_9_1
} FB_29_T ;
#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



typedef enum fb28 {
    FB_2_8_0,
    FB_2_8_1
} FB_28_T ;
#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



typedef enum fb27 {
    FB_2_7_0,
    FB_2_7_1
} FB_27_T ;
#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



typedef enum fb26 {
    FB_2_6_0,
    FB_2_6_1
} FB_26_T ;
#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



typedef enum fb25 {
    FB_2_5_0,
    FB_2_5_1
} FB_25_T ;
#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



typedef enum fb24 {
    FB_2_4_0,
    FB_2_4_1
} FB_24_T ;
#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



typedef enum fb23 {
    FB_2_3_0,
    FB_2_3_1
} FB_23_T ;
#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



typedef enum fb22 {
    FB_2_2_0,
    FB_2_2_1
} FB_22_T ;
#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



typedef enum fb21 {
    FB_2_1_0,
    FB_2_1_1
} FB_21_T ;
#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



typedef enum fb20 {
    FB_2_0_0,
    FB_2_0_1
} FB_20_T ;
#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



typedef enum fb19 {
    FB_1_9_0,
    FB_1_9_1
} FB_19_T ;
#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



typedef enum fb18 {
    FB_1_8_0,
    FB_1_8_1
} FB_18_T ;
#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



typedef enum fb17 {
    FB_1_7_0,
    FB_1_7_1
} FB_17_T ;
#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



typedef enum fb16 {
    FB_1_6_0,
    FB_1_6_1
} FB_16_T ;
#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



typedef enum fb15 {
    FB_1_5_0,
    FB_1_5_1
} FB_15_T ;
#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



typedef enum fb14 {
    FB_1_4_0,
    FB_1_4_1
} FB_14_T ;
#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



typedef enum fb13 {
    FB_1_3_0,
    FB_1_3_1
} FB_13_T ;
#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



typedef enum fb12 {
    FB_1_2_0,
    FB_1_2_1
} FB_12_T ;
#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



typedef enum fb11 {
    FB_1_1_0,
    FB_1_1_1
} FB_11_T ;
#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



typedef enum fb10 {
    FB_1_0_0,
    FB_1_0_1
} FB_10_T ;
#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



typedef enum fb9 {
    FB_9_0,
    FB_9_1
} FB_9_T ;
#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



typedef enum fb8 {
    FB_8_0,
    FB_8_1
} FB_8_T ;
#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



typedef enum fb7 {
    FB_7_0,
    FB_7_1
} FB_7_T ;
#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



typedef enum fb6 {
    FB_6_0,
    FB_6_1
} FB_6_T ;
#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



typedef enum fb5 {
    FB_5_0,
    FB_5_1
} FB_5_T ;
#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



typedef enum fb4 {
    FB_4_0,
    FB_4_1
} FB_4_T ;
#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



typedef enum fb3 {
    FB_3_0,
    FB_3_1
} FB_3_T ;
#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



typedef enum fb2 {
    FB_2_0,
    FB_2_1
} FB_2_T ;
#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



typedef enum fb1 {
    FB_1_0,
    FB_1_1
} FB_1_T ;
#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R1
//
// Return the value of register F_0_R_1
//
// Notes : Register Filter bank 0 register 1 (F0R1) at the offset 0x240, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



typedef enum fb0 {
    FB_0_0,
    FB_0_1
} FB_0_T ;
#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x240); \
     WRITE_REGISTER_ULONG( base + 0x240, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x240 ); \
     WRITE_REGISTER_ULONG( base + 0x240, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x240) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F0_R2
//
// Notes : Register F0R2 at offset 0x244
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_0_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x244, val)

#define SET_BITS_F_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  mask ); \
   } 

#define CLEAR_BITS_F_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244,  val & ~mask ); \
   } 

#define READ_REGISTER_F_0_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x244) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F0R2_REG 0x244

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F0R2
//
// Return the value of register F_0_R_2
//
// Notes : Register Filter bank 0 register 2 (F0R2) at the offset 0x244, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x244); \
     WRITE_REGISTER_ULONG( base + 0x244, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x244 ); \
     WRITE_REGISTER_ULONG( base + 0x244, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x244) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F1_R1
//
// Notes : Register F1R1 at offset 0x248
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x248, val)

#define SET_BITS_F_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x248) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F1R1_REG 0x248

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R1
//
// Return the value of register F_1_R_1
//
// Notes : Register Filter bank 1 register 1 (F1R1) at the offset 0x248, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x248); \
     WRITE_REGISTER_ULONG( base + 0x248, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x248 ); \
     WRITE_REGISTER_ULONG( base + 0x248, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x248) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F1_R2
//
// Notes : Register F1R2 at offset 0x24C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x24C, val)

#define SET_BITS_F_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x24C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F1R2_REG 0x24C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F1R2
//
// Return the value of register F_1_R_2
//
// Notes : Register Filter bank 1 register 2 (F1R2) at the offset 0x24C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x24C); \
     WRITE_REGISTER_ULONG( base + 0x24C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x24C ); \
     WRITE_REGISTER_ULONG( base + 0x24C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x24C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F2_R1
//
// Notes : Register F2R1 at offset 0x250
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x250, val)

#define SET_BITS_F_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x250) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F2R1_REG 0x250

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R1
//
// Return the value of register F_2_R_1
//
// Notes : Register Filter bank 2 register 1 (F2R1) at the offset 0x250, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x250); \
     WRITE_REGISTER_ULONG( base + 0x250, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x250 ); \
     WRITE_REGISTER_ULONG( base + 0x250, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x250) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F2_R2
//
// Notes : Register F2R2 at offset 0x254
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x254, val)

#define SET_BITS_F_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x254) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F2R2_REG 0x254

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F2R2
//
// Return the value of register F_2_R_2
//
// Notes : Register Filter bank 2 register 2 (F2R2) at the offset 0x254, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x254); \
     WRITE_REGISTER_ULONG( base + 0x254, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x254 ); \
     WRITE_REGISTER_ULONG( base + 0x254, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x254) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F3_R1
//
// Notes : Register F3R1 at offset 0x258
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_3_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x258, val)

#define SET_BITS_F_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  mask ); \
   } 

#define CLEAR_BITS_F_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258,  val & ~mask ); \
   } 

#define READ_REGISTER_F_3_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x258) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F3R1_REG 0x258

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R1
//
// Return the value of register F_3_R_1
//
// Notes : Register Filter bank 3 register 1 (F3R1) at the offset 0x258, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x258); \
     WRITE_REGISTER_ULONG( base + 0x258, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x258 ); \
     WRITE_REGISTER_ULONG( base + 0x258, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x258) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F3_R2
//
// Notes : Register F3R2 at offset 0x25C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_3_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x25C, val)

#define SET_BITS_F_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  mask ); \
   } 

#define CLEAR_BITS_F_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_3_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x25C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F3R2_REG 0x25C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F3R2
//
// Return the value of register F_3_R_2
//
// Notes : Register Filter bank 3 register 2 (F3R2) at the offset 0x25C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x25C); \
     WRITE_REGISTER_ULONG( base + 0x25C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x25C ); \
     WRITE_REGISTER_ULONG( base + 0x25C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x25C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F4_R1
//
// Notes : Register F4R1 at offset 0x260
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_4_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x260, val)

#define SET_BITS_F_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  mask ); \
   } 

#define CLEAR_BITS_F_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260,  val & ~mask ); \
   } 

#define READ_REGISTER_F_4_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x260) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F4R1_REG 0x260

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R1
//
// Return the value of register F_4_R_1
//
// Notes : Register Filter bank 4 register 1 (F4R1) at the offset 0x260, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x260); \
     WRITE_REGISTER_ULONG( base + 0x260, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x260 ); \
     WRITE_REGISTER_ULONG( base + 0x260, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x260) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F4_R2
//
// Notes : Register F4R2 at offset 0x264
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_4_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x264, val)

#define SET_BITS_F_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  mask ); \
   } 

#define CLEAR_BITS_F_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264,  val & ~mask ); \
   } 

#define READ_REGISTER_F_4_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x264) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F4R2_REG 0x264

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F4R2
//
// Return the value of register F_4_R_2
//
// Notes : Register Filter bank 4 register 2 (F4R2) at the offset 0x264, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x264); \
     WRITE_REGISTER_ULONG( base + 0x264, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x264 ); \
     WRITE_REGISTER_ULONG( base + 0x264, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x264) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F5_R1
//
// Notes : Register F5R1 at offset 0x268
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_5_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x268, val)

#define SET_BITS_F_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  mask ); \
   } 

#define CLEAR_BITS_F_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268,  val & ~mask ); \
   } 

#define READ_REGISTER_F_5_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x268) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F5R1_REG 0x268

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R1
//
// Return the value of register F_5_R_1
//
// Notes : Register Filter bank 5 register 1 (F5R1) at the offset 0x268, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x268); \
     WRITE_REGISTER_ULONG( base + 0x268, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x268 ); \
     WRITE_REGISTER_ULONG( base + 0x268, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x268) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F5_R2
//
// Notes : Register F5R2 at offset 0x26C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_5_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x26C, val)

#define SET_BITS_F_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  mask ); \
   } 

#define CLEAR_BITS_F_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_5_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x26C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F5R2_REG 0x26C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F5R2
//
// Return the value of register F_5_R_2
//
// Notes : Register Filter bank 5 register 2 (F5R2) at the offset 0x26C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x26C); \
     WRITE_REGISTER_ULONG( base + 0x26C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x26C ); \
     WRITE_REGISTER_ULONG( base + 0x26C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x26C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F6_R1
//
// Notes : Register F6R1 at offset 0x270
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_6_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x270, val)

#define SET_BITS_F_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  mask ); \
   } 

#define CLEAR_BITS_F_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270,  val & ~mask ); \
   } 

#define READ_REGISTER_F_6_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x270) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F6R1_REG 0x270

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R1
//
// Return the value of register F_6_R_1
//
// Notes : Register Filter bank 6 register 1 (F6R1) at the offset 0x270, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x270); \
     WRITE_REGISTER_ULONG( base + 0x270, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x270 ); \
     WRITE_REGISTER_ULONG( base + 0x270, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x270) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F6_R2
//
// Notes : Register F6R2 at offset 0x274
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_6_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x274, val)

#define SET_BITS_F_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  mask ); \
   } 

#define CLEAR_BITS_F_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274,  val & ~mask ); \
   } 

#define READ_REGISTER_F_6_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x274) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F6R2_REG 0x274

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F6R2
//
// Return the value of register F_6_R_2
//
// Notes : Register Filter bank 6 register 2 (F6R2) at the offset 0x274, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x274); \
     WRITE_REGISTER_ULONG( base + 0x274, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x274 ); \
     WRITE_REGISTER_ULONG( base + 0x274, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x274) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F7_R1
//
// Notes : Register F7R1 at offset 0x278
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_7_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x278, val)

#define SET_BITS_F_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  mask ); \
   } 

#define CLEAR_BITS_F_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278,  val & ~mask ); \
   } 

#define READ_REGISTER_F_7_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x278) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F7R1_REG 0x278

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R1
//
// Return the value of register F_7_R_1
//
// Notes : Register Filter bank 7 register 1 (F7R1) at the offset 0x278, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x278); \
     WRITE_REGISTER_ULONG( base + 0x278, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x278 ); \
     WRITE_REGISTER_ULONG( base + 0x278, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x278) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F7_R2
//
// Notes : Register F7R2 at offset 0x27C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_7_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x27C, val)

#define SET_BITS_F_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  mask ); \
   } 

#define CLEAR_BITS_F_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_7_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x27C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F7R2_REG 0x27C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F7R2
//
// Return the value of register F_7_R_2
//
// Notes : Register Filter bank 7 register 2 (F7R2) at the offset 0x27C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x27C); \
     WRITE_REGISTER_ULONG( base + 0x27C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x27C ); \
     WRITE_REGISTER_ULONG( base + 0x27C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x27C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F8_R1
//
// Notes : Register F8R1 at offset 0x280
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_8_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x280, val)

#define SET_BITS_F_8_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  mask ); \
   } 

#define CLEAR_BITS_F_8_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280,  val & ~mask ); \
   } 

#define READ_REGISTER_F_8_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x280) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F8R1_REG 0x280

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R1
//
// Return the value of register F_8_R_1
//
// Notes : Register Filter bank 8 register 1 (F8R1) at the offset 0x280, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x280); \
     WRITE_REGISTER_ULONG( base + 0x280, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x280 ); \
     WRITE_REGISTER_ULONG( base + 0x280, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x280) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F8_R2
//
// Notes : Register F8R2 at offset 0x284
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_8_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x284, val)

#define SET_BITS_F_8_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  mask ); \
   } 

#define CLEAR_BITS_F_8_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284,  val & ~mask ); \
   } 

#define READ_REGISTER_F_8_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x284) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F8R2_REG 0x284

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F8R2
//
// Return the value of register F_8_R_2
//
// Notes : Register Filter bank 8 register 2 (F8R2) at the offset 0x284, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x284); \
     WRITE_REGISTER_ULONG( base + 0x284, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x284 ); \
     WRITE_REGISTER_ULONG( base + 0x284, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x284) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F9_R1
//
// Notes : Register F9R1 at offset 0x288
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_9_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x288, val)

#define SET_BITS_F_9_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  mask ); \
   } 

#define CLEAR_BITS_F_9_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288,  val & ~mask ); \
   } 

#define READ_REGISTER_F_9_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x288) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F9R1_REG 0x288

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R1
//
// Return the value of register F_9_R_1
//
// Notes : Register Filter bank 9 register 1 (F9R1) at the offset 0x288, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x288); \
     WRITE_REGISTER_ULONG( base + 0x288, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x288 ); \
     WRITE_REGISTER_ULONG( base + 0x288, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x288) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F9_R2
//
// Notes : Register F9R2 at offset 0x28C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_9_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x28C, val)

#define SET_BITS_F_9_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  mask ); \
   } 

#define CLEAR_BITS_F_9_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_9_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x28C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F9R2_REG 0x28C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F9R2
//
// Return the value of register F_9_R_2
//
// Notes : Register Filter bank 9 register 2 (F9R2) at the offset 0x28C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x28C); \
     WRITE_REGISTER_ULONG( base + 0x28C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x28C ); \
     WRITE_REGISTER_ULONG( base + 0x28C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x28C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F10_R1
//
// Notes : Register F10R1 at offset 0x290
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_0_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x290, val)

#define SET_BITS_F_1_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_0_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x290) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F10R1_REG 0x290

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R1
//
// Return the value of register F_1_0_R_1
//
// Notes : Register Filter bank 10 register 1 (F10R1) at the offset 0x290, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x290); \
     WRITE_REGISTER_ULONG( base + 0x290, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x290 ); \
     WRITE_REGISTER_ULONG( base + 0x290, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x290) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F10_R2
//
// Notes : Register F10R2 at offset 0x294
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_0_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x294, val)

#define SET_BITS_F_1_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_0_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x294) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F10R2_REG 0x294

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F10R2
//
// Return the value of register F_1_0_R_2
//
// Notes : Register Filter bank 10 register 2 (F10R2) at the offset 0x294, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x294); \
     WRITE_REGISTER_ULONG( base + 0x294, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x294 ); \
     WRITE_REGISTER_ULONG( base + 0x294, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x294) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F11_R1
//
// Notes : Register F11R1 at offset 0x298
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_1_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x298, val)

#define SET_BITS_F_1_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_1_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x298) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F11R1_REG 0x298

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R1
//
// Return the value of register F_1_1_R_1
//
// Notes : Register Filter bank 11 register 1 (F11R1) at the offset 0x298, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x298); \
     WRITE_REGISTER_ULONG( base + 0x298, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x298 ); \
     WRITE_REGISTER_ULONG( base + 0x298, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x298) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F11_R2
//
// Notes : Register F11R2 at offset 0x29C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_1_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x29C, val)

#define SET_BITS_F_1_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_1_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x29C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F11R2_REG 0x29C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F11R2
//
// Return the value of register F_1_1_R_2
//
// Notes : Register Filter bank 11 register 2 (F11R2) at the offset 0x29C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x29C); \
     WRITE_REGISTER_ULONG( base + 0x29C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x29C ); \
     WRITE_REGISTER_ULONG( base + 0x29C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x29C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F12_R1
//
// Notes : Register F12R1 at offset 0x2A0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_2_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2A0, val)

#define SET_BITS_F_1_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_2_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2A0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F12R1_REG 0x2A0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R1
//
// Return the value of register F_1_2_R_1
//
// Notes : Register Filter bank 4 register 1 (F12R1) at the offset 0x2A0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A0); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A0 ); \
     WRITE_REGISTER_ULONG( base + 0x2A0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2A0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F12_R2
//
// Notes : Register F12R2 at offset 0x2A4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_2_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2A4, val)

#define SET_BITS_F_1_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_2_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2A4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F12R2_REG 0x2A4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F12R2
//
// Return the value of register F_1_2_R_2
//
// Notes : Register Filter bank 12 register 2 (F12R2) at the offset 0x2A4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A4); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A4 ); \
     WRITE_REGISTER_ULONG( base + 0x2A4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2A4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F13_R1
//
// Notes : Register F13R1 at offset 0x2A8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_3_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2A8, val)

#define SET_BITS_F_1_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_3_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2A8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F13R1_REG 0x2A8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R1
//
// Return the value of register F_1_3_R_1
//
// Notes : Register Filter bank 13 register 1 (F13R1) at the offset 0x2A8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2A8); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2A8 ); \
     WRITE_REGISTER_ULONG( base + 0x2A8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2A8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F13_R2
//
// Notes : Register F13R2 at offset 0x2AC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_3_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2AC, val)

#define SET_BITS_F_1_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_3_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2AC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F13R2_REG 0x2AC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F13R2
//
// Return the value of register F_1_3_R_2
//
// Notes : Register Filter bank 13 register 2 (F13R2) at the offset 0x2AC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2AC); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2AC ); \
     WRITE_REGISTER_ULONG( base + 0x2AC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2AC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F14_R1
//
// Notes : Register F14R1 at offset 0x2B0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_4_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2B0, val)

#define SET_BITS_F_1_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_4_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2B0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F14R1_REG 0x2B0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R1
//
// Return the value of register F_1_4_R_1
//
// Notes : Register Filter bank 14 register 1 (F14R1) at the offset 0x2B0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B0); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B0 ); \
     WRITE_REGISTER_ULONG( base + 0x2B0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2B0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F14_R2
//
// Notes : Register F14R2 at offset 0x2B4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_4_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2B4, val)

#define SET_BITS_F_1_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_4_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2B4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F14R2_REG 0x2B4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F14R2
//
// Return the value of register F_1_4_R_2
//
// Notes : Register Filter bank 14 register 2 (F14R2) at the offset 0x2B4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B4); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B4 ); \
     WRITE_REGISTER_ULONG( base + 0x2B4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2B4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F15_R1
//
// Notes : Register F15R1 at offset 0x2B8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_5_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2B8, val)

#define SET_BITS_F_1_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_5_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2B8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F15R1_REG 0x2B8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R1
//
// Return the value of register F_1_5_R_1
//
// Notes : Register Filter bank 15 register 1 (F15R1) at the offset 0x2B8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2B8); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2B8 ); \
     WRITE_REGISTER_ULONG( base + 0x2B8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2B8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F15_R2
//
// Notes : Register F15R2 at offset 0x2BC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_5_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2BC, val)

#define SET_BITS_F_1_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_5_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2BC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F15R2_REG 0x2BC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F15R2
//
// Return the value of register F_1_5_R_2
//
// Notes : Register Filter bank 15 register 2 (F15R2) at the offset 0x2BC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2BC); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2BC ); \
     WRITE_REGISTER_ULONG( base + 0x2BC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2BC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F16_R1
//
// Notes : Register F16R1 at offset 0x2C0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_6_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2C0, val)

#define SET_BITS_F_1_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_6_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2C0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F16R1_REG 0x2C0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R1
//
// Return the value of register F_1_6_R_1
//
// Notes : Register Filter bank 16 register 1 (F16R1) at the offset 0x2C0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C0); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C0 ); \
     WRITE_REGISTER_ULONG( base + 0x2C0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2C0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F16_R2
//
// Notes : Register F16R2 at offset 0x2C4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_6_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2C4, val)

#define SET_BITS_F_1_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_6_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2C4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F16R2_REG 0x2C4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F16R2
//
// Return the value of register F_1_6_R_2
//
// Notes : Register Filter bank 16 register 2 (F16R2) at the offset 0x2C4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C4); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C4 ); \
     WRITE_REGISTER_ULONG( base + 0x2C4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2C4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F17_R1
//
// Notes : Register F17R1 at offset 0x2C8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_7_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2C8, val)

#define SET_BITS_F_1_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_7_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2C8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F17R1_REG 0x2C8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R1
//
// Return the value of register F_1_7_R_1
//
// Notes : Register Filter bank 17 register 1 (F17R1) at the offset 0x2C8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2C8); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2C8 ); \
     WRITE_REGISTER_ULONG( base + 0x2C8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2C8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F17_R2
//
// Notes : Register F17R2 at offset 0x2CC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_7_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2CC, val)

#define SET_BITS_F_1_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_7_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2CC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F17R2_REG 0x2CC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F17R2
//
// Return the value of register F_1_7_R_2
//
// Notes : Register Filter bank 17 register 2 (F17R2) at the offset 0x2CC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2CC); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2CC ); \
     WRITE_REGISTER_ULONG( base + 0x2CC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2CC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F18_R1
//
// Notes : Register F18R1 at offset 0x2D0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_8_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2D0, val)

#define SET_BITS_F_1_8_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_8_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_8_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2D0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F18R1_REG 0x2D0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R1
//
// Return the value of register F_1_8_R_1
//
// Notes : Register Filter bank 18 register 1 (F18R1) at the offset 0x2D0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D0); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D0 ); \
     WRITE_REGISTER_ULONG( base + 0x2D0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2D0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F18_R2
//
// Notes : Register F18R2 at offset 0x2D4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_8_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2D4, val)

#define SET_BITS_F_1_8_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_8_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_8_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2D4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F18R2_REG 0x2D4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F18R2
//
// Return the value of register F_1_8_R_2
//
// Notes : Register Filter bank 18 register 2 (F18R2) at the offset 0x2D4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D4); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D4 ); \
     WRITE_REGISTER_ULONG( base + 0x2D4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2D4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F19_R1
//
// Notes : Register F19R1 at offset 0x2D8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_9_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2D8, val)

#define SET_BITS_F_1_9_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_9_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_9_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2D8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F19R1_REG 0x2D8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R1
//
// Return the value of register F_1_9_R_1
//
// Notes : Register Filter bank 19 register 1 (F19R1) at the offset 0x2D8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2D8); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2D8 ); \
     WRITE_REGISTER_ULONG( base + 0x2D8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2D8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F19_R2
//
// Notes : Register F19R2 at offset 0x2DC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_1_9_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2DC, val)

#define SET_BITS_F_1_9_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  mask ); \
   } 

#define CLEAR_BITS_F_1_9_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_1_9_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2DC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F19R2_REG 0x2DC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F19R2
//
// Return the value of register F_1_9_R_2
//
// Notes : Register Filter bank 19 register 2 (F19R2) at the offset 0x2DC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2DC); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2DC ); \
     WRITE_REGISTER_ULONG( base + 0x2DC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2DC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F20_R1
//
// Notes : Register F20R1 at offset 0x2E0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_0_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2E0, val)

#define SET_BITS_F_2_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_0_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_0_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2E0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F20R1_REG 0x2E0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R1
//
// Return the value of register F_2_0_R_1
//
// Notes : Register Filter bank 20 register 1 (F20R1) at the offset 0x2E0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E0); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E0 ); \
     WRITE_REGISTER_ULONG( base + 0x2E0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2E0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F20_R2
//
// Notes : Register F20R2 at offset 0x2E4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_0_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2E4, val)

#define SET_BITS_F_2_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_0_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_0_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2E4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F20R2_REG 0x2E4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F20R2
//
// Return the value of register F_2_0_R_2
//
// Notes : Register Filter bank 20 register 2 (F20R2) at the offset 0x2E4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E4); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E4 ); \
     WRITE_REGISTER_ULONG( base + 0x2E4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2E4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F21_R1
//
// Notes : Register F21R1 at offset 0x2E8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_1_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2E8, val)

#define SET_BITS_F_2_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_1_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_1_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2E8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F21R1_REG 0x2E8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R1
//
// Return the value of register F_2_1_R_1
//
// Notes : Register Filter bank 21 register 1 (F21R1) at the offset 0x2E8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2E8); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2E8 ); \
     WRITE_REGISTER_ULONG( base + 0x2E8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2E8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F21_R2
//
// Notes : Register F21R2 at offset 0x2EC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_1_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2EC, val)

#define SET_BITS_F_2_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_1_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_1_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2EC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F21R2_REG 0x2EC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F21R2
//
// Return the value of register F_2_1_R_2
//
// Notes : Register Filter bank 21 register 2 (F21R2) at the offset 0x2EC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2EC); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2EC ); \
     WRITE_REGISTER_ULONG( base + 0x2EC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2EC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F22_R1
//
// Notes : Register F22R1 at offset 0x2F0
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_2_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2F0, val)

#define SET_BITS_F_2_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_2_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_2_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2F0) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F22R1_REG 0x2F0

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R1
//
// Return the value of register F_2_2_R_1
//
// Notes : Register Filter bank 22 register 1 (F22R1) at the offset 0x2F0, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F0); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F0 ); \
     WRITE_REGISTER_ULONG( base + 0x2F0, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2F0) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F22_R2
//
// Notes : Register F22R2 at offset 0x2F4
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_2_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2F4, val)

#define SET_BITS_F_2_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_2_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_2_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2F4) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F22R2_REG 0x2F4

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F22R2
//
// Return the value of register F_2_2_R_2
//
// Notes : Register Filter bank 22 register 2 (F22R2) at the offset 0x2F4, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F4); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F4 ); \
     WRITE_REGISTER_ULONG( base + 0x2F4, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2F4) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F23_R1
//
// Notes : Register F23R1 at offset 0x2F8
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_3_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2F8, val)

#define SET_BITS_F_2_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_3_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_3_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x2F8) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F23R1_REG 0x2F8

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R1
//
// Return the value of register F_2_3_R_1
//
// Notes : Register Filter bank 23 register 1 (F23R1) at the offset 0x2F8, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2F8); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2F8 ); \
     WRITE_REGISTER_ULONG( base + 0x2F8, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2F8) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F23_R2
//
// Notes : Register F23R2 at offset 0x2FC
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_3_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x2FC, val)

#define SET_BITS_F_2_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_3_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_3_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x2FC) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F23R2_REG 0x2FC

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F23R2
//
// Return the value of register F_2_3_R_2
//
// Notes : Register Filter bank 23 register 2 (F23R2) at the offset 0x2FC, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x2FC); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x2FC ); \
     WRITE_REGISTER_ULONG( base + 0x2FC, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x2FC) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F24_R1
//
// Notes : Register F24R1 at offset 0x300
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_4_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x300, val)

#define SET_BITS_F_2_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_4_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_4_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x300) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F24R1_REG 0x300

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R1
//
// Return the value of register F_2_4_R_1
//
// Notes : Register Filter bank 24 register 1 (F24R1) at the offset 0x300, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x300); \
     WRITE_REGISTER_ULONG( base + 0x300, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x300 ); \
     WRITE_REGISTER_ULONG( base + 0x300, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x300) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F24_R2
//
// Notes : Register F24R2 at offset 0x304
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_4_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x304, val)

#define SET_BITS_F_2_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_4_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_4_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x304) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F24R2_REG 0x304

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F24R2
//
// Return the value of register F_2_4_R_2
//
// Notes : Register Filter bank 24 register 2 (F24R2) at the offset 0x304, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x304); \
     WRITE_REGISTER_ULONG( base + 0x304, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x304 ); \
     WRITE_REGISTER_ULONG( base + 0x304, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x304) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F25_R1
//
// Notes : Register F25R1 at offset 0x308
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_5_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x308, val)

#define SET_BITS_F_2_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_5_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_5_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x308) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F25R1_REG 0x308

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R1
//
// Return the value of register F_2_5_R_1
//
// Notes : Register Filter bank 25 register 1 (F25R1) at the offset 0x308, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x308); \
     WRITE_REGISTER_ULONG( base + 0x308, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x308 ); \
     WRITE_REGISTER_ULONG( base + 0x308, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x308) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F25_R2
//
// Notes : Register F25R2 at offset 0x30C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_5_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x30C, val)

#define SET_BITS_F_2_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_5_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_5_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x30C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F25R2_REG 0x30C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F25R2
//
// Return the value of register F_2_5_R_2
//
// Notes : Register Filter bank 25 register 2 (F25R2) at the offset 0x30C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x30C); \
     WRITE_REGISTER_ULONG( base + 0x30C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x30C ); \
     WRITE_REGISTER_ULONG( base + 0x30C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x30C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F26_R1
//
// Notes : Register F26R1 at offset 0x310
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_6_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x310, val)

#define SET_BITS_F_2_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_6_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_6_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x310) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F26R1_REG 0x310

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R1
//
// Return the value of register F_2_6_R_1
//
// Notes : Register Filter bank 26 register 1 (F26R1) at the offset 0x310, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x310); \
     WRITE_REGISTER_ULONG( base + 0x310, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x310 ); \
     WRITE_REGISTER_ULONG( base + 0x310, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x310) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F26_R2
//
// Notes : Register F26R2 at offset 0x314
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_6_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x314, val)

#define SET_BITS_F_2_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_6_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_6_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x314) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F26R2_REG 0x314

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F26R2
//
// Return the value of register F_2_6_R_2
//
// Notes : Register Filter bank 26 register 2 (F26R2) at the offset 0x314, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x314); \
     WRITE_REGISTER_ULONG( base + 0x314, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x314 ); \
     WRITE_REGISTER_ULONG( base + 0x314, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x314) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F27_R1
//
// Notes : Register F27R1 at offset 0x318
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_7_R_1( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x318, val)

#define SET_BITS_F_2_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_7_R_1(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_7_R_1( base ) \
     READ_REGISTER_ULONG( base + 0x318) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F27R1_REG 0x318

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R1
//
// Return the value of register F_2_7_R_1
//
// Notes : Register Filter bank 27 register 1 (F27R1) at the offset 0x318, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x318); \
     WRITE_REGISTER_ULONG( base + 0x318, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x318 ); \
     WRITE_REGISTER_ULONG( base + 0x318, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x318) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F27_R2
//
// Notes : Register F27R2 at offset 0x31C
//
/////////////////////////////////////////////////////////////////////////
#define WRITE_REGISTER_F_2_7_R_2( base,  val) \
     WRITE_REGISTER_ULONG( base + 0x31C, val)

#define SET_BITS_F_2_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  mask ); \
   } 

#define CLEAR_BITS_F_2_7_R_2(base, mask) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C,  val & ~mask ); \
   } 

#define READ_REGISTER_F_2_7_R_2( base ) \
     READ_REGISTER_ULONG( base + 0x31C) 

/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 31:31

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB31_MASK 0x80000000U
#define FB31_OFFSET 31
#define FB31_START_BIT 31
#define FB31_WIDTH 1


#define F27R2_REG 0x31C

#define WRITE_FB31(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB31_MASK) | ((val << FB31_START_BIT) & FB31_MASK )); \
   } 

#define ENABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB31_MASK ); \
   } 

#define DISABLE_FB31(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB31_MASK ); \
   } 

#define READ_FB31(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB31_MASK) >> FB31_START_BIT )

#define WHEN_FB31_HIGH(base) \
     if ( READ_FB31(base) )


#define UNLESS_FB31_HIGH(base) \
     if (! READ_FB31(base) )


#define WAIT_FB31_LOW(base) \
    while ( READ_FB31(base) );


#define WAIT_FB31_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB31(base) && (--timeout > 0) );


#define WAIT_FB31_HIGH(base) \
    while (! READ_FB31(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 30:30

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB30_MASK 0x40000000U
#define FB30_OFFSET 30
#define FB30_START_BIT 30
#define FB30_WIDTH 1



#define WRITE_FB30(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB30_MASK) | ((val << FB30_START_BIT) & FB30_MASK )); \
   } 

#define ENABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB30_MASK ); \
   } 

#define DISABLE_FB30(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB30_MASK ); \
   } 

#define READ_FB30(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB30_MASK) >> FB30_START_BIT )

#define WHEN_FB30_HIGH(base) \
     if ( READ_FB30(base) )


#define UNLESS_FB30_HIGH(base) \
     if (! READ_FB30(base) )


#define WAIT_FB30_LOW(base) \
    while ( READ_FB30(base) );


#define WAIT_FB30_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB30(base) && (--timeout > 0) );


#define WAIT_FB30_HIGH(base) \
    while (! READ_FB30(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 29:29

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB29_MASK 0x20000000U
#define FB29_OFFSET 29
#define FB29_START_BIT 29
#define FB29_WIDTH 1



#define WRITE_FB29(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB29_MASK) | ((val << FB29_START_BIT) & FB29_MASK )); \
   } 

#define ENABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB29_MASK ); \
   } 

#define DISABLE_FB29(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB29_MASK ); \
   } 

#define READ_FB29(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB29_MASK) >> FB29_START_BIT )

#define WHEN_FB29_HIGH(base) \
     if ( READ_FB29(base) )


#define UNLESS_FB29_HIGH(base) \
     if (! READ_FB29(base) )


#define WAIT_FB29_LOW(base) \
    while ( READ_FB29(base) );


#define WAIT_FB29_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB29(base) && (--timeout > 0) );


#define WAIT_FB29_HIGH(base) \
    while (! READ_FB29(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 28:28

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB28_MASK 0x10000000U
#define FB28_OFFSET 28
#define FB28_START_BIT 28
#define FB28_WIDTH 1



#define WRITE_FB28(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB28_MASK) | ((val << FB28_START_BIT) & FB28_MASK )); \
   } 

#define ENABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB28_MASK ); \
   } 

#define DISABLE_FB28(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB28_MASK ); \
   } 

#define READ_FB28(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB28_MASK) >> FB28_START_BIT )

#define WHEN_FB28_HIGH(base) \
     if ( READ_FB28(base) )


#define UNLESS_FB28_HIGH(base) \
     if (! READ_FB28(base) )


#define WAIT_FB28_LOW(base) \
    while ( READ_FB28(base) );


#define WAIT_FB28_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB28(base) && (--timeout > 0) );


#define WAIT_FB28_HIGH(base) \
    while (! READ_FB28(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 27:27

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB27_MASK 0x8000000U
#define FB27_OFFSET 27
#define FB27_START_BIT 27
#define FB27_WIDTH 1



#define WRITE_FB27(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB27_MASK) | ((val << FB27_START_BIT) & FB27_MASK )); \
   } 

#define ENABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB27_MASK ); \
   } 

#define DISABLE_FB27(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB27_MASK ); \
   } 

#define READ_FB27(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB27_MASK) >> FB27_START_BIT )

#define WHEN_FB27_HIGH(base) \
     if ( READ_FB27(base) )


#define UNLESS_FB27_HIGH(base) \
     if (! READ_FB27(base) )


#define WAIT_FB27_LOW(base) \
    while ( READ_FB27(base) );


#define WAIT_FB27_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB27(base) && (--timeout > 0) );


#define WAIT_FB27_HIGH(base) \
    while (! READ_FB27(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 26:26

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB26_MASK 0x4000000U
#define FB26_OFFSET 26
#define FB26_START_BIT 26
#define FB26_WIDTH 1



#define WRITE_FB26(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB26_MASK) | ((val << FB26_START_BIT) & FB26_MASK )); \
   } 

#define ENABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB26_MASK ); \
   } 

#define DISABLE_FB26(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB26_MASK ); \
   } 

#define READ_FB26(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB26_MASK) >> FB26_START_BIT )

#define WHEN_FB26_HIGH(base) \
     if ( READ_FB26(base) )


#define UNLESS_FB26_HIGH(base) \
     if (! READ_FB26(base) )


#define WAIT_FB26_LOW(base) \
    while ( READ_FB26(base) );


#define WAIT_FB26_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB26(base) && (--timeout > 0) );


#define WAIT_FB26_HIGH(base) \
    while (! READ_FB26(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 25:25

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB25_MASK 0x2000000U
#define FB25_OFFSET 25
#define FB25_START_BIT 25
#define FB25_WIDTH 1



#define WRITE_FB25(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB25_MASK) | ((val << FB25_START_BIT) & FB25_MASK )); \
   } 

#define ENABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB25_MASK ); \
   } 

#define DISABLE_FB25(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB25_MASK ); \
   } 

#define READ_FB25(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB25_MASK) >> FB25_START_BIT )

#define WHEN_FB25_HIGH(base) \
     if ( READ_FB25(base) )


#define UNLESS_FB25_HIGH(base) \
     if (! READ_FB25(base) )


#define WAIT_FB25_LOW(base) \
    while ( READ_FB25(base) );


#define WAIT_FB25_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB25(base) && (--timeout > 0) );


#define WAIT_FB25_HIGH(base) \
    while (! READ_FB25(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 24:24

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB24_MASK 0x1000000U
#define FB24_OFFSET 24
#define FB24_START_BIT 24
#define FB24_WIDTH 1



#define WRITE_FB24(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB24_MASK) | ((val << FB24_START_BIT) & FB24_MASK )); \
   } 

#define ENABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB24_MASK ); \
   } 

#define DISABLE_FB24(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB24_MASK ); \
   } 

#define READ_FB24(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB24_MASK) >> FB24_START_BIT )

#define WHEN_FB24_HIGH(base) \
     if ( READ_FB24(base) )


#define UNLESS_FB24_HIGH(base) \
     if (! READ_FB24(base) )


#define WAIT_FB24_LOW(base) \
    while ( READ_FB24(base) );


#define WAIT_FB24_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB24(base) && (--timeout > 0) );


#define WAIT_FB24_HIGH(base) \
    while (! READ_FB24(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 23:23

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB23_MASK 0x800000U
#define FB23_OFFSET 23
#define FB23_START_BIT 23
#define FB23_WIDTH 1



#define WRITE_FB23(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB23_MASK) | ((val << FB23_START_BIT) & FB23_MASK )); \
   } 

#define ENABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB23_MASK ); \
   } 

#define DISABLE_FB23(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB23_MASK ); \
   } 

#define READ_FB23(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB23_MASK) >> FB23_START_BIT )

#define WHEN_FB23_HIGH(base) \
     if ( READ_FB23(base) )


#define UNLESS_FB23_HIGH(base) \
     if (! READ_FB23(base) )


#define WAIT_FB23_LOW(base) \
    while ( READ_FB23(base) );


#define WAIT_FB23_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB23(base) && (--timeout > 0) );


#define WAIT_FB23_HIGH(base) \
    while (! READ_FB23(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 22:22

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB22_MASK 0x400000U
#define FB22_OFFSET 22
#define FB22_START_BIT 22
#define FB22_WIDTH 1



#define WRITE_FB22(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB22_MASK) | ((val << FB22_START_BIT) & FB22_MASK )); \
   } 

#define ENABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB22_MASK ); \
   } 

#define DISABLE_FB22(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB22_MASK ); \
   } 

#define READ_FB22(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB22_MASK) >> FB22_START_BIT )

#define WHEN_FB22_HIGH(base) \
     if ( READ_FB22(base) )


#define UNLESS_FB22_HIGH(base) \
     if (! READ_FB22(base) )


#define WAIT_FB22_LOW(base) \
    while ( READ_FB22(base) );


#define WAIT_FB22_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB22(base) && (--timeout > 0) );


#define WAIT_FB22_HIGH(base) \
    while (! READ_FB22(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 21:21

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB21_MASK 0x200000U
#define FB21_OFFSET 21
#define FB21_START_BIT 21
#define FB21_WIDTH 1



#define WRITE_FB21(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB21_MASK) | ((val << FB21_START_BIT) & FB21_MASK )); \
   } 

#define ENABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB21_MASK ); \
   } 

#define DISABLE_FB21(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB21_MASK ); \
   } 

#define READ_FB21(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB21_MASK) >> FB21_START_BIT )

#define WHEN_FB21_HIGH(base) \
     if ( READ_FB21(base) )


#define UNLESS_FB21_HIGH(base) \
     if (! READ_FB21(base) )


#define WAIT_FB21_LOW(base) \
    while ( READ_FB21(base) );


#define WAIT_FB21_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB21(base) && (--timeout > 0) );


#define WAIT_FB21_HIGH(base) \
    while (! READ_FB21(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 20:20

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB20_MASK 0x100000U
#define FB20_OFFSET 20
#define FB20_START_BIT 20
#define FB20_WIDTH 1



#define WRITE_FB20(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB20_MASK) | ((val << FB20_START_BIT) & FB20_MASK )); \
   } 

#define ENABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB20_MASK ); \
   } 

#define DISABLE_FB20(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB20_MASK ); \
   } 

#define READ_FB20(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB20_MASK) >> FB20_START_BIT )

#define WHEN_FB20_HIGH(base) \
     if ( READ_FB20(base) )


#define UNLESS_FB20_HIGH(base) \
     if (! READ_FB20(base) )


#define WAIT_FB20_LOW(base) \
    while ( READ_FB20(base) );


#define WAIT_FB20_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB20(base) && (--timeout > 0) );


#define WAIT_FB20_HIGH(base) \
    while (! READ_FB20(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 19:19

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB19_MASK 0x80000U
#define FB19_OFFSET 19
#define FB19_START_BIT 19
#define FB19_WIDTH 1



#define WRITE_FB19(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB19_MASK) | ((val << FB19_START_BIT) & FB19_MASK )); \
   } 

#define ENABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB19_MASK ); \
   } 

#define DISABLE_FB19(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB19_MASK ); \
   } 

#define READ_FB19(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB19_MASK) >> FB19_START_BIT )

#define WHEN_FB19_HIGH(base) \
     if ( READ_FB19(base) )


#define UNLESS_FB19_HIGH(base) \
     if (! READ_FB19(base) )


#define WAIT_FB19_LOW(base) \
    while ( READ_FB19(base) );


#define WAIT_FB19_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB19(base) && (--timeout > 0) );


#define WAIT_FB19_HIGH(base) \
    while (! READ_FB19(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 18:18

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB18_MASK 0x40000U
#define FB18_OFFSET 18
#define FB18_START_BIT 18
#define FB18_WIDTH 1



#define WRITE_FB18(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB18_MASK) | ((val << FB18_START_BIT) & FB18_MASK )); \
   } 

#define ENABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB18_MASK ); \
   } 

#define DISABLE_FB18(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB18_MASK ); \
   } 

#define READ_FB18(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB18_MASK) >> FB18_START_BIT )

#define WHEN_FB18_HIGH(base) \
     if ( READ_FB18(base) )


#define UNLESS_FB18_HIGH(base) \
     if (! READ_FB18(base) )


#define WAIT_FB18_LOW(base) \
    while ( READ_FB18(base) );


#define WAIT_FB18_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB18(base) && (--timeout > 0) );


#define WAIT_FB18_HIGH(base) \
    while (! READ_FB18(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 17:17

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB17_MASK 0x20000U
#define FB17_OFFSET 17
#define FB17_START_BIT 17
#define FB17_WIDTH 1



#define WRITE_FB17(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB17_MASK) | ((val << FB17_START_BIT) & FB17_MASK )); \
   } 

#define ENABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB17_MASK ); \
   } 

#define DISABLE_FB17(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB17_MASK ); \
   } 

#define READ_FB17(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB17_MASK) >> FB17_START_BIT )

#define WHEN_FB17_HIGH(base) \
     if ( READ_FB17(base) )


#define UNLESS_FB17_HIGH(base) \
     if (! READ_FB17(base) )


#define WAIT_FB17_LOW(base) \
    while ( READ_FB17(base) );


#define WAIT_FB17_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB17(base) && (--timeout > 0) );


#define WAIT_FB17_HIGH(base) \
    while (! READ_FB17(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 16:16

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB16_MASK 0x10000U
#define FB16_OFFSET 16
#define FB16_START_BIT 16
#define FB16_WIDTH 1



#define WRITE_FB16(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB16_MASK) | ((val << FB16_START_BIT) & FB16_MASK )); \
   } 

#define ENABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB16_MASK ); \
   } 

#define DISABLE_FB16(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB16_MASK ); \
   } 

#define READ_FB16(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB16_MASK) >> FB16_START_BIT )

#define WHEN_FB16_HIGH(base) \
     if ( READ_FB16(base) )


#define UNLESS_FB16_HIGH(base) \
     if (! READ_FB16(base) )


#define WAIT_FB16_LOW(base) \
    while ( READ_FB16(base) );


#define WAIT_FB16_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB16(base) && (--timeout > 0) );


#define WAIT_FB16_HIGH(base) \
    while (! READ_FB16(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 15:15

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB15_MASK 0x8000U
#define FB15_OFFSET 15
#define FB15_START_BIT 15
#define FB15_WIDTH 1



#define WRITE_FB15(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB15_MASK) | ((val << FB15_START_BIT) & FB15_MASK )); \
   } 

#define ENABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB15_MASK ); \
   } 

#define DISABLE_FB15(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB15_MASK ); \
   } 

#define READ_FB15(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB15_MASK) >> FB15_START_BIT )

#define WHEN_FB15_HIGH(base) \
     if ( READ_FB15(base) )


#define UNLESS_FB15_HIGH(base) \
     if (! READ_FB15(base) )


#define WAIT_FB15_LOW(base) \
    while ( READ_FB15(base) );


#define WAIT_FB15_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB15(base) && (--timeout > 0) );


#define WAIT_FB15_HIGH(base) \
    while (! READ_FB15(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 14:14

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB14_MASK 0x4000U
#define FB14_OFFSET 14
#define FB14_START_BIT 14
#define FB14_WIDTH 1



#define WRITE_FB14(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB14_MASK) | ((val << FB14_START_BIT) & FB14_MASK )); \
   } 

#define ENABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB14_MASK ); \
   } 

#define DISABLE_FB14(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB14_MASK ); \
   } 

#define READ_FB14(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB14_MASK) >> FB14_START_BIT )

#define WHEN_FB14_HIGH(base) \
     if ( READ_FB14(base) )


#define UNLESS_FB14_HIGH(base) \
     if (! READ_FB14(base) )


#define WAIT_FB14_LOW(base) \
    while ( READ_FB14(base) );


#define WAIT_FB14_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB14(base) && (--timeout > 0) );


#define WAIT_FB14_HIGH(base) \
    while (! READ_FB14(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 13:13

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB13_MASK 0x2000U
#define FB13_OFFSET 13
#define FB13_START_BIT 13
#define FB13_WIDTH 1



#define WRITE_FB13(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB13_MASK) | ((val << FB13_START_BIT) & FB13_MASK )); \
   } 

#define ENABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB13_MASK ); \
   } 

#define DISABLE_FB13(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB13_MASK ); \
   } 

#define READ_FB13(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB13_MASK) >> FB13_START_BIT )

#define WHEN_FB13_HIGH(base) \
     if ( READ_FB13(base) )


#define UNLESS_FB13_HIGH(base) \
     if (! READ_FB13(base) )


#define WAIT_FB13_LOW(base) \
    while ( READ_FB13(base) );


#define WAIT_FB13_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB13(base) && (--timeout > 0) );


#define WAIT_FB13_HIGH(base) \
    while (! READ_FB13(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 12:12

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB12_MASK 0x1000U
#define FB12_OFFSET 12
#define FB12_START_BIT 12
#define FB12_WIDTH 1



#define WRITE_FB12(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB12_MASK) | ((val << FB12_START_BIT) & FB12_MASK )); \
   } 

#define ENABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB12_MASK ); \
   } 

#define DISABLE_FB12(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB12_MASK ); \
   } 

#define READ_FB12(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB12_MASK) >> FB12_START_BIT )

#define WHEN_FB12_HIGH(base) \
     if ( READ_FB12(base) )


#define UNLESS_FB12_HIGH(base) \
     if (! READ_FB12(base) )


#define WAIT_FB12_LOW(base) \
    while ( READ_FB12(base) );


#define WAIT_FB12_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB12(base) && (--timeout > 0) );


#define WAIT_FB12_HIGH(base) \
    while (! READ_FB12(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 11:11

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB11_MASK 0x800U
#define FB11_OFFSET 11
#define FB11_START_BIT 11
#define FB11_WIDTH 1



#define WRITE_FB11(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB11_MASK) | ((val << FB11_START_BIT) & FB11_MASK )); \
   } 

#define ENABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB11_MASK ); \
   } 

#define DISABLE_FB11(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB11_MASK ); \
   } 

#define READ_FB11(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB11_MASK) >> FB11_START_BIT )

#define WHEN_FB11_HIGH(base) \
     if ( READ_FB11(base) )


#define UNLESS_FB11_HIGH(base) \
     if (! READ_FB11(base) )


#define WAIT_FB11_LOW(base) \
    while ( READ_FB11(base) );


#define WAIT_FB11_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB11(base) && (--timeout > 0) );


#define WAIT_FB11_HIGH(base) \
    while (! READ_FB11(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 10:10

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB10_MASK 0x400U
#define FB10_OFFSET 10
#define FB10_START_BIT 10
#define FB10_WIDTH 1



#define WRITE_FB10(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB10_MASK) | ((val << FB10_START_BIT) & FB10_MASK )); \
   } 

#define ENABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB10_MASK ); \
   } 

#define DISABLE_FB10(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB10_MASK ); \
   } 

#define READ_FB10(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB10_MASK) >> FB10_START_BIT )

#define WHEN_FB10_HIGH(base) \
     if ( READ_FB10(base) )


#define UNLESS_FB10_HIGH(base) \
     if (! READ_FB10(base) )


#define WAIT_FB10_LOW(base) \
    while ( READ_FB10(base) );


#define WAIT_FB10_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB10(base) && (--timeout > 0) );


#define WAIT_FB10_HIGH(base) \
    while (! READ_FB10(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 9:9

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB9_MASK 0x200U
#define FB9_OFFSET 9
#define FB9_START_BIT 9
#define FB9_WIDTH 1



#define WRITE_FB9(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB9_MASK) | ((val << FB9_START_BIT) & FB9_MASK )); \
   } 

#define ENABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB9_MASK ); \
   } 

#define DISABLE_FB9(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB9_MASK ); \
   } 

#define READ_FB9(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB9_MASK) >> FB9_START_BIT )

#define WHEN_FB9_HIGH(base) \
     if ( READ_FB9(base) )


#define UNLESS_FB9_HIGH(base) \
     if (! READ_FB9(base) )


#define WAIT_FB9_LOW(base) \
    while ( READ_FB9(base) );


#define WAIT_FB9_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB9(base) && (--timeout > 0) );


#define WAIT_FB9_HIGH(base) \
    while (! READ_FB9(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 8:8

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB8_MASK 0x100U
#define FB8_OFFSET 8
#define FB8_START_BIT 8
#define FB8_WIDTH 1



#define WRITE_FB8(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB8_MASK) | ((val << FB8_START_BIT) & FB8_MASK )); \
   } 

#define ENABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB8_MASK ); \
   } 

#define DISABLE_FB8(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB8_MASK ); \
   } 

#define READ_FB8(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB8_MASK) >> FB8_START_BIT )

#define WHEN_FB8_HIGH(base) \
     if ( READ_FB8(base) )


#define UNLESS_FB8_HIGH(base) \
     if (! READ_FB8(base) )


#define WAIT_FB8_LOW(base) \
    while ( READ_FB8(base) );


#define WAIT_FB8_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB8(base) && (--timeout > 0) );


#define WAIT_FB8_HIGH(base) \
    while (! READ_FB8(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 7:7

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB7_MASK 0x80U
#define FB7_OFFSET 7
#define FB7_START_BIT 7
#define FB7_WIDTH 1



#define WRITE_FB7(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB7_MASK) | ((val << FB7_START_BIT) & FB7_MASK )); \
   } 

#define ENABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB7_MASK ); \
   } 

#define DISABLE_FB7(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB7_MASK ); \
   } 

#define READ_FB7(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB7_MASK) >> FB7_START_BIT )

#define WHEN_FB7_HIGH(base) \
     if ( READ_FB7(base) )


#define UNLESS_FB7_HIGH(base) \
     if (! READ_FB7(base) )


#define WAIT_FB7_LOW(base) \
    while ( READ_FB7(base) );


#define WAIT_FB7_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB7(base) && (--timeout > 0) );


#define WAIT_FB7_HIGH(base) \
    while (! READ_FB7(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 6:6

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB6_MASK 0x40U
#define FB6_OFFSET 6
#define FB6_START_BIT 6
#define FB6_WIDTH 1



#define WRITE_FB6(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB6_MASK) | ((val << FB6_START_BIT) & FB6_MASK )); \
   } 

#define ENABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB6_MASK ); \
   } 

#define DISABLE_FB6(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB6_MASK ); \
   } 

#define READ_FB6(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB6_MASK) >> FB6_START_BIT )

#define WHEN_FB6_HIGH(base) \
     if ( READ_FB6(base) )


#define UNLESS_FB6_HIGH(base) \
     if (! READ_FB6(base) )


#define WAIT_FB6_LOW(base) \
    while ( READ_FB6(base) );


#define WAIT_FB6_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB6(base) && (--timeout > 0) );


#define WAIT_FB6_HIGH(base) \
    while (! READ_FB6(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 5:5

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB5_MASK 0x20U
#define FB5_OFFSET 5
#define FB5_START_BIT 5
#define FB5_WIDTH 1



#define WRITE_FB5(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB5_MASK) | ((val << FB5_START_BIT) & FB5_MASK )); \
   } 

#define ENABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB5_MASK ); \
   } 

#define DISABLE_FB5(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB5_MASK ); \
   } 

#define READ_FB5(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB5_MASK) >> FB5_START_BIT )

#define WHEN_FB5_HIGH(base) \
     if ( READ_FB5(base) )


#define UNLESS_FB5_HIGH(base) \
     if (! READ_FB5(base) )


#define WAIT_FB5_LOW(base) \
    while ( READ_FB5(base) );


#define WAIT_FB5_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB5(base) && (--timeout > 0) );


#define WAIT_FB5_HIGH(base) \
    while (! READ_FB5(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 4:4

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB4_MASK 0x10U
#define FB4_OFFSET 4
#define FB4_START_BIT 4
#define FB4_WIDTH 1



#define WRITE_FB4(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB4_MASK) | ((val << FB4_START_BIT) & FB4_MASK )); \
   } 

#define ENABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB4_MASK ); \
   } 

#define DISABLE_FB4(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB4_MASK ); \
   } 

#define READ_FB4(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB4_MASK) >> FB4_START_BIT )

#define WHEN_FB4_HIGH(base) \
     if ( READ_FB4(base) )


#define UNLESS_FB4_HIGH(base) \
     if (! READ_FB4(base) )


#define WAIT_FB4_LOW(base) \
    while ( READ_FB4(base) );


#define WAIT_FB4_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB4(base) && (--timeout > 0) );


#define WAIT_FB4_HIGH(base) \
    while (! READ_FB4(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 3:3

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB3_MASK 0x8U
#define FB3_OFFSET 3
#define FB3_START_BIT 3
#define FB3_WIDTH 1



#define WRITE_FB3(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB3_MASK) | ((val << FB3_START_BIT) & FB3_MASK )); \
   } 

#define ENABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB3_MASK ); \
   } 

#define DISABLE_FB3(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB3_MASK ); \
   } 

#define READ_FB3(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB3_MASK) >> FB3_START_BIT )

#define WHEN_FB3_HIGH(base) \
     if ( READ_FB3(base) )


#define UNLESS_FB3_HIGH(base) \
     if (! READ_FB3(base) )


#define WAIT_FB3_LOW(base) \
    while ( READ_FB3(base) );


#define WAIT_FB3_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB3(base) && (--timeout > 0) );


#define WAIT_FB3_HIGH(base) \
    while (! READ_FB3(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 2:2

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB2_MASK 0x4U
#define FB2_OFFSET 2
#define FB2_START_BIT 2
#define FB2_WIDTH 1



#define WRITE_FB2(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB2_MASK) | ((val << FB2_START_BIT) & FB2_MASK )); \
   } 

#define ENABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB2_MASK ); \
   } 

#define DISABLE_FB2(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB2_MASK ); \
   } 

#define READ_FB2(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB2_MASK) >> FB2_START_BIT )

#define WHEN_FB2_HIGH(base) \
     if ( READ_FB2(base) )


#define UNLESS_FB2_HIGH(base) \
     if (! READ_FB2(base) )


#define WAIT_FB2_LOW(base) \
    while ( READ_FB2(base) );


#define WAIT_FB2_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB2(base) && (--timeout > 0) );


#define WAIT_FB2_HIGH(base) \
    while (! READ_FB2(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 1:1

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB1_MASK 0x2U
#define FB1_OFFSET 1
#define FB1_START_BIT 1
#define FB1_WIDTH 1



#define WRITE_FB1(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB1_MASK) | ((val << FB1_START_BIT) & FB1_MASK )); \
   } 

#define ENABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB1_MASK ); \
   } 

#define DISABLE_FB1(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB1_MASK ); \
   } 

#define READ_FB1(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB1_MASK) >> FB1_START_BIT )

#define WHEN_FB1_HIGH(base) \
     if ( READ_FB1(base) )


#define UNLESS_FB1_HIGH(base) \
     if (! READ_FB1(base) )


#define WAIT_FB1_LOW(base) \
    while ( READ_FB1(base) );


#define WAIT_FB1_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB1(base) && (--timeout > 0) );


#define WAIT_FB1_HIGH(base) \
    while (! READ_FB1(base) );


/////////////////////////////////////////////////////////////////////////
//
// Function : F27R2
//
// Return the value of register F_2_7_R_2
//
// Notes : Register Filter bank 27 register 2 (F27R2) at the offset 0x31C, Bits 0:0

//
/////////////////////////////////////////////////////////////////////////

    // 
    // Filter bits 
    // 
#define FB0_MASK 0x1U
#define FB0_OFFSET 0
#define FB0_START_BIT 0
#define FB0_WIDTH 1



#define WRITE_FB0(base, val) \
   {\
     ULONG OldValue = READ_REGISTER_ULONG( base  + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, (OldValue & ~FB0_MASK) | ((val << FB0_START_BIT) & FB0_MASK )); \
   } 

#define ENABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG( base + 0x31C); \
     WRITE_REGISTER_ULONG( base + 0x31C, val |  FB0_MASK ); \
   } 

#define DISABLE_FB0(base) \
   {\
     ULONG val = READ_REGISTER_ULONG(base + 0x31C ); \
     WRITE_REGISTER_ULONG( base + 0x31C, val & ~FB0_MASK ); \
   } 

#define READ_FB0(base) \
    ((READ_REGISTER_ULONG(base + 0x31C) & FB0_MASK) >> FB0_START_BIT )

#define WHEN_FB0_HIGH(base) \
     if ( READ_FB0(base) )


#define UNLESS_FB0_HIGH(base) \
     if (! READ_FB0(base) )


#define WAIT_FB0_LOW(base) \
    while ( READ_FB0(base) );


#define WAIT_FB0_LOW_WITH_TIMEOUT(base, timeout) \
    while ( READ_FB0(base) && (--timeout > 0) );


#define WAIT_FB0_HIGH(base) \
    while (! READ_FB0(base) );


