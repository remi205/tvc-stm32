
(setf lip '("adc2" "adc3" "adc1"))


(setf data-base '((CAN 2) (COMP 7) (ADC 12) (SDADC 3) (UART 4) (USART 8) (DAC 2) (DCMI) (DFSDM) (ETH 1) (FMC 1)
(FSMC 1) (HRTIM 1) (I2C 3) (I2S 5) (LPTIM 2) (OPAMP 4) (QUADSPI 1) (RTC 1) (SAI 2)  (SDIO 1) (SDMMC 1) (SPDIFRX 1) (SPI 6) (SWPMI 1)  (TIM 14) (TS 1)))


(defmacro get-ip (ip-num)
  `(cl-ppcre:scan-to-strings "([A-Z]+)" (string-upcase ,ip-num)))

(defun mess(s )
  (format stream "~a~%" s))

(defun new-line(n &key (stream t))
  (dotimes (i n)
    (format stream "~%")))

(defun licence(&key (stream t))
  (format stream "// file generated by tvc-lisp Juin 2015~%"))

(defun include( &key (stream t))
  (format stream "#pragma once~%")
  (format stream "~%")
  (format stream "#include \"stm32.h\"~%"))

(defun extern-c-in(&key (stream t))
  (format stream "#ifdef __cplusplus~%")
  (format stream "extern \"C\" {~%")
  (format stream "#endif~%"))

(defun extern-c-out(&key (stream t))
  (format stream  "#ifdef __cplusplus~%")
  (format stream  "}~%")
  (format stream  "#endif~%"))

(defun extern-ip( ip &key (stream t))
  (format stream "extern ~a_HandleTypeDef h~a;~%" (get-ip ip) (string-downcase ip)))

(defun ip-init( ip &key (stream t))
 (format stream (format nil "void MX_~a_Init(void);~%" (string-upcase ip))))

(defun do-ip (lip &key (stream t))
  (licence  :stream stream)
  (include :stream stream)
  (new-line 2 :stream stream)
  (extern-c-in :stream stream)
  (dolist (ip lip)
    (extern-ip ip :stream stream))
  (new-line 2 :stream stream)
  (dolist (ip lip)
    (ip-init ip :stream stream))
  (new-line 2 :stream stream)
  (extern-c-out :stream stream))

(defun make-ip-list (list-ip)
  (let ((l '())
        (sub-list '()))
    (dolist (ips toto)
      (setf sub-list '())
      (if (= 1 (nth 1 ips))
        (setf sub-list (push (format nil "~a" (nth 0 ips)) sub-list))
        (dotimes (ip (nth 1 ips))
          (setf sub-list (push (format nil "~a~d" (nth 0 ips) (+ ip 1)) sub-list))))
      (setf l (push sub-list l)))
    l))

(defun all-ip ()
  (let ((list-ip (make-ip-list data-base)))
    (dolist( ip list-ip)
      (format t "proceeding ~a~%" (string-downcase (get-ip  (nth 0 ip))))
      (with-open-file (out (format nil "d:/tvc-stm32/Inc/~a.h" (string-downcase (get-ip  (nth 0 ip))))
                       :if-does-not-exist :create
                       :if-exists :supersede
                       :direction :output)
        (do-ip ip :stream out)))))
                